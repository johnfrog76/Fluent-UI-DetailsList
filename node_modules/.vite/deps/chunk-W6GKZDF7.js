import {
  BaseDecorator,
  FocusZone,
  FocusZoneDirection,
  FontIcon,
  Icon
} from "./chunk-RDTBTV7D.js";
import {
  Layer,
  useConst,
  useMergedRefs
} from "./chunk-OFNEIFUY.js";
import {
  AnimationClassNames,
  AnimationStyles,
  AnimationVariables,
  Async,
  DelayedRender,
  EventGroup,
  FocusRects,
  FontWeights,
  HighContrastSelector,
  IconFontSizes,
  IsFocusVisibleClassName,
  KeyCodes,
  SELECTION_CHANGE,
  Selection,
  SelectionMode,
  __assign,
  __decorate,
  __extends,
  __rest,
  __spreadArray,
  classNamesFunction,
  composeComponentAs,
  composeRenderFunction,
  css,
  divProperties,
  elementContains,
  findIndex,
  findScrollableParent,
  focusClear,
  getDocument,
  getFocusStyle,
  getGlobalClassNames,
  getHighContrastNoAdjustStyle,
  getId,
  getNativeElementProps,
  getNativeProps,
  getParent,
  getRTL,
  getRTLSafeKeyCode,
  getRect,
  getWindow,
  hiddenContentStyle,
  initializeComponentRef,
  isElementTabbable,
  keyframes,
  memoizeFunction,
  shallowCompare,
  styled,
  useFocusRects
} from "./chunk-KWCDGRXS.js";
import {
  __toESM,
  require_react
} from "./chunk-PC5MGJGW.js";

// node_modules/@fluentui/react/lib/components/Link/Link.base.js
var React2 = __toESM(require_react());

// node_modules/@fluentui/react/lib/components/Link/useLink.js
var React = __toESM(require_react());
var getClassNames = classNamesFunction();
var useLink = function(props, forwardedRef) {
  var as = props.as, className = props.className, disabled = props.disabled, href = props.href, onClick = props.onClick, styles = props.styles, theme = props.theme, underline = props.underline;
  var rootRef = React.useRef(null);
  var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);
  useComponentRef(props, rootRef);
  useFocusRects(rootRef);
  var classNames = getClassNames(styles, {
    className,
    isButton: !href,
    isDisabled: disabled,
    isUnderlined: underline,
    theme
  });
  var _onClick = function(ev) {
    if (disabled) {
      ev.preventDefault();
    } else if (onClick) {
      onClick(ev);
    }
  };
  var rootType = as ? as : href ? "a" : "button";
  var state = {};
  var slots = { root: rootType };
  var slotProps = {
    root: __assign(__assign({}, adjustPropsForRootType(rootType, props)), { "aria-disabled": disabled, className: classNames.root, onClick: _onClick, ref: mergedRootRefs })
  };
  return { state, slots, slotProps };
};
var useComponentRef = function(props, link) {
  React.useImperativeHandle(props.componentRef, function() {
    return {
      focus: function() {
        if (link.current) {
          link.current.focus();
        }
      }
    };
  }, [link]);
};
var adjustPropsForRootType = function(RootType, props) {
  var as = props.as, disabled = props.disabled, target = props.target, href = props.href, theme = props.theme, getStyles8 = props.getStyles, styles = props.styles, componentRef = props.componentRef, underline = props.underline, restProps = __rest(props, ["as", "disabled", "target", "href", "theme", "getStyles", "styles", "componentRef", "underline"]);
  if (typeof RootType === "string") {
    if (RootType === "a") {
      return __assign({ target, href: disabled ? void 0 : href }, restProps);
    }
    if (RootType === "button") {
      return __assign({ type: "button", disabled }, restProps);
    }
    return __assign(__assign({}, restProps), { disabled });
  }
  return __assign({ target, href, disabled }, restProps);
};

// node_modules/@fluentui/react/lib/components/Link/Link.base.js
var LinkBase = React2.forwardRef(function(props, ref) {
  var _a = useLink(props, ref), slots = _a.slots, slotProps = _a.slotProps;
  return React2.createElement(slots.root, __assign({}, slotProps.root));
});
LinkBase.displayName = "LinkBase";

// node_modules/@fluentui/react/lib/components/Link/Link.styles.js
var GlobalClassNames = {
  root: "ms-Link"
};
var getStyles = function(props) {
  var _a, _b, _c, _d, _e, _f;
  var className = props.className, isButton = props.isButton, isDisabled = props.isDisabled, isUnderlined = props.isUnderlined, theme = props.theme;
  var semanticColors = theme.semanticColors;
  var linkColor = semanticColors.link;
  var linkInteractedColor = semanticColors.linkHovered;
  var linkDisabledColor = semanticColors.disabledText;
  var focusBorderColor = semanticColors.focusBorder;
  var classNames = getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [
      classNames.root,
      theme.fonts.medium,
      {
        color: linkColor,
        outline: "none",
        fontSize: "inherit",
        fontWeight: "inherit",
        textDecoration: isUnderlined ? "underline" : "none",
        selectors: (_a = {
          ".ms-Fabric--isFocusVisible &:focus": {
            boxShadow: "0 0 0 1px " + focusBorderColor + " inset",
            outline: "1px auto " + focusBorderColor,
            selectors: (_b = {}, _b[HighContrastSelector] = {
              outline: "1px solid WindowText"
            }, _b)
          }
        }, _a[HighContrastSelector] = {
          borderBottom: "none"
        }, _a)
      },
      isButton && {
        background: "none",
        backgroundColor: "transparent",
        border: "none",
        cursor: "pointer",
        display: "inline",
        margin: 0,
        overflow: "inherit",
        padding: 0,
        textAlign: "left",
        textOverflow: "inherit",
        userSelect: "text",
        borderBottom: "1px solid transparent",
        selectors: (_c = {}, _c[HighContrastSelector] = {
          color: "LinkText",
          forcedColorAdjust: "none"
        }, _c)
      },
      !isButton && {
        selectors: (_d = {}, _d[HighContrastSelector] = {
          MsHighContrastAdjust: "auto",
          forcedColorAdjust: "auto"
        }, _d)
      },
      isDisabled && [
        "is-disabled",
        {
          color: linkDisabledColor,
          cursor: "default"
        },
        {
          selectors: {
            "&:link, &:visited": {
              pointerEvents: "none"
            }
          }
        }
      ],
      !isDisabled && {
        selectors: {
          "&:active, &:hover, &:active:hover": {
            color: linkInteractedColor,
            textDecoration: "underline",
            selectors: (_e = {}, _e[HighContrastSelector] = {
              color: "LinkText"
            }, _e)
          },
          "&:focus": {
            color: linkColor,
            selectors: (_f = {}, _f[HighContrastSelector] = {
              color: "LinkText"
            }, _f)
          }
        }
      },
      classNames.root,
      className
    ]
  };
};

// node_modules/@fluentui/react/lib/components/Link/Link.js
var Link = styled(LinkBase, getStyles, void 0, {
  scope: "Link"
});

// node_modules/@fluentui/react/lib/components/Check/Check.base.js
var React3 = __toESM(require_react());
var getClassNames2 = classNamesFunction();
var CheckBase = React3.forwardRef(function(props, ref) {
  var _a = props.checked, checked = _a === void 0 ? false : _a, className = props.className, theme = props.theme, styles = props.styles, _b = props.useFastIcons, useFastIcons = _b === void 0 ? true : _b;
  var classNames = getClassNames2(styles, { theme, className, checked });
  var IconComponent = useFastIcons ? FontIcon : Icon;
  return React3.createElement(
    "div",
    { className: classNames.root, ref },
    React3.createElement(IconComponent, { iconName: "CircleRing", className: classNames.circle }),
    React3.createElement(IconComponent, { iconName: "StatusCircleCheckmark", className: classNames.check })
  );
});
CheckBase.displayName = "CheckBase";

// node_modules/@fluentui/react/lib/components/Check/Check.styles.js
var CheckGlobalClassNames = {
  root: "ms-Check",
  circle: "ms-Check-circle",
  check: "ms-Check-check",
  checkHost: "ms-Check-checkHost"
};
var getStyles2 = function(props) {
  var _a, _b, _c, _d, _e;
  var _f = props.height, height = _f === void 0 ? props.checkBoxHeight || "18px" : _f, checked = props.checked, className = props.className, theme = props.theme;
  var palette = theme.palette, semanticColors = theme.semanticColors, fonts = theme.fonts;
  var isRTL = getRTL(theme);
  var classNames = getGlobalClassNames(CheckGlobalClassNames, theme);
  var sharedCircleCheck = {
    fontSize: height,
    position: "absolute",
    left: 0,
    top: 0,
    width: height,
    height,
    textAlign: "center",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    verticalAlign: "middle"
  };
  return {
    root: [
      classNames.root,
      fonts.medium,
      {
        lineHeight: "1",
        width: height,
        height,
        verticalAlign: "top",
        position: "relative",
        userSelect: "none",
        selectors: (_a = {
          ":before": {
            content: '""',
            position: "absolute",
            top: "1px",
            right: "1px",
            bottom: "1px",
            left: "1px",
            borderRadius: "50%",
            opacity: 1,
            background: semanticColors.bodyBackground
          }
        }, _a["." + classNames.checkHost + ":hover &, ." + classNames.checkHost + ":focus &, &:hover, &:focus"] = {
          opacity: 1
        }, _a)
      },
      checked && [
        "is-checked",
        {
          selectors: {
            ":before": {
              background: palette.themePrimary,
              opacity: 1,
              selectors: (_b = {}, _b[HighContrastSelector] = {
                background: "Window"
              }, _b)
            }
          }
        }
      ],
      className
    ],
    circle: [
      classNames.circle,
      sharedCircleCheck,
      {
        color: palette.neutralSecondary,
        selectors: (_c = {}, _c[HighContrastSelector] = {
          color: "WindowText"
        }, _c)
      },
      checked && {
        color: palette.white
      }
    ],
    check: [
      classNames.check,
      sharedCircleCheck,
      {
        opacity: 0,
        color: palette.neutralSecondary,
        fontSize: IconFontSizes.medium,
        left: isRTL ? "-0.5px" : ".5px",
        top: "-1px",
        selectors: (_d = {
          ":hover": {
            opacity: 1
          }
        }, _d[HighContrastSelector] = __assign({}, getHighContrastNoAdjustStyle()), _d)
      },
      checked && {
        opacity: 1,
        color: palette.white,
        fontWeight: 900,
        selectors: (_e = {}, _e[HighContrastSelector] = {
          border: "none",
          color: "WindowText"
        }, _e)
      }
    ],
    checkHost: classNames.checkHost
  };
};

// node_modules/@fluentui/react/lib/components/Check/Check.js
var Check = styled(CheckBase, getStyles2, void 0, {
  scope: "Check"
}, true);

// node_modules/@fluentui/react/lib/components/List/List.types.js
var ScrollToMode = {
  auto: 0,
  top: 1,
  bottom: 2,
  center: 3
};

// node_modules/@fluentui/react/lib/components/List/List.js
var React4 = __toESM(require_react());

// node_modules/@fluentui/react/lib/components/List/utils/scroll.js
var getScrollHeight = function(el) {
  if (el === void 0) {
    return 0;
  }
  var scrollHeight = 0;
  if ("scrollHeight" in el) {
    scrollHeight = el.scrollHeight;
  } else if ("document" in el) {
    scrollHeight = el.document.documentElement.scrollHeight;
  }
  return scrollHeight;
};
var getScrollYPosition = function(el) {
  if (el === void 0) {
    return 0;
  }
  var scrollPos = 0;
  if ("scrollTop" in el) {
    scrollPos = el.scrollTop;
  } else if ("scrollY" in el) {
    scrollPos = el.scrollY;
  }
  return Math.ceil(scrollPos);
};
var setScrollYPosition = function(el, pos) {
  if ("scrollTop" in el) {
    el.scrollTop = pos;
  } else if ("scrollY" in el) {
    el.scrollTo(el.scrollX, pos);
  }
};

// node_modules/@fluentui/react/lib/components/List/List.js
var RESIZE_DELAY = 16;
var MIN_SCROLL_UPDATE_DELAY = 100;
var MAX_SCROLL_UPDATE_DELAY = 500;
var IDLE_DEBOUNCE_DELAY = 200;
var DONE_SCROLLING_WAIT = 500;
var DEFAULT_ITEMS_PER_PAGE = 10;
var DEFAULT_PAGE_HEIGHT = 30;
var DEFAULT_RENDERED_WINDOWS_BEHIND = 2;
var DEFAULT_RENDERED_WINDOWS_AHEAD = 2;
var PAGE_KEY_PREFIX = "page-";
var SPACER_KEY_PREFIX = "spacer-";
var EMPTY_RECT = {
  top: -1,
  bottom: -1,
  left: -1,
  right: -1,
  width: 0,
  height: 0
};
var _measurePageRect = function(element) {
  return element.getBoundingClientRect();
};
var _measureSurfaceRect = _measurePageRect;
var _measureScrollRect = _measurePageRect;
var List = function(_super) {
  __extends(List2, _super);
  function List2(props) {
    var _this = _super.call(this, props) || this;
    _this._root = React4.createRef();
    _this._surface = React4.createRef();
    _this._pageRefs = {};
    _this._getDerivedStateFromProps = function(nextProps, previousState) {
      if (nextProps.items !== _this.props.items || nextProps.renderCount !== _this.props.renderCount || nextProps.startIndex !== _this.props.startIndex || nextProps.version !== _this.props.version) {
        _this._resetRequiredWindows();
        _this._requiredRect = null;
        _this._measureVersion++;
        _this._invalidatePageCache();
        return _this._updatePages(nextProps, previousState);
      }
      return previousState;
    };
    _this._onRenderRoot = function(props2) {
      var rootRef = props2.rootRef, surfaceElement = props2.surfaceElement, divProps = props2.divProps;
      return React4.createElement("div", __assign({ ref: rootRef }, divProps), surfaceElement);
    };
    _this._onRenderSurface = function(props2) {
      var surfaceRef = props2.surfaceRef, pageElements = props2.pageElements, divProps = props2.divProps;
      return React4.createElement("div", __assign({ ref: surfaceRef }, divProps), pageElements);
    };
    _this._onRenderPage = function(pageProps, defaultRender) {
      var _a = _this.props, onRenderCell = _a.onRenderCell, role = _a.role;
      var _b = pageProps.page, _c = _b.items, items = _c === void 0 ? [] : _c, startIndex = _b.startIndex, divProps = __rest(pageProps, ["page"]);
      var cellRole = role === void 0 ? "listitem" : "presentation";
      var cells = [];
      for (var i = 0; i < items.length; i++) {
        var index = startIndex + i;
        var item = items[i];
        var itemKey = _this.props.getKey ? _this.props.getKey(item, index) : item && item.key;
        if (itemKey === null || itemKey === void 0) {
          itemKey = index;
        }
        cells.push(React4.createElement("div", { role: cellRole, className: "ms-List-cell", key: itemKey, "data-list-index": index, "data-automationid": "ListCell" }, onRenderCell && onRenderCell(item, index, !_this.props.ignoreScrollingState ? _this.state.isScrolling : void 0)));
      }
      return React4.createElement("div", __assign({}, divProps), cells);
    };
    initializeComponentRef(_this);
    _this.state = {
      pages: [],
      isScrolling: false,
      getDerivedStateFromProps: _this._getDerivedStateFromProps
    };
    _this._async = new Async(_this);
    _this._events = new EventGroup(_this);
    _this._estimatedPageHeight = 0;
    _this._totalEstimates = 0;
    _this._requiredWindowsAhead = 0;
    _this._requiredWindowsBehind = 0;
    _this._measureVersion = 0;
    _this._onAsyncScroll = _this._async.debounce(_this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {
      leading: false,
      maxWait: MAX_SCROLL_UPDATE_DELAY
    });
    _this._onAsyncIdle = _this._async.debounce(_this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {
      leading: false
    });
    _this._onAsyncResize = _this._async.debounce(_this._onAsyncResize, RESIZE_DELAY, {
      leading: false
    });
    _this._onScrollingDone = _this._async.debounce(_this._onScrollingDone, DONE_SCROLLING_WAIT, {
      leading: false
    });
    _this._cachedPageHeights = {};
    _this._estimatedPageHeight = 0;
    _this._focusedIndex = -1;
    _this._pageCache = {};
    return _this;
  }
  List2.getDerivedStateFromProps = function(nextProps, previousState) {
    return previousState.getDerivedStateFromProps(nextProps, previousState);
  };
  Object.defineProperty(List2.prototype, "pageRefs", {
    get: function() {
      return this._pageRefs;
    },
    enumerable: false,
    configurable: true
  });
  List2.prototype.scrollToIndex = function(index, measureItem, scrollToMode) {
    if (scrollToMode === void 0) {
      scrollToMode = ScrollToMode.auto;
    }
    var startIndex = this.props.startIndex;
    var renderCount = this._getRenderCount();
    var endIndex = startIndex + renderCount;
    var allowedRect = this._allowedRect;
    var scrollTop = 0;
    var itemsPerPage = 1;
    for (var itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {
      var pageSpecification = this._getPageSpecification(itemIndex, allowedRect);
      var pageHeight = pageSpecification.height;
      itemsPerPage = pageSpecification.itemCount;
      var requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;
      if (requestedIndexIsInPage) {
        if (measureItem && this._scrollElement) {
          var scrollRect = _measureScrollRect(this._scrollElement);
          var scrollPosition = getScrollYPosition(this._scrollElement);
          var scrollWindow = {
            top: scrollPosition,
            bottom: scrollPosition + scrollRect.height
          };
          var itemPositionWithinPage = index - itemIndex;
          for (var itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {
            scrollTop += measureItem(itemIndex + itemIndexInPage);
          }
          var scrollBottom = scrollTop + measureItem(index);
          switch (scrollToMode) {
            case ScrollToMode.top:
              setScrollYPosition(this._scrollElement, scrollTop);
              return;
            case ScrollToMode.bottom:
              setScrollYPosition(this._scrollElement, scrollBottom - scrollRect.height);
              return;
            case ScrollToMode.center:
              setScrollYPosition(this._scrollElement, (scrollTop + scrollBottom - scrollRect.height) / 2);
              return;
            case ScrollToMode.auto:
            default:
              break;
          }
          var itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;
          if (itemIsFullyVisible) {
            return;
          }
          var itemIsPartiallyAbove = scrollTop < scrollWindow.top;
          var itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;
          if (itemIsPartiallyAbove) {
          } else if (itemIsPartiallyBelow) {
            scrollTop = scrollBottom - scrollRect.height;
          }
        }
        if (this._scrollElement) {
          setScrollYPosition(this._scrollElement, scrollTop);
        }
        return;
      }
      scrollTop += pageHeight;
    }
  };
  List2.prototype.getStartItemIndexInView = function(measureItem) {
    var pages = this.state.pages || [];
    for (var _i = 0, pages_1 = pages; _i < pages_1.length; _i++) {
      var page = pages_1[_i];
      var isPageVisible = !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;
      if (isPageVisible) {
        if (!measureItem) {
          var rowHeight = Math.floor(page.height / page.itemCount);
          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);
        } else {
          var totalRowHeight = 0;
          for (var itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {
            var rowHeight = measureItem(itemIndex);
            if (page.top + totalRowHeight <= this._scrollTop && this._scrollTop < page.top + totalRowHeight + rowHeight) {
              return itemIndex;
            } else {
              totalRowHeight += rowHeight;
            }
          }
        }
      }
    }
    return 0;
  };
  List2.prototype.componentDidMount = function() {
    this._scrollElement = findScrollableParent(this._root.current);
    this._scrollTop = 0;
    this.setState(this._updatePages(this.props, this.state));
    this._measureVersion++;
    this._events.on(window, "resize", this._onAsyncResize);
    if (this._root.current) {
      this._events.on(this._root.current, "focus", this._onFocus, true);
    }
    if (this._scrollElement) {
      this._events.on(this._scrollElement, "scroll", this._onScroll);
      this._events.on(this._scrollElement, "scroll", this._onAsyncScroll);
    }
  };
  List2.prototype.componentDidUpdate = function(previousProps, previousState) {
    var finalProps = this.props;
    var finalState = this.state;
    if (this.state.pagesVersion !== previousState.pagesVersion) {
      if (!finalProps.getPageHeight) {
        var heightsChanged = this._updatePageMeasurements(finalState.pages);
        if (heightsChanged) {
          this._materializedRect = null;
          if (!this._hasCompletedFirstRender) {
            this._hasCompletedFirstRender = true;
            this.setState(this._updatePages(finalProps, finalState));
          } else {
            this._onAsyncScroll();
          }
        } else {
          this._onAsyncIdle();
        }
      } else {
        this._onAsyncIdle();
      }
      if (finalProps.onPagesUpdated) {
        finalProps.onPagesUpdated(finalState.pages);
      }
    }
  };
  List2.prototype.componentWillUnmount = function() {
    this._async.dispose();
    this._events.dispose();
    delete this._scrollElement;
  };
  List2.prototype.shouldComponentUpdate = function(newProps, newState) {
    var oldPages = this.state.pages;
    var newPages = newState.pages;
    var shouldComponentUpdate = false;
    if (!newState.isScrolling && this.state.isScrolling) {
      return true;
    }
    if (newProps.version !== this.props.version) {
      return true;
    }
    if (newProps.className !== this.props.className) {
      return true;
    }
    if (newProps.items === this.props.items && oldPages.length === newPages.length) {
      for (var i = 0; i < oldPages.length; i++) {
        var oldPage = oldPages[i];
        var newPage = newPages[i];
        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {
          shouldComponentUpdate = true;
          break;
        }
      }
    } else {
      shouldComponentUpdate = true;
    }
    return shouldComponentUpdate;
  };
  List2.prototype.forceUpdate = function() {
    this._invalidatePageCache();
    this._updateRenderRects(this.props, this.state, true);
    this.setState(this._updatePages(this.props, this.state));
    this._measureVersion++;
    _super.prototype.forceUpdate.call(this);
  };
  List2.prototype.getTotalListHeight = function() {
    return this._surfaceRect.height;
  };
  List2.prototype.render = function() {
    var _a = this.props, className = _a.className, _b = _a.role, role = _b === void 0 ? "list" : _b, onRenderSurface = _a.onRenderSurface, onRenderRoot = _a.onRenderRoot;
    var _c = this.state.pages, pages = _c === void 0 ? [] : _c;
    var pageElements = [];
    var divProps = getNativeProps(this.props, divProperties);
    for (var _i = 0, pages_2 = pages; _i < pages_2.length; _i++) {
      var page = pages_2[_i];
      pageElements.push(this._renderPage(page));
    }
    var finalOnRenderSurface = onRenderSurface ? composeRenderFunction(onRenderSurface, this._onRenderSurface) : this._onRenderSurface;
    var finalOnRenderRoot = onRenderRoot ? composeRenderFunction(onRenderRoot, this._onRenderRoot) : this._onRenderRoot;
    return finalOnRenderRoot({
      rootRef: this._root,
      pages,
      surfaceElement: finalOnRenderSurface({
        surfaceRef: this._surface,
        pages,
        pageElements,
        divProps: {
          role: "presentation",
          className: "ms-List-surface"
        }
      }),
      divProps: __assign(__assign({}, divProps), { className: css("ms-List", className), role: pageElements.length > 0 ? role : void 0, "aria-label": pageElements.length > 0 ? divProps["aria-label"] : void 0 })
    });
  };
  List2.prototype._shouldVirtualize = function(props) {
    if (props === void 0) {
      props = this.props;
    }
    var onShouldVirtualize = props.onShouldVirtualize;
    return !onShouldVirtualize || onShouldVirtualize(props);
  };
  List2.prototype._invalidatePageCache = function() {
    this._pageCache = {};
  };
  List2.prototype._renderPage = function(page) {
    var _this = this;
    var usePageCache = this.props.usePageCache;
    var cachedPage;
    if (usePageCache) {
      cachedPage = this._pageCache[page.key];
      if (cachedPage && cachedPage.pageElement) {
        return cachedPage.pageElement;
      }
    }
    var pageStyle = this._getPageStyle(page);
    var _a = this.props.onRenderPage, onRenderPage = _a === void 0 ? this._onRenderPage : _a;
    var pageElement = onRenderPage({
      page,
      className: "ms-List-page",
      key: page.key,
      ref: function(newRef) {
        _this._pageRefs[page.key] = newRef;
      },
      style: pageStyle,
      role: "presentation"
    }, this._onRenderPage);
    if (usePageCache && page.startIndex === 0) {
      this._pageCache[page.key] = {
        page,
        pageElement
      };
    }
    return pageElement;
  };
  List2.prototype._getPageStyle = function(page) {
    var getPageStyle = this.props.getPageStyle;
    return __assign(__assign({}, getPageStyle ? getPageStyle(page) : {}), !page.items ? {
      height: page.height
    } : {});
  };
  List2.prototype._onFocus = function(ev) {
    var target = ev.target;
    while (target !== this._surface.current) {
      var indexString = target.getAttribute("data-list-index");
      if (indexString) {
        this._focusedIndex = Number(indexString);
        break;
      }
      target = getParent(target);
    }
  };
  List2.prototype._onScroll = function() {
    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {
      this.setState({ isScrolling: true });
    }
    this._resetRequiredWindows();
    this._onScrollingDone();
  };
  List2.prototype._resetRequiredWindows = function() {
    this._requiredWindowsAhead = 0;
    this._requiredWindowsBehind = 0;
  };
  List2.prototype._onAsyncScroll = function() {
    this._updateRenderRects(this.props, this.state);
    if (!this._materializedRect || !_isContainedWithin(this._requiredRect, this._materializedRect)) {
      this.setState(this._updatePages(this.props, this.state));
    } else {
    }
  };
  List2.prototype._onAsyncIdle = function() {
    var _a = this.props, renderedWindowsAhead = _a.renderedWindowsAhead, renderedWindowsBehind = _a.renderedWindowsBehind;
    var _b = this, requiredWindowsAhead = _b._requiredWindowsAhead, requiredWindowsBehind = _b._requiredWindowsBehind;
    var windowsAhead = Math.min(renderedWindowsAhead, requiredWindowsAhead + 1);
    var windowsBehind = Math.min(renderedWindowsBehind, requiredWindowsBehind + 1);
    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {
      this._requiredWindowsAhead = windowsAhead;
      this._requiredWindowsBehind = windowsBehind;
      this._updateRenderRects(this.props, this.state);
      this.setState(this._updatePages(this.props, this.state));
    }
    if (renderedWindowsAhead > windowsAhead || renderedWindowsBehind > windowsBehind) {
      this._onAsyncIdle();
    }
  };
  List2.prototype._onScrollingDone = function() {
    if (!this.props.ignoreScrollingState) {
      this.setState({ isScrolling: false });
    }
  };
  List2.prototype._onAsyncResize = function() {
    this.forceUpdate();
  };
  List2.prototype._updatePages = function(nextProps, previousState) {
    if (!this._requiredRect) {
      this._updateRenderRects(nextProps, previousState);
    }
    var newListState = this._buildPages(nextProps, previousState);
    var oldListPages = previousState.pages;
    this._notifyPageChanges(oldListPages, newListState.pages, this.props);
    return __assign(__assign(__assign({}, previousState), newListState), { pagesVersion: {} });
  };
  List2.prototype._notifyPageChanges = function(oldPages, newPages, props) {
    var onPageAdded = props.onPageAdded, onPageRemoved = props.onPageRemoved;
    if (onPageAdded || onPageRemoved) {
      var renderedIndexes = {};
      for (var _i = 0, oldPages_1 = oldPages; _i < oldPages_1.length; _i++) {
        var page = oldPages_1[_i];
        if (page.items) {
          renderedIndexes[page.startIndex] = page;
        }
      }
      for (var _a = 0, newPages_1 = newPages; _a < newPages_1.length; _a++) {
        var page = newPages_1[_a];
        if (page.items) {
          if (!renderedIndexes[page.startIndex]) {
            this._onPageAdded(page);
          } else {
            delete renderedIndexes[page.startIndex];
          }
        }
      }
      for (var index in renderedIndexes) {
        if (renderedIndexes.hasOwnProperty(index)) {
          this._onPageRemoved(renderedIndexes[index]);
        }
      }
    }
  };
  List2.prototype._updatePageMeasurements = function(pages) {
    var heightChanged = false;
    if (!this._shouldVirtualize()) {
      return heightChanged;
    }
    for (var i = 0; i < pages.length; i++) {
      var page = pages[i];
      if (page.items) {
        heightChanged = this._measurePage(page) || heightChanged;
      }
    }
    return heightChanged;
  };
  List2.prototype._measurePage = function(page) {
    var hasChangedHeight = false;
    var pageElement = this._pageRefs[page.key];
    var cachedHeight = this._cachedPageHeights[page.startIndex];
    if (pageElement && this._shouldVirtualize() && (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)) {
      var newClientRect = {
        width: pageElement.clientWidth,
        height: pageElement.clientHeight
      };
      if (newClientRect.height || newClientRect.width) {
        hasChangedHeight = page.height !== newClientRect.height;
        page.height = newClientRect.height;
        this._cachedPageHeights[page.startIndex] = {
          height: newClientRect.height,
          measureVersion: this._measureVersion
        };
        this._estimatedPageHeight = Math.round((this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1));
        this._totalEstimates++;
      }
    }
    return hasChangedHeight;
  };
  List2.prototype._onPageAdded = function(page) {
    var onPageAdded = this.props.onPageAdded;
    if (onPageAdded) {
      onPageAdded(page);
    }
  };
  List2.prototype._onPageRemoved = function(page) {
    var onPageRemoved = this.props.onPageRemoved;
    if (onPageRemoved) {
      onPageRemoved(page);
    }
  };
  List2.prototype._buildPages = function(props, state) {
    var renderCount = props.renderCount;
    var items = props.items, startIndex = props.startIndex, getPageHeight = props.getPageHeight;
    renderCount = this._getRenderCount(props);
    var materializedRect = __assign({}, EMPTY_RECT);
    var pages = [];
    var itemsPerPage = 1;
    var pageTop = 0;
    var currentSpacer = null;
    var focusedIndex = this._focusedIndex;
    var endIndex = startIndex + renderCount;
    var shouldVirtualize = this._shouldVirtualize(props);
    var isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;
    var allowedRect = this._allowedRect;
    var _loop_1 = function(itemIndex2) {
      var pageSpecification = this_1._getPageSpecification(itemIndex2, allowedRect);
      var pageHeight = pageSpecification.height;
      var pageData = pageSpecification.data;
      var key = pageSpecification.key;
      itemsPerPage = pageSpecification.itemCount;
      var pageBottom = pageTop + pageHeight - 1;
      var isPageRendered = findIndex(state.pages, function(page) {
        return !!page.items && page.startIndex === itemIndex2;
      }) > -1;
      var isPageInAllowedRange = !allowedRect || pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom;
      var isPageInRequiredRange = !this_1._requiredRect || pageBottom >= this_1._requiredRect.top && pageTop <= this_1._requiredRect.bottom;
      var isPageVisible = !isFirstRender && (isPageInRequiredRange || isPageInAllowedRange && isPageRendered) || !shouldVirtualize;
      var isPageFocused = focusedIndex >= itemIndex2 && focusedIndex < itemIndex2 + itemsPerPage;
      var isFirstPage = itemIndex2 === startIndex;
      if (isPageVisible || isPageFocused || isFirstPage) {
        if (currentSpacer) {
          pages.push(currentSpacer);
          currentSpacer = null;
        }
        var itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex2);
        var newPage = this_1._createPage(key, items.slice(itemIndex2, itemIndex2 + itemsInPage), itemIndex2, void 0, void 0, pageData);
        newPage.top = pageTop;
        newPage.height = pageHeight;
        if (this_1._visibleRect && this_1._visibleRect.bottom) {
          newPage.isVisible = pageBottom >= this_1._visibleRect.top && pageTop <= this_1._visibleRect.bottom;
        }
        pages.push(newPage);
        if (isPageInRequiredRange && this_1._allowedRect) {
          _mergeRect(materializedRect, {
            top: pageTop,
            bottom: pageBottom,
            height: pageHeight,
            left: allowedRect.left,
            right: allowedRect.right,
            width: allowedRect.width
          });
        }
      } else {
        if (!currentSpacer) {
          currentSpacer = this_1._createPage(SPACER_KEY_PREFIX + itemIndex2, void 0, itemIndex2, 0, void 0, pageData, true);
        }
        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;
        currentSpacer.itemCount += itemsPerPage;
      }
      pageTop += pageBottom - pageTop + 1;
      if (isFirstRender && shouldVirtualize) {
        return "break";
      }
    };
    var this_1 = this;
    for (var itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {
      var state_1 = _loop_1(itemIndex);
      if (state_1 === "break")
        break;
    }
    if (currentSpacer) {
      currentSpacer.key = SPACER_KEY_PREFIX + "end";
      pages.push(currentSpacer);
    }
    this._materializedRect = materializedRect;
    return __assign(__assign({}, state), { pages, measureVersion: this._measureVersion });
  };
  List2.prototype._getPageSpecification = function(itemIndex, visibleRect) {
    var getPageSpecification = this.props.getPageSpecification;
    if (getPageSpecification) {
      var pageData = getPageSpecification(itemIndex, visibleRect);
      var _a = pageData.itemCount, itemCount = _a === void 0 ? this._getItemCountForPage(itemIndex, visibleRect) : _a;
      var _b = pageData.height, height = _b === void 0 ? this._getPageHeight(itemIndex, visibleRect, itemCount) : _b;
      return {
        itemCount,
        height,
        data: pageData.data,
        key: pageData.key
      };
    } else {
      var itemCount = this._getItemCountForPage(itemIndex, visibleRect);
      return {
        itemCount,
        height: this._getPageHeight(itemIndex, visibleRect, itemCount)
      };
    }
  };
  List2.prototype._getPageHeight = function(itemIndex, visibleRect, itemsPerPage) {
    if (this.props.getPageHeight) {
      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);
    } else {
      var cachedHeight = this._cachedPageHeights[itemIndex];
      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;
    }
  };
  List2.prototype._getItemCountForPage = function(itemIndex, visibileRect) {
    var itemsPerPage = this.props.getItemCountForPage ? this.props.getItemCountForPage(itemIndex, visibileRect) : DEFAULT_ITEMS_PER_PAGE;
    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;
  };
  List2.prototype._createPage = function(pageKey, items, startIndex, count, style, data, isSpacer) {
    if (startIndex === void 0) {
      startIndex = -1;
    }
    if (count === void 0) {
      count = items ? items.length : 0;
    }
    if (style === void 0) {
      style = {};
    }
    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;
    var cachedPage = this._pageCache[pageKey];
    if (cachedPage && cachedPage.page) {
      return cachedPage.page;
    }
    return {
      key: pageKey,
      startIndex,
      itemCount: count,
      items,
      style,
      top: 0,
      height: 0,
      data,
      isSpacer: isSpacer || false
    };
  };
  List2.prototype._getRenderCount = function(props) {
    var _a = props || this.props, items = _a.items, startIndex = _a.startIndex, renderCount = _a.renderCount;
    return renderCount === void 0 ? items ? items.length - startIndex : 0 : renderCount;
  };
  List2.prototype._updateRenderRects = function(props, state, forceUpdate) {
    var renderedWindowsAhead = props.renderedWindowsAhead, renderedWindowsBehind = props.renderedWindowsBehind;
    var pages = state.pages;
    if (!this._shouldVirtualize(props)) {
      return;
    }
    var surfaceRect = this._surfaceRect || __assign({}, EMPTY_RECT);
    var scrollHeight = getScrollHeight(this._scrollElement);
    var scrollTop = getScrollYPosition(this._scrollElement);
    if (this._surface.current && (forceUpdate || !pages || !this._surfaceRect || !scrollHeight || scrollHeight !== this._scrollHeight || Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)) {
      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);
      this._scrollTop = scrollTop;
    }
    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {
      this._measureVersion++;
    }
    this._scrollHeight = scrollHeight || 0;
    var visibleTop = Math.max(0, -surfaceRect.top);
    var win = getWindow(this._root.current);
    var visibleRect = {
      top: visibleTop,
      left: surfaceRect.left,
      bottom: visibleTop + win.innerHeight,
      right: surfaceRect.right,
      width: surfaceRect.width,
      height: win.innerHeight
    };
    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);
    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind, renderedWindowsAhead);
    this._visibleRect = visibleRect;
  };
  List2.defaultProps = {
    startIndex: 0,
    onRenderCell: function(item, index, containsFocus) {
      return React4.createElement(React4.Fragment, null, item && item.name || "");
    },
    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,
    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND
  };
  return List2;
}(React4.Component);
function _expandRect(rect, pagesBefore, pagesAfter) {
  var top = rect.top - pagesBefore * rect.height;
  var height = rect.height + (pagesBefore + pagesAfter) * rect.height;
  return {
    top,
    bottom: top + height,
    height,
    left: rect.left,
    right: rect.right,
    width: rect.width
  };
}
function _isContainedWithin(innerRect, outerRect) {
  return innerRect.top >= outerRect.top && innerRect.left >= outerRect.left && innerRect.bottom <= outerRect.bottom && innerRect.right <= outerRect.right;
}
function _mergeRect(targetRect, newRect) {
  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;
  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;
  targetRect.bottom = newRect.bottom > targetRect.bottom || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;
  targetRect.right = newRect.right > targetRect.right || targetRect.right === -1 ? newRect.right : targetRect.right;
  targetRect.width = targetRect.right - targetRect.left + 1;
  targetRect.height = targetRect.bottom - targetRect.top + 1;
  return targetRect;
}

// node_modules/@fluentui/react/lib/utilities/selection/SelectionZone.js
var React5 = __toESM(require_react());
var SELECTION_DISABLED_ATTRIBUTE_NAME = "data-selection-disabled";
var SELECTION_INDEX_ATTRIBUTE_NAME = "data-selection-index";
var SELECTION_TOGGLE_ATTRIBUTE_NAME = "data-selection-toggle";
var SELECTION_INVOKE_ATTRIBUTE_NAME = "data-selection-invoke";
var SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = "data-selection-touch-invoke";
var SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = "data-selection-all-toggle";
var SELECTION_SELECT_ATTRIBUTE_NAME = "data-selection-select";
var SelectionZone = function(_super) {
  __extends(SelectionZone2, _super);
  function SelectionZone2(props) {
    var _this = _super.call(this, props) || this;
    _this._root = React5.createRef();
    _this.ignoreNextFocus = function() {
      _this._handleNextFocus(false);
    };
    _this._onSelectionChange = function() {
      var selection2 = _this.props.selection;
      var isModal2 = selection2.isModal && selection2.isModal();
      _this.setState({
        isModal: isModal2
      });
    };
    _this._onMouseDownCapture = function(ev) {
      var target = ev.target;
      if (document.activeElement !== target && !elementContains(document.activeElement, target)) {
        _this.ignoreNextFocus();
        return;
      }
      if (!elementContains(target, _this._root.current)) {
        return;
      }
      while (target !== _this._root.current) {
        if (_this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {
          _this.ignoreNextFocus();
          break;
        }
        target = getParent(target);
      }
    };
    _this._onFocus = function(ev) {
      var target = ev.target;
      var selection2 = _this.props.selection;
      var isToggleModifierPressed = _this._isCtrlPressed || _this._isMetaPressed;
      var selectionMode = _this._getSelectionMode();
      if (_this._shouldHandleFocus && selectionMode !== SelectionMode.none) {
        var isToggle = _this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);
        var itemRoot = _this._findItemRoot(target);
        if (!isToggle && itemRoot) {
          var index = _this._getItemIndex(itemRoot);
          if (isToggleModifierPressed) {
            selection2.setIndexSelected(index, selection2.isIndexSelected(index), true);
            if (_this.props.enterModalOnTouch && _this._isTouch && selection2.setModal) {
              selection2.setModal(true);
              _this._setIsTouch(false);
            }
          } else {
            if (_this.props.isSelectedOnFocus) {
              _this._onItemSurfaceClick(ev, index);
            }
          }
        }
      }
      _this._handleNextFocus(false);
    };
    _this._onMouseDown = function(ev) {
      _this._updateModifiers(ev);
      var target = ev.target;
      var itemRoot = _this._findItemRoot(target);
      if (_this._isSelectionDisabled(target)) {
        return;
      }
      while (target !== _this._root.current) {
        if (_this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {
          break;
        } else if (itemRoot) {
          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {
            break;
          } else if (_this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {
            break;
          } else if ((target === itemRoot || _this._shouldAutoSelect(target)) && !_this._isShiftPressed && !_this._isCtrlPressed && !_this._isMetaPressed && !_this.props.toggleWithoutModifierPressed) {
            _this._onInvokeMouseDown(ev, _this._getItemIndex(itemRoot));
            break;
          } else if (_this.props.disableAutoSelectOnInputElements && (target.tagName === "A" || target.tagName === "BUTTON" || target.tagName === "INPUT")) {
            return;
          }
        }
        target = getParent(target);
      }
    };
    _this._onTouchStartCapture = function(ev) {
      _this._setIsTouch(true);
    };
    _this._onClick = function(ev) {
      var _a = _this.props.enableTouchInvocationTarget, enableTouchInvocationTarget = _a === void 0 ? false : _a;
      _this._updateModifiers(ev);
      var target = ev.target;
      var itemRoot = _this._findItemRoot(target);
      var isSelectionDisabled = _this._isSelectionDisabled(target);
      while (target !== _this._root.current) {
        if (_this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {
          if (!isSelectionDisabled) {
            _this._onToggleAllClick(ev);
          }
          break;
        } else if (itemRoot) {
          var index = _this._getItemIndex(itemRoot);
          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {
            if (!isSelectionDisabled) {
              if (_this._isShiftPressed) {
                _this._onItemSurfaceClick(ev, index);
              } else {
                _this._onToggleClick(ev, index);
              }
            }
            break;
          } else if (_this._isTouch && enableTouchInvocationTarget && _this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME) || _this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {
            _this._onInvokeClick(ev, index);
            break;
          } else if (target === itemRoot) {
            if (!isSelectionDisabled) {
              _this._onItemSurfaceClick(ev, index);
            }
            break;
          } else if (target.tagName === "A" || target.tagName === "BUTTON" || target.tagName === "INPUT") {
            return;
          }
        }
        target = getParent(target);
      }
    };
    _this._onContextMenu = function(ev) {
      var target = ev.target;
      var _a = _this.props, onItemContextMenu = _a.onItemContextMenu, selection2 = _a.selection;
      if (onItemContextMenu) {
        var itemRoot = _this._findItemRoot(target);
        if (itemRoot) {
          var index = _this._getItemIndex(itemRoot);
          _this._onInvokeMouseDown(ev, index);
          var skipPreventDefault = onItemContextMenu(selection2.getItems()[index], index, ev.nativeEvent);
          if (!skipPreventDefault) {
            ev.preventDefault();
          }
        }
      }
    };
    _this._onDoubleClick = function(ev) {
      var target = ev.target;
      var onItemInvoked = _this.props.onItemInvoked;
      var itemRoot = _this._findItemRoot(target);
      if (itemRoot && onItemInvoked && !_this._isInputElement(target)) {
        var index = _this._getItemIndex(itemRoot);
        while (target !== _this._root.current) {
          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) || _this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {
            break;
          } else if (target === itemRoot) {
            _this._onInvokeClick(ev, index);
            break;
          }
          target = getParent(target);
        }
        target = getParent(target);
      }
    };
    _this._onKeyDownCapture = function(ev) {
      _this._updateModifiers(ev);
      _this._handleNextFocus(true);
    };
    _this._onKeyDown = function(ev) {
      _this._updateModifiers(ev);
      var target = ev.target;
      var isSelectionDisabled = _this._isSelectionDisabled(target);
      var _a = _this.props, selection2 = _a.selection, selectionClearedOnEscapePress = _a.selectionClearedOnEscapePress;
      var isSelectAllKey = ev.which === KeyCodes.a && (_this._isCtrlPressed || _this._isMetaPressed);
      var isClearSelectionKey = ev.which === KeyCodes.escape;
      if (_this._isInputElement(target)) {
        return;
      }
      var selectionMode = _this._getSelectionMode();
      if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection2.isAllSelected()) {
        if (!isSelectionDisabled) {
          selection2.setAllSelected(true);
        }
        ev.stopPropagation();
        ev.preventDefault();
        return;
      }
      if (selectionClearedOnEscapePress && isClearSelectionKey && selection2.getSelectedCount() > 0) {
        if (!isSelectionDisabled) {
          selection2.setAllSelected(false);
        }
        ev.stopPropagation();
        ev.preventDefault();
        return;
      }
      var itemRoot = _this._findItemRoot(target);
      if (itemRoot) {
        var index = _this._getItemIndex(itemRoot);
        while (target !== _this._root.current) {
          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {
            break;
          } else if (_this._shouldAutoSelect(target)) {
            if (!isSelectionDisabled) {
              _this._onInvokeMouseDown(ev, index);
            }
            break;
          } else if ((ev.which === KeyCodes.enter || ev.which === KeyCodes.space) && (target.tagName === "BUTTON" || target.tagName === "A" || target.tagName === "INPUT")) {
            return false;
          } else if (target === itemRoot) {
            if (ev.which === KeyCodes.enter) {
              _this._onInvokeClick(ev, index);
              ev.preventDefault();
              return;
            } else if (ev.which === KeyCodes.space) {
              if (!isSelectionDisabled) {
                _this._onToggleClick(ev, index);
              }
              ev.preventDefault();
              return;
            }
            break;
          }
          target = getParent(target);
        }
      }
    };
    _this._events = new EventGroup(_this);
    _this._async = new Async(_this);
    initializeComponentRef(_this);
    var selection = _this.props.selection;
    var isModal = selection.isModal && selection.isModal();
    _this.state = {
      isModal
    };
    return _this;
  }
  SelectionZone2.getDerivedStateFromProps = function(nextProps, prevState) {
    var isModal = nextProps.selection.isModal && nextProps.selection.isModal();
    return __assign(__assign({}, prevState), { isModal });
  };
  SelectionZone2.prototype.componentDidMount = function() {
    var win = getWindow(this._root.current);
    this._events.on(win, "keydown, keyup", this._updateModifiers, true);
    this._events.on(document, "click", this._findScrollParentAndTryClearOnEmptyClick);
    this._events.on(document.body, "touchstart", this._onTouchStartCapture, true);
    this._events.on(document.body, "touchend", this._onTouchStartCapture, true);
    this._events.on(this.props.selection, "change", this._onSelectionChange);
  };
  SelectionZone2.prototype.render = function() {
    var isModal = this.state.isModal;
    return React5.createElement(
      "div",
      { className: css("ms-SelectionZone", this.props.className, {
        "ms-SelectionZone--modal": !!isModal
      }), ref: this._root, onKeyDown: this._onKeyDown, onMouseDown: this._onMouseDown, onKeyDownCapture: this._onKeyDownCapture, onClick: this._onClick, role: "presentation", onDoubleClick: this._onDoubleClick, onContextMenu: this._onContextMenu, onMouseDownCapture: this._onMouseDownCapture, onFocusCapture: this._onFocus, "data-selection-is-modal": isModal ? true : void 0 },
      this.props.children,
      React5.createElement(FocusRects, null)
    );
  };
  SelectionZone2.prototype.componentDidUpdate = function(previousProps) {
    var selection = this.props.selection;
    if (selection !== previousProps.selection) {
      this._events.off(previousProps.selection);
      this._events.on(selection, "change", this._onSelectionChange);
    }
  };
  SelectionZone2.prototype.componentWillUnmount = function() {
    this._events.dispose();
    this._async.dispose();
  };
  SelectionZone2.prototype._isSelectionDisabled = function(target) {
    if (this._getSelectionMode() === SelectionMode.none) {
      return true;
    }
    while (target !== this._root.current) {
      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {
        return true;
      }
      target = getParent(target);
    }
    return false;
  };
  SelectionZone2.prototype._onToggleAllClick = function(ev) {
    var selection = this.props.selection;
    var selectionMode = this._getSelectionMode();
    if (selectionMode === SelectionMode.multiple) {
      selection.toggleAllSelected();
      ev.stopPropagation();
      ev.preventDefault();
    }
  };
  SelectionZone2.prototype._onToggleClick = function(ev, index) {
    var selection = this.props.selection;
    var selectionMode = this._getSelectionMode();
    selection.setChangeEvents(false);
    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {
      selection.setModal(true);
      this._setIsTouch(false);
    }
    if (selectionMode === SelectionMode.multiple) {
      selection.toggleIndexSelected(index);
    } else if (selectionMode === SelectionMode.single) {
      var isSelected = selection.isIndexSelected(index);
      var isModal = selection.isModal && selection.isModal();
      selection.setAllSelected(false);
      selection.setIndexSelected(index, !isSelected, true);
      if (isModal && selection.setModal) {
        selection.setModal(true);
      }
    } else {
      selection.setChangeEvents(true);
      return;
    }
    selection.setChangeEvents(true);
    ev.stopPropagation();
  };
  SelectionZone2.prototype._onInvokeClick = function(ev, index) {
    var _a = this.props, selection = _a.selection, onItemInvoked = _a.onItemInvoked;
    if (onItemInvoked) {
      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);
      ev.preventDefault();
      ev.stopPropagation();
    }
  };
  SelectionZone2.prototype._onItemSurfaceClick = function(ev, index) {
    var _a = this.props, selection = _a.selection, toggleWithoutModifierPressed = _a.toggleWithoutModifierPressed;
    var isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;
    var selectionMode = this._getSelectionMode();
    if (selectionMode === SelectionMode.multiple) {
      if (this._isShiftPressed && !this._isTabPressed) {
        selection.selectToIndex(index, !isToggleModifierPressed);
      } else if (isToggleModifierPressed || toggleWithoutModifierPressed) {
        selection.toggleIndexSelected(index);
      } else {
        this._clearAndSelectIndex(index);
      }
    } else if (selectionMode === SelectionMode.single) {
      this._clearAndSelectIndex(index);
    }
  };
  SelectionZone2.prototype._onInvokeMouseDown = function(ev, index) {
    var selection = this.props.selection;
    if (selection.isIndexSelected(index)) {
      return;
    }
    this._clearAndSelectIndex(index);
  };
  SelectionZone2.prototype._findScrollParentAndTryClearOnEmptyClick = function(ev) {
    var scrollParent = findScrollableParent(this._root.current);
    this._events.off(document, "click", this._findScrollParentAndTryClearOnEmptyClick);
    this._events.on(scrollParent, "click", this._tryClearOnEmptyClick);
    if (scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target) || scrollParent === ev.target) {
      this._tryClearOnEmptyClick(ev);
    }
  };
  SelectionZone2.prototype._tryClearOnEmptyClick = function(ev) {
    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target)) {
      this.props.selection.setAllSelected(false);
    }
  };
  SelectionZone2.prototype._clearAndSelectIndex = function(index) {
    var _a = this.props, selection = _a.selection, _b = _a.selectionClearedOnSurfaceClick, selectionClearedOnSurfaceClick = _b === void 0 ? true : _b;
    var isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);
    if (!isAlreadySingleSelected && selectionClearedOnSurfaceClick) {
      var isModal = selection.isModal && selection.isModal();
      selection.setChangeEvents(false);
      selection.setAllSelected(false);
      selection.setIndexSelected(index, true, true);
      if (isModal || this.props.enterModalOnTouch && this._isTouch) {
        if (selection.setModal) {
          selection.setModal(true);
        }
        if (this._isTouch) {
          this._setIsTouch(false);
        }
      }
      selection.setChangeEvents(true);
    }
  };
  SelectionZone2.prototype._updateModifiers = function(ev) {
    this._isShiftPressed = ev.shiftKey;
    this._isCtrlPressed = ev.ctrlKey;
    this._isMetaPressed = ev.metaKey;
    var keyCode = ev.keyCode;
    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;
  };
  SelectionZone2.prototype._findItemRoot = function(target) {
    var selection = this.props.selection;
    while (target !== this._root.current) {
      var indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);
      var index = Number(indexValue);
      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {
        break;
      }
      target = getParent(target);
    }
    if (target === this._root.current) {
      return void 0;
    }
    return target;
  };
  SelectionZone2.prototype._getItemIndex = function(itemRoot) {
    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));
  };
  SelectionZone2.prototype._shouldAutoSelect = function(element) {
    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);
  };
  SelectionZone2.prototype._hasAttribute = function(element, attributeName) {
    var isToggle = false;
    while (!isToggle && element !== this._root.current) {
      var value = element.getAttribute(attributeName);
      if (value === "false") {
        isToggle = false;
        break;
      }
      isToggle = value === "true";
      element = getParent(element);
    }
    return isToggle;
  };
  SelectionZone2.prototype._isInputElement = function(element) {
    return element.tagName === "INPUT" || element.tagName === "TEXTAREA" || element.getAttribute("contenteditable") === "true" || element.getAttribute("contenteditable") === "";
  };
  SelectionZone2.prototype._isNonHandledClick = function(element) {
    var doc = getDocument();
    if (doc && element) {
      while (element && element !== doc.documentElement) {
        if (isElementTabbable(element)) {
          return false;
        }
        element = getParent(element);
      }
    }
    return true;
  };
  SelectionZone2.prototype._handleNextFocus = function(handleFocus) {
    var _this = this;
    if (this._shouldHandleFocusTimeoutId) {
      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);
      this._shouldHandleFocusTimeoutId = void 0;
    }
    this._shouldHandleFocus = handleFocus;
    if (handleFocus) {
      this._async.setTimeout(function() {
        _this._shouldHandleFocus = false;
      }, 100);
    }
  };
  SelectionZone2.prototype._setIsTouch = function(isTouch) {
    var _this = this;
    if (this._isTouchTimeoutId) {
      this._async.clearTimeout(this._isTouchTimeoutId);
      this._isTouchTimeoutId = void 0;
    }
    this._isTouch = true;
    if (isTouch) {
      this._async.setTimeout(function() {
        _this._isTouch = false;
      }, 300);
    }
  };
  SelectionZone2.prototype._getSelectionMode = function() {
    var selection = this.props.selection;
    var _a = this.props.selectionMode, selectionMode = _a === void 0 ? selection ? selection.mode : SelectionMode.none : _a;
    return selectionMode;
  };
  SelectionZone2.defaultProps = {
    isSelectedOnFocus: true,
    toggleWithoutModifierPressed: false,
    selectionMode: SelectionMode.multiple,
    selectionClearedOnEscapePress: true
  };
  return SelectionZone2;
}(React5.Component);

// node_modules/@fluentui/react/lib/components/GroupedList/GroupedList.types.js
var CollapseAllVisibility;
(function(CollapseAllVisibility2) {
  CollapseAllVisibility2[CollapseAllVisibility2["hidden"] = 0] = "hidden";
  CollapseAllVisibility2[CollapseAllVisibility2["visible"] = 1] = "visible";
})(CollapseAllVisibility || (CollapseAllVisibility = {}));

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsList.types.js
var ColumnActionsMode;
(function(ColumnActionsMode2) {
  ColumnActionsMode2[ColumnActionsMode2["disabled"] = 0] = "disabled";
  ColumnActionsMode2[ColumnActionsMode2["clickable"] = 1] = "clickable";
  ColumnActionsMode2[ColumnActionsMode2["hasDropdown"] = 2] = "hasDropdown";
})(ColumnActionsMode || (ColumnActionsMode = {}));
var ConstrainMode;
(function(ConstrainMode2) {
  ConstrainMode2[ConstrainMode2["unconstrained"] = 0] = "unconstrained";
  ConstrainMode2[ConstrainMode2["horizontalConstrained"] = 1] = "horizontalConstrained";
})(ConstrainMode || (ConstrainMode = {}));
var ColumnDragEndLocation;
(function(ColumnDragEndLocation2) {
  ColumnDragEndLocation2[ColumnDragEndLocation2["outside"] = 0] = "outside";
  ColumnDragEndLocation2[ColumnDragEndLocation2["surface"] = 1] = "surface";
  ColumnDragEndLocation2[ColumnDragEndLocation2["header"] = 2] = "header";
})(ColumnDragEndLocation || (ColumnDragEndLocation = {}));
var DetailsListLayoutMode;
(function(DetailsListLayoutMode2) {
  DetailsListLayoutMode2[DetailsListLayoutMode2["fixedColumns"] = 0] = "fixedColumns";
  DetailsListLayoutMode2[DetailsListLayoutMode2["justified"] = 1] = "justified";
})(DetailsListLayoutMode || (DetailsListLayoutMode = {}));
var CheckboxVisibility;
(function(CheckboxVisibility2) {
  CheckboxVisibility2[CheckboxVisibility2["onHover"] = 0] = "onHover";
  CheckboxVisibility2[CheckboxVisibility2["always"] = 1] = "always";
  CheckboxVisibility2[CheckboxVisibility2["hidden"] = 2] = "hidden";
})(CheckboxVisibility || (CheckboxVisibility = {}));

// node_modules/@fluentui/react/lib/components/GroupedList/GroupSpacer.js
var React6 = __toESM(require_react());
var SPACER_WIDTH = 36;
var GroupSpacer = function(props) {
  var count = props.count, _a = props.indentWidth, indentWidth = _a === void 0 ? SPACER_WIDTH : _a, _b = props.role, role = _b === void 0 ? "presentation" : _b;
  var width = count * indentWidth;
  return count > 0 ? React6.createElement("span", { className: "ms-GroupSpacer", style: { display: "inline-block", width }, role }) : null;
};

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsRow.styles.js
var DetailsRowGlobalClassNames = {
  root: "ms-DetailsRow",
  compact: "ms-DetailsList--Compact",
  cell: "ms-DetailsRow-cell",
  cellAnimation: "ms-DetailsRow-cellAnimation",
  cellCheck: "ms-DetailsRow-cellCheck",
  check: "ms-DetailsRow-check",
  cellMeasurer: "ms-DetailsRow-cellMeasurer",
  listCellFirstChild: "ms-List-cell:first-child",
  isContentUnselectable: "is-contentUnselectable",
  isSelected: "is-selected",
  isCheckVisible: "is-check-visible",
  isRowHeader: "is-row-header",
  fields: "ms-DetailsRow-fields"
};
var IsFocusableSelector = "[data-is-focusable='true']";
var DEFAULT_CELL_STYLE_PROPS = {
  cellLeftPadding: 12,
  cellRightPadding: 8,
  cellExtraRightPadding: 24
};
var DEFAULT_ROW_HEIGHTS = {
  rowHeight: 42,
  compactRowHeight: 32
};
var values = __assign(__assign({}, DEFAULT_ROW_HEIGHTS), { rowVerticalPadding: 11, compactRowVerticalPadding: 6 });
var getDetailsRowStyles = function(props) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
  var theme = props.theme, isSelected = props.isSelected, canSelect = props.canSelect, droppingClassName = props.droppingClassName, anySelected = props.anySelected, isCheckVisible = props.isCheckVisible, checkboxCellClassName = props.checkboxCellClassName, compact = props.compact, className = props.className, _q = props.cellStyleProps, cellStyleProps = _q === void 0 ? DEFAULT_CELL_STYLE_PROPS : _q, enableUpdateAnimations = props.enableUpdateAnimations, disabled = props.disabled;
  var palette = theme.palette, fonts = theme.fonts;
  var neutralPrimary = palette.neutralPrimary, white = palette.white, neutralSecondary = palette.neutralSecondary, neutralLighter = palette.neutralLighter, neutralLight = palette.neutralLight, neutralDark = palette.neutralDark, neutralQuaternaryAlt = palette.neutralQuaternaryAlt;
  var _r = theme.semanticColors, focusBorder = _r.focusBorder, focusedLinkColor = _r.linkHovered;
  var classNames = getGlobalClassNames(DetailsRowGlobalClassNames, theme);
  var colors = {
    defaultHeaderText: neutralPrimary,
    defaultMetaText: neutralSecondary,
    defaultBackground: white,
    defaultHoverHeaderText: neutralDark,
    defaultHoverMetaText: neutralPrimary,
    defaultHoverBackground: neutralLighter,
    selectedHeaderText: neutralDark,
    selectedMetaText: neutralPrimary,
    selectedBackground: neutralLight,
    selectedHoverHeaderText: neutralDark,
    selectedHoverMetaText: neutralPrimary,
    selectedHoverBackground: neutralQuaternaryAlt,
    focusHeaderText: neutralDark,
    focusMetaText: neutralPrimary,
    focusBackground: neutralLight,
    focusHoverBackground: neutralQuaternaryAlt
  };
  var rowHighContrastFocus = {
    top: 2,
    right: 2,
    bottom: 2,
    left: 2
  };
  var selectedStyles = [
    getFocusStyle(theme, {
      inset: -1,
      borderColor: focusBorder,
      outlineColor: white,
      highContrastStyle: rowHighContrastFocus
    }),
    classNames.isSelected,
    {
      color: colors.selectedMetaText,
      background: colors.selectedBackground,
      borderBottom: "1px solid " + white,
      selectors: (_a = {
        "&:before": {
          position: "absolute",
          display: "block",
          top: -1,
          height: 1,
          bottom: 0,
          left: 0,
          right: 0,
          content: "",
          borderTop: "1px solid " + white
        }
      }, _a["." + classNames.cell + " > ." + GlobalClassNames.root] = {
        color: focusedLinkColor,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          color: "HighlightText"
        }, _b)
      }, _a["&:hover"] = {
        background: colors.selectedHoverBackground,
        color: colors.selectedHoverMetaText,
        selectors: (_c = {}, _c[HighContrastSelector] = {
          background: "Highlight",
          selectors: (_d = {}, _d["." + classNames.cell] = {
            color: "HighlightText"
          }, _d["." + classNames.cell + " > ." + GlobalClassNames.root] = {
            forcedColorAdjust: "none",
            color: "HighlightText"
          }, _d)
        }, _c["." + classNames.isRowHeader] = {
          color: colors.selectedHoverHeaderText,
          selectors: (_e = {}, _e[HighContrastSelector] = {
            color: "HighlightText"
          }, _e)
        }, _c)
      }, _a["&:focus"] = {
        background: colors.focusBackground,
        selectors: (_f = {}, _f["." + classNames.cell] = {
          color: colors.focusMetaText,
          selectors: (_g = {}, _g[HighContrastSelector] = {
            color: "HighlightText",
            selectors: {
              "> a": {
                color: "HighlightText"
              }
            }
          }, _g)
        }, _f["." + classNames.isRowHeader] = {
          color: colors.focusHeaderText,
          selectors: (_h = {}, _h[HighContrastSelector] = {
            color: "HighlightText"
          }, _h)
        }, _f[HighContrastSelector] = {
          background: "Highlight"
        }, _f)
      }, _a[HighContrastSelector] = __assign(__assign({ background: "Highlight", color: "HighlightText" }, getHighContrastNoAdjustStyle()), { selectors: {
        a: {
          color: "HighlightText"
        }
      } }), _a["&:focus:hover"] = {
        background: colors.focusHoverBackground
      }, _a)
    }
  ];
  var cannotSelectStyles = [
    classNames.isContentUnselectable,
    {
      userSelect: "none",
      cursor: "default"
    }
  ];
  var rootCompactStyles = {
    minHeight: values.compactRowHeight,
    border: 0
  };
  var cellCompactStyles = {
    minHeight: values.compactRowHeight,
    paddingTop: values.compactRowVerticalPadding,
    paddingBottom: values.compactRowVerticalPadding,
    paddingLeft: cellStyleProps.cellLeftPadding + "px"
  };
  var defaultCellStyles = [
    getFocusStyle(theme, { inset: -1 }),
    classNames.cell,
    {
      display: "inline-block",
      position: "relative",
      boxSizing: "border-box",
      minHeight: values.rowHeight,
      verticalAlign: "top",
      whiteSpace: "nowrap",
      overflow: "hidden",
      textOverflow: "ellipsis",
      paddingTop: values.rowVerticalPadding,
      paddingBottom: values.rowVerticalPadding,
      paddingLeft: cellStyleProps.cellLeftPadding + "px",
      selectors: (_j = {
        "& > button": {
          maxWidth: "100%"
        }
      }, _j[IsFocusableSelector] = getFocusStyle(theme, { inset: -1, borderColor: neutralSecondary, outlineColor: white }), _j)
    },
    isSelected && {
      selectors: (_k = {}, _k[HighContrastSelector] = __assign({ background: "Highlight", color: "HighlightText" }, getHighContrastNoAdjustStyle()), _k)
    },
    compact && cellCompactStyles,
    disabled && { opacity: 0.5 }
  ];
  return {
    root: [
      classNames.root,
      AnimationClassNames.fadeIn400,
      droppingClassName,
      theme.fonts.small,
      isCheckVisible && classNames.isCheckVisible,
      getFocusStyle(theme, { borderColor: focusBorder, outlineColor: white }),
      {
        borderBottom: "1px solid " + neutralLighter,
        background: colors.defaultBackground,
        color: colors.defaultMetaText,
        display: "inline-flex",
        minWidth: "100%",
        minHeight: values.rowHeight,
        whiteSpace: "nowrap",
        padding: 0,
        boxSizing: "border-box",
        verticalAlign: "top",
        textAlign: "left",
        selectors: (_l = {}, _l["." + classNames.listCellFirstChild + " &:before"] = {
          display: "none"
        }, _l["&:hover"] = {
          background: colors.defaultHoverBackground,
          color: colors.defaultHoverMetaText,
          selectors: (_m = {}, _m["." + classNames.isRowHeader] = {
            color: colors.defaultHoverHeaderText
          }, _m["." + classNames.cell + " > ." + GlobalClassNames.root] = {
            color: focusedLinkColor
          }, _m)
        }, _l["&:hover ." + classNames.check] = {
          opacity: 1
        }, _l["." + IsFocusVisibleClassName + " &:focus ." + classNames.check] = {
          opacity: 1
        }, _l[".ms-GroupSpacer"] = {
          flexShrink: 0,
          flexGrow: 0
        }, _l)
      },
      isSelected && selectedStyles,
      !canSelect && cannotSelectStyles,
      compact && rootCompactStyles,
      className
    ],
    cellUnpadded: {
      paddingRight: cellStyleProps.cellRightPadding + "px"
    },
    cellPadded: {
      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding + "px",
      selectors: (_o = {}, _o["&." + classNames.cellCheck] = {
        paddingRight: 0
      }, _o)
    },
    cell: defaultCellStyles,
    cellAnimation: enableUpdateAnimations && AnimationStyles.slideLeftIn40,
    cellMeasurer: [
      classNames.cellMeasurer,
      {
        overflow: "visible",
        whiteSpace: "nowrap"
      }
    ],
    checkCell: [
      defaultCellStyles,
      classNames.cellCheck,
      checkboxCellClassName,
      {
        padding: 0,
        paddingTop: 1,
        marginTop: -1,
        flexShrink: 0
      }
    ],
    checkCover: {
      position: "absolute",
      top: -1,
      left: 0,
      bottom: 0,
      right: 0,
      display: anySelected ? "block" : "none"
    },
    fields: [
      classNames.fields,
      {
        display: "flex",
        alignItems: "stretch"
      }
    ],
    isRowHeader: [
      classNames.isRowHeader,
      {
        color: colors.defaultHeaderText,
        fontSize: fonts.medium.fontSize
      },
      isSelected && {
        color: colors.selectedHeaderText,
        fontWeight: FontWeights.semibold,
        selectors: (_p = {}, _p[HighContrastSelector] = {
          color: "HighlightText"
        }, _p)
      }
    ],
    isMultiline: [
      defaultCellStyles,
      {
        whiteSpace: "normal",
        wordBreak: "break-word",
        textOverflow: "clip"
      }
    ],
    check: [classNames.check]
  };
};

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsHeader.styles.js
var GlobalClassNames2 = {
  tooltipHost: "ms-TooltipHost",
  root: "ms-DetailsHeader",
  cell: "ms-DetailsHeader-cell",
  cellIsCheck: "ms-DetailsHeader-cellIsCheck",
  collapseButton: "ms-DetailsHeader-collapseButton",
  isCollapsed: "is-collapsed",
  isAllSelected: "is-allSelected",
  isSelectAllHidden: "is-selectAllHidden",
  isResizingColumn: "is-resizingColumn",
  cellSizer: "ms-DetailsHeader-cellSizer",
  isResizing: "is-resizing",
  dropHintCircleStyle: "ms-DetailsHeader-dropHintCircleStyle",
  dropHintCaretStyle: "ms-DetailsHeader-dropHintCaretStyle",
  dropHintLineStyle: "ms-DetailsHeader-dropHintLineStyle",
  cellTitle: "ms-DetailsHeader-cellTitle",
  cellName: "ms-DetailsHeader-cellName",
  filterChevron: "ms-DetailsHeader-filterChevron",
  gripperBarVertical: "ms-DetailsColumn-gripperBarVertical",
  checkTooltip: "ms-DetailsHeader-checkTooltip",
  check: "ms-DetailsHeader-check"
};
var HEADER_HEIGHT = 42;
var getCellStyles = function(props) {
  var theme = props.theme, _a = props.cellStyleProps, cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;
  var semanticColors = theme.semanticColors;
  var classNames = getGlobalClassNames(GlobalClassNames2, theme);
  return [
    classNames.cell,
    getFocusStyle(theme),
    {
      color: semanticColors.bodyText,
      position: "relative",
      display: "inline-block",
      boxSizing: "border-box",
      padding: "0 " + cellStyleProps.cellRightPadding + "px 0 " + cellStyleProps.cellLeftPadding + "px",
      lineHeight: "inherit",
      margin: "0",
      height: HEADER_HEIGHT,
      verticalAlign: "top",
      whiteSpace: "nowrap",
      textOverflow: "ellipsis",
      textAlign: "left"
    }
  ];
};
var getDetailsHeaderStyles = function(props) {
  var _a, _b, _c, _d;
  var theme = props.theme, className = props.className, isAllSelected = props.isAllSelected, isResizingColumn = props.isResizingColumn, isSizing = props.isSizing, isAllCollapsed = props.isAllCollapsed, _e = props.cellStyleProps, cellStyleProps = _e === void 0 ? DEFAULT_CELL_STYLE_PROPS : _e;
  var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;
  var classNames = getGlobalClassNames(GlobalClassNames2, theme);
  var colors = {
    iconForegroundColor: semanticColors.bodySubtext,
    headerForegroundColor: semanticColors.bodyText,
    headerBackgroundColor: semanticColors.bodyBackground,
    resizerColor: palette.neutralTertiaryAlt
  };
  var cellSizerFadeInStyles = {
    opacity: 1,
    transition: "opacity 0.3s linear"
  };
  var cellStyles = getCellStyles(props);
  return {
    root: [
      classNames.root,
      fonts.small,
      {
        display: "inline-block",
        background: colors.headerBackgroundColor,
        position: "relative",
        minWidth: "100%",
        verticalAlign: "top",
        height: HEADER_HEIGHT,
        lineHeight: HEADER_HEIGHT,
        whiteSpace: "nowrap",
        boxSizing: "content-box",
        paddingBottom: "1px",
        paddingTop: "16px",
        borderBottom: "1px solid " + semanticColors.bodyDivider,
        cursor: "default",
        userSelect: "none",
        selectors: (_a = {}, _a["&:hover ." + classNames.check] = {
          opacity: 1
        }, _a["& ." + classNames.tooltipHost + " ." + classNames.checkTooltip] = {
          display: "block"
        }, _a)
      },
      isAllSelected && classNames.isAllSelected,
      isResizingColumn && classNames.isResizingColumn,
      className
    ],
    check: [
      classNames.check,
      {
        height: HEADER_HEIGHT
      },
      {
        selectors: (_b = {}, _b["." + IsFocusVisibleClassName + " &:focus"] = {
          opacity: 1
        }, _b)
      }
    ],
    cellWrapperPadded: {
      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding
    },
    cellIsCheck: [
      cellStyles,
      classNames.cellIsCheck,
      {
        position: "relative",
        padding: 0,
        margin: 0,
        display: "inline-flex",
        alignItems: "center",
        border: "none"
      },
      isAllSelected && {
        opacity: 1
      }
    ],
    cellIsGroupExpander: [
      cellStyles,
      {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        fontSize: fonts.small.fontSize,
        padding: 0,
        border: "none",
        width: SPACER_WIDTH,
        color: palette.neutralSecondary,
        selectors: {
          ":hover": {
            backgroundColor: palette.neutralLighter
          },
          ":active": {
            backgroundColor: palette.neutralLight
          }
        }
      }
    ],
    cellIsActionable: {
      selectors: {
        ":hover": {
          color: semanticColors.bodyText,
          background: semanticColors.listHeaderBackgroundHovered
        },
        ":active": {
          background: semanticColors.listHeaderBackgroundPressed
        }
      }
    },
    cellIsEmpty: {
      textOverflow: "clip"
    },
    cellSizer: [
      classNames.cellSizer,
      focusClear(),
      {
        display: "inline-block",
        position: "relative",
        cursor: "ew-resize",
        bottom: 0,
        top: 0,
        overflow: "hidden",
        height: "inherit",
        background: "transparent",
        zIndex: 1,
        width: 16,
        selectors: (_c = {
          ":after": {
            content: '""',
            position: "absolute",
            top: 0,
            bottom: 0,
            width: 1,
            background: colors.resizerColor,
            opacity: 0,
            left: "50%"
          },
          ":focus:after": cellSizerFadeInStyles,
          ":hover:after": cellSizerFadeInStyles
        }, _c["&." + classNames.isResizing + ":after"] = [
          cellSizerFadeInStyles,
          {
            boxShadow: "0 0 5px 0 rgba(0, 0, 0, 0.4)"
          }
        ], _c)
      }
    ],
    cellIsResizing: classNames.isResizing,
    cellSizerStart: {
      margin: "0 -8px"
    },
    cellSizerEnd: {
      margin: 0,
      marginLeft: -16
    },
    collapseButton: [
      classNames.collapseButton,
      {
        transformOrigin: "50% 50%",
        transition: "transform .1s linear"
      },
      isAllCollapsed ? [
        classNames.isCollapsed,
        {
          transform: "rotate(0deg)"
        }
      ] : {
        transform: getRTL(theme) ? "rotate(-90deg)" : "rotate(90deg)"
      }
    ],
    checkTooltip: classNames.checkTooltip,
    sizingOverlay: isSizing && {
      position: "absolute",
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      cursor: "ew-resize",
      background: "rgba(255, 255, 255, 0)",
      selectors: (_d = {}, _d[HighContrastSelector] = __assign({ background: "transparent" }, getHighContrastNoAdjustStyle()), _d)
    },
    accessibleLabel: hiddenContentStyle,
    dropHintCircleStyle: [
      classNames.dropHintCircleStyle,
      {
        display: "inline-block",
        visibility: "hidden",
        position: "absolute",
        bottom: 0,
        height: 9,
        width: 9,
        borderRadius: "50%",
        marginLeft: -5,
        top: 34,
        overflow: "visible",
        zIndex: 10,
        border: "1px solid " + palette.themePrimary,
        background: palette.white
      }
    ],
    dropHintCaretStyle: [
      classNames.dropHintCaretStyle,
      {
        display: "none",
        position: "absolute",
        top: -28,
        left: -6.5,
        fontSize: fonts.medium.fontSize,
        color: palette.themePrimary,
        overflow: "visible",
        zIndex: 10
      }
    ],
    dropHintLineStyle: [
      classNames.dropHintLineStyle,
      {
        display: "none",
        position: "absolute",
        bottom: 0,
        top: 0,
        overflow: "hidden",
        height: 42,
        width: 1,
        background: palette.themePrimary,
        zIndex: 10
      }
    ],
    dropHintStyle: {
      display: "inline-block",
      position: "absolute"
    }
  };
};

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsRowCheck.styles.js
var GlobalClassNames3 = {
  root: "ms-DetailsRow-check",
  isDisabled: "ms-DetailsRow-check--isDisabled",
  isHeader: "ms-DetailsRow-check--isHeader"
};
var CHECK_CELL_WIDTH = 48;
var getDetailsRowCheckStyles = function(props) {
  var theme = props.theme, className = props.className, isHeader = props.isHeader, selected = props.selected, anySelected = props.anySelected, canSelect = props.canSelect, compact = props.compact, isVisible = props.isVisible;
  var classNames = getGlobalClassNames(GlobalClassNames3, theme);
  var rowHeight = DEFAULT_ROW_HEIGHTS.rowHeight, compactRowHeight = DEFAULT_ROW_HEIGHTS.compactRowHeight;
  var height = isHeader ? HEADER_HEIGHT : compact ? compactRowHeight : rowHeight;
  var isCheckVisible = isVisible || selected || anySelected;
  return {
    root: [classNames.root, className],
    check: [
      !canSelect && classNames.isDisabled,
      isHeader && classNames.isHeader,
      getFocusStyle(theme),
      theme.fonts.small,
      CheckGlobalClassNames.checkHost,
      {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        cursor: "default",
        boxSizing: "border-box",
        verticalAlign: "top",
        background: "none",
        backgroundColor: "transparent",
        border: "none",
        opacity: isCheckVisible ? 1 : 0,
        height,
        width: CHECK_CELL_WIDTH,
        padding: 0,
        margin: 0
      }
    ],
    isDisabled: []
  };
};

// node_modules/@fluentui/react/lib/components/Spinner/Spinner.types.js
var SpinnerSize;
(function(SpinnerSize2) {
  SpinnerSize2[SpinnerSize2["xSmall"] = 0] = "xSmall";
  SpinnerSize2[SpinnerSize2["small"] = 1] = "small";
  SpinnerSize2[SpinnerSize2["medium"] = 2] = "medium";
  SpinnerSize2[SpinnerSize2["large"] = 3] = "large";
})(SpinnerSize || (SpinnerSize = {}));
var SpinnerType;
(function(SpinnerType2) {
  SpinnerType2[SpinnerType2["normal"] = 0] = "normal";
  SpinnerType2[SpinnerType2["large"] = 1] = "large";
})(SpinnerType || (SpinnerType = {}));

// node_modules/@fluentui/react/lib/components/Spinner/Spinner.base.js
var React7 = __toESM(require_react());
var getClassNames3 = classNamesFunction();
var SpinnerBase = function(_super) {
  __extends(SpinnerBase2, _super);
  function SpinnerBase2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SpinnerBase2.prototype.render = function() {
    var _a = this.props, type = _a.type, size = _a.size, ariaLabel = _a.ariaLabel, ariaLive = _a.ariaLive, styles = _a.styles, label = _a.label, theme = _a.theme, className = _a.className, labelPosition = _a.labelPosition;
    var statusMessage = ariaLabel;
    var nativeProps = getNativeProps(this.props, divProperties, ["size"]);
    var styleSize = size;
    if (styleSize === void 0 && type !== void 0) {
      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;
    }
    var classNames = getClassNames3(styles, {
      theme,
      size: styleSize,
      className,
      labelPosition
    });
    return React7.createElement(
      "div",
      __assign({}, nativeProps, { className: classNames.root }),
      React7.createElement("div", { className: classNames.circle }),
      label && React7.createElement("div", { className: classNames.label }, label),
      statusMessage && React7.createElement(
        "div",
        { role: "status", "aria-live": ariaLive },
        React7.createElement(
          DelayedRender,
          null,
          React7.createElement("div", { className: classNames.screenReaderText }, statusMessage)
        )
      )
    );
  };
  SpinnerBase2.defaultProps = {
    size: SpinnerSize.medium,
    ariaLive: "polite",
    labelPosition: "bottom"
  };
  return SpinnerBase2;
}(React7.Component);

// node_modules/@fluentui/react/lib/components/Spinner/Spinner.styles.js
var GlobalClassNames4 = {
  root: "ms-Spinner",
  circle: "ms-Spinner-circle",
  label: "ms-Spinner-label"
};
var spinAnimation = memoizeFunction(function() {
  return keyframes({
    "0%": {
      transform: "rotate(0deg)"
    },
    "100%": {
      transform: "rotate(360deg)"
    }
  });
});
var getStyles3 = function(props) {
  var _a;
  var theme = props.theme, size = props.size, className = props.className, labelPosition = props.labelPosition;
  var palette = theme.palette;
  var classNames = getGlobalClassNames(GlobalClassNames4, theme);
  return {
    root: [
      classNames.root,
      {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center"
      },
      labelPosition === "top" && {
        flexDirection: "column-reverse"
      },
      labelPosition === "right" && {
        flexDirection: "row"
      },
      labelPosition === "left" && {
        flexDirection: "row-reverse"
      },
      className
    ],
    circle: [
      classNames.circle,
      {
        boxSizing: "border-box",
        borderRadius: "50%",
        border: "1.5px solid " + palette.themeLight,
        borderTopColor: palette.themePrimary,
        animationName: spinAnimation(),
        animationDuration: "1.3s",
        animationIterationCount: "infinite",
        animationTimingFunction: "cubic-bezier(.53,.21,.29,.67)",
        selectors: (_a = {}, _a[HighContrastSelector] = __assign({ borderTopColor: "Highlight" }, getHighContrastNoAdjustStyle()), _a)
      },
      size === SpinnerSize.xSmall && [
        "ms-Spinner--xSmall",
        {
          width: 12,
          height: 12
        }
      ],
      size === SpinnerSize.small && [
        "ms-Spinner--small",
        {
          width: 16,
          height: 16
        }
      ],
      size === SpinnerSize.medium && [
        "ms-Spinner--medium",
        {
          width: 20,
          height: 20
        }
      ],
      size === SpinnerSize.large && [
        "ms-Spinner--large",
        {
          width: 28,
          height: 28
        }
      ]
    ],
    label: [
      classNames.label,
      theme.fonts.small,
      {
        color: palette.themePrimary,
        margin: "8px 0 0",
        textAlign: "center"
      },
      labelPosition === "top" && {
        margin: "0 0 8px"
      },
      labelPosition === "right" && {
        margin: "0 0 0 8px"
      },
      labelPosition === "left" && {
        margin: "0 8px 0 0"
      }
    ],
    screenReaderText: hiddenContentStyle
  };
};

// node_modules/@fluentui/react/lib/components/Spinner/Spinner.js
var Spinner = styled(SpinnerBase, getStyles3, void 0, { scope: "Spinner" });

// node_modules/@fluentui/react/lib/components/GroupedList/GroupHeader.styles.js
var GlobalClassNames5 = {
  root: "ms-GroupHeader",
  compact: "ms-GroupHeader--compact",
  check: "ms-GroupHeader-check",
  dropIcon: "ms-GroupHeader-dropIcon",
  expand: "ms-GroupHeader-expand",
  isCollapsed: "is-collapsed",
  title: "ms-GroupHeader-title",
  isSelected: "is-selected",
  iconTag: "ms-Icon--Tag",
  group: "ms-GroupedList-group",
  isDropping: "is-dropping"
};
var beziers = {
  easeOutCirc: "cubic-bezier(0.075, 0.820, 0.165, 1.000)",
  easeOutSine: "cubic-bezier(0.390, 0.575, 0.565, 1.000)",
  easeInBack: "cubic-bezier(0.600, -0.280, 0.735, 0.045)"
};
var DEFAULT_GROUP_HEADER_HEIGHT = 48;
var COMPACT_GROUP_HEADER_HEIGHT = 40;
var getStyles4 = function(props) {
  var _a, _b, _c, _d, _e;
  var theme = props.theme, className = props.className, selected = props.selected, isCollapsed = props.isCollapsed, compact = props.compact;
  var cellLeftPadding = DEFAULT_CELL_STYLE_PROPS.cellLeftPadding;
  var finalRowHeight = compact ? COMPACT_GROUP_HEADER_HEIGHT : DEFAULT_GROUP_HEADER_HEIGHT;
  var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;
  var classNames = getGlobalClassNames(GlobalClassNames5, theme);
  var checkExpandResetStyles = [
    getFocusStyle(theme),
    {
      cursor: "default",
      background: "none",
      backgroundColor: "transparent",
      border: "none",
      padding: 0
    }
  ];
  return {
    root: [
      classNames.root,
      getFocusStyle(theme),
      theme.fonts.medium,
      {
        borderBottom: "1px solid " + semanticColors.listBackground,
        cursor: "default",
        userSelect: "none",
        selectors: (_a = {
          ":hover": {
            background: semanticColors.listItemBackgroundHovered,
            color: semanticColors.actionLinkHovered
          }
        }, _a["&:hover ." + classNames.check] = {
          opacity: 1
        }, _a["." + IsFocusVisibleClassName + " &:focus ." + classNames.check] = {
          opacity: 1
        }, _a[":global(." + classNames.group + "." + classNames.isDropping + ")"] = {
          selectors: (_b = {}, _b["& > ." + classNames.root + " ." + classNames.dropIcon] = {
            transition: "transform " + AnimationVariables.durationValue4 + " " + beziers.easeOutCirc + " " + ("opacity " + AnimationVariables.durationValue1 + " " + beziers.easeOutSine),
            transitionDelay: AnimationVariables.durationValue3,
            opacity: 1,
            transform: "rotate(0.2deg) scale(1);"
          }, _b["." + classNames.check] = {
            opacity: 0
          }, _b)
        }, _a)
      },
      selected && [
        classNames.isSelected,
        {
          background: semanticColors.listItemBackgroundChecked,
          selectors: (_c = {
            ":hover": {
              background: semanticColors.listItemBackgroundCheckedHovered
            }
          }, _c["" + classNames.check] = {
            opacity: 1
          }, _c)
        }
      ],
      compact && [classNames.compact, { border: "none" }],
      className
    ],
    groupHeaderContainer: [
      {
        display: "flex",
        alignItems: "center",
        height: finalRowHeight
      }
    ],
    headerCount: [
      {
        padding: "0px 4px"
      }
    ],
    check: [
      classNames.check,
      checkExpandResetStyles,
      {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        paddingTop: 1,
        marginTop: -1,
        opacity: 0,
        width: CHECK_CELL_WIDTH,
        height: finalRowHeight,
        selectors: (_d = {}, _d["." + IsFocusVisibleClassName + " &:focus"] = {
          opacity: 1
        }, _d)
      }
    ],
    expand: [
      classNames.expand,
      checkExpandResetStyles,
      {
        display: "flex",
        flexShrink: 0,
        alignItems: "center",
        justifyContent: "center",
        fontSize: fonts.small.fontSize,
        width: SPACER_WIDTH,
        height: finalRowHeight,
        color: selected ? palette.neutralPrimary : palette.neutralSecondary,
        selectors: {
          ":hover": {
            backgroundColor: selected ? palette.neutralQuaternary : palette.neutralLight
          },
          ":active": {
            backgroundColor: selected ? palette.neutralTertiaryAlt : palette.neutralQuaternaryAlt
          }
        }
      }
    ],
    expandIsCollapsed: [
      isCollapsed ? [
        classNames.isCollapsed,
        {
          transform: "rotate(0deg)",
          transformOrigin: "50% 50%",
          transition: "transform .1s linear"
        }
      ] : {
        transform: getRTL(theme) ? "rotate(-90deg)" : "rotate(90deg)",
        transformOrigin: "50% 50%",
        transition: "transform .1s linear"
      }
    ],
    title: [
      classNames.title,
      {
        paddingLeft: cellLeftPadding,
        fontSize: compact ? fonts.medium.fontSize : fonts.mediumPlus.fontSize,
        fontWeight: isCollapsed ? FontWeights.regular : FontWeights.semibold,
        cursor: "pointer",
        outline: 0,
        whiteSpace: "nowrap",
        textOverflow: "ellipsis",
        overflow: "hidden"
      }
    ],
    dropIcon: [
      classNames.dropIcon,
      {
        position: "absolute",
        left: -26,
        fontSize: IconFontSizes.large,
        color: palette.neutralSecondary,
        transition: "transform " + AnimationVariables.durationValue2 + " " + beziers.easeInBack + ", " + ("opacity " + AnimationVariables.durationValue4 + " " + beziers.easeOutSine),
        opacity: 0,
        transform: "rotate(0.2deg) scale(0.65)",
        transformOrigin: "10px 10px",
        selectors: (_e = {}, _e[":global(." + classNames.iconTag + ")"] = {
          position: "absolute"
        }, _e)
      }
    ]
  };
};

// node_modules/@fluentui/react/lib/components/GroupedList/GroupHeader.base.js
var React8 = __toESM(require_react());
var getClassNames4 = classNamesFunction();
var GroupHeaderBase = function(_super) {
  __extends(GroupHeaderBase2, _super);
  function GroupHeaderBase2(props) {
    var _this = _super.call(this, props) || this;
    _this._toggleCollapse = function() {
      var _a = _this.props, group = _a.group, onToggleCollapse = _a.onToggleCollapse, isGroupLoading = _a.isGroupLoading;
      var isCollapsed = _this.state.isCollapsed;
      var newCollapsed = !isCollapsed;
      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);
      _this.setState({
        isCollapsed: newCollapsed,
        isLoadingVisible: newLoadingVisible
      });
      if (onToggleCollapse) {
        onToggleCollapse(group);
      }
    };
    _this._onKeyUp = function(ev) {
      var _a = _this.props, group = _a.group, onGroupHeaderKeyUp = _a.onGroupHeaderKeyUp;
      if (onGroupHeaderKeyUp) {
        onGroupHeaderKeyUp(ev, group);
      }
      if (!ev.defaultPrevented) {
        var shouldOpen = _this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, _this.props.theme);
        var shouldClose = !_this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, _this.props.theme);
        if (shouldClose || shouldOpen) {
          _this._toggleCollapse();
          ev.stopPropagation();
          ev.preventDefault();
        }
      }
    };
    _this._onToggleClick = function(ev) {
      _this._toggleCollapse();
      ev.stopPropagation();
      ev.preventDefault();
    };
    _this._onToggleSelectGroupClick = function(ev) {
      var _a = _this.props, onToggleSelectGroup = _a.onToggleSelectGroup, group = _a.group;
      if (onToggleSelectGroup) {
        onToggleSelectGroup(group);
      }
      ev.preventDefault();
      ev.stopPropagation();
    };
    _this._onHeaderClick = function() {
      var _a = _this.props, group = _a.group, onGroupHeaderClick = _a.onGroupHeaderClick, onToggleSelectGroup = _a.onToggleSelectGroup;
      if (onGroupHeaderClick) {
        onGroupHeaderClick(group);
      } else if (onToggleSelectGroup) {
        onToggleSelectGroup(group);
      }
    };
    _this._onRenderTitle = function(props2) {
      var group = props2.group, ariaColSpan = props2.ariaColSpan;
      if (!group) {
        return null;
      }
      return React8.createElement(
        "div",
        { className: _this._classNames.title, id: _this._id, role: "gridcell", "aria-colspan": ariaColSpan },
        React8.createElement("span", null, group.name),
        React8.createElement(
          "span",
          { className: _this._classNames.headerCount },
          "(",
          group.count,
          group.hasMoreData && "+",
          ")"
        )
      );
    };
    _this._id = getId("GroupHeader");
    _this.state = {
      isCollapsed: _this.props.group && _this.props.group.isCollapsed,
      isLoadingVisible: false
    };
    return _this;
  }
  GroupHeaderBase2.getDerivedStateFromProps = function(nextProps, previousState) {
    if (nextProps.group) {
      var newCollapsed = nextProps.group.isCollapsed;
      var isGroupLoading = nextProps.isGroupLoading;
      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);
      return __assign(__assign({}, previousState), { isCollapsed: newCollapsed || false, isLoadingVisible: newLoadingVisible || false });
    }
    return previousState;
  };
  GroupHeaderBase2.prototype.render = function() {
    var _a = this.props, group = _a.group, _b = _a.groupLevel, groupLevel = _b === void 0 ? 0 : _b, viewport = _a.viewport, selectionMode = _a.selectionMode, loadingText = _a.loadingText, _c = _a.isSelected, isSelected = _c === void 0 ? false : _c, _d = _a.selected, selected = _d === void 0 ? false : _d, indentWidth = _a.indentWidth, _e = _a.onRenderTitle, onRenderTitle = _e === void 0 ? this._onRenderTitle : _e, onRenderGroupHeaderCheckbox = _a.onRenderGroupHeaderCheckbox, _f = _a.isCollapsedGroupSelectVisible, isCollapsedGroupSelectVisible = _f === void 0 ? true : _f, expandButtonProps = _a.expandButtonProps, expandButtonIcon = _a.expandButtonIcon, selectAllButtonProps = _a.selectAllButtonProps, theme = _a.theme, styles = _a.styles, className = _a.className, compact = _a.compact, ariaLevel = _a.ariaLevel, ariaPosInSet = _a.ariaPosInSet, ariaSetSize = _a.ariaSetSize, ariaRowIndex = _a.ariaRowIndex, useFastIcons = _a.useFastIcons;
    var defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;
    var onRenderCheckbox = onRenderGroupHeaderCheckbox ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender) : defaultCheckboxRender;
    var _g = this.state, isCollapsed = _g.isCollapsed, isLoadingVisible = _g.isLoadingVisible;
    var canSelectGroup = selectionMode === SelectionMode.multiple;
    var isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));
    var currentlySelected = selected || isSelected;
    var isRTL = getRTL(theme);
    this._classNames = getClassNames4(styles, {
      theme,
      className,
      selected: currentlySelected,
      isCollapsed,
      compact
    });
    if (!group) {
      return null;
    }
    return React8.createElement(
      "div",
      { className: this._classNames.root, style: viewport ? { minWidth: viewport.width } : {}, onClick: this._onHeaderClick, role: "row", "aria-level": ariaLevel, "aria-setsize": ariaSetSize, "aria-posinset": ariaPosInSet, "aria-rowindex": ariaRowIndex, "data-is-focusable": true, onKeyUp: this._onKeyUp, "aria-label": group.ariaLabel, "aria-labelledby": group.ariaLabel ? void 0 : this._id, "aria-expanded": !this.state.isCollapsed, "aria-selected": canSelectGroup ? currentlySelected : void 0 },
      React8.createElement(
        "div",
        { className: this._classNames.groupHeaderContainer, role: "presentation" },
        isSelectionCheckVisible ? React8.createElement(
          "div",
          { role: "gridcell" },
          React8.createElement("button", __assign({ "data-is-focusable": false, type: "button", className: this._classNames.check, role: "checkbox", id: this._id + "-check", "aria-checked": currentlySelected, "aria-labelledby": this._id + "-check " + this._id, "data-selection-toggle": true, onClick: this._onToggleSelectGroupClick }, selectAllButtonProps), onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox))
        ) : selectionMode !== SelectionMode.none && React8.createElement(GroupSpacer, { indentWidth: CHECK_CELL_WIDTH, count: 1 }),
        React8.createElement(GroupSpacer, { indentWidth, count: groupLevel }),
        React8.createElement(
          "div",
          { className: this._classNames.dropIcon, role: "presentation" },
          React8.createElement(Icon, { iconName: "Tag" })
        ),
        React8.createElement(
          "div",
          { role: "gridcell" },
          React8.createElement(
            "button",
            __assign({ "data-is-focusable": false, type: "button", className: this._classNames.expand, onClick: this._onToggleClick, "aria-expanded": !this.state.isCollapsed }, expandButtonProps),
            React8.createElement(Icon, { className: this._classNames.expandIsCollapsed, iconName: expandButtonIcon || (isRTL ? "ChevronLeftMed" : "ChevronRightMed") })
          )
        ),
        onRenderTitle(this.props, this._onRenderTitle),
        isLoadingVisible && React8.createElement(Spinner, { label: loadingText })
      )
    );
  };
  GroupHeaderBase2.prototype._defaultCheckboxRender = function(checkboxProps) {
    return React8.createElement(Check, { checked: checkboxProps.checked });
  };
  GroupHeaderBase2.prototype._fastDefaultCheckboxRender = function(checkboxProps) {
    return React8.createElement(FastCheck, { theme: checkboxProps.theme, checked: checkboxProps.checked });
  };
  GroupHeaderBase2.defaultProps = {
    expandButtonProps: { "aria-label": "expand collapse group" }
  };
  return GroupHeaderBase2;
}(React8.Component);
var FastCheck = React8.memo(function(props) {
  return React8.createElement(Check, { theme: props.theme, checked: props.checked, className: props.className, useFastIcons: true });
});

// node_modules/@fluentui/react/lib/components/GroupedList/GroupHeader.js
var GroupHeader = styled(GroupHeaderBase, getStyles4, void 0, {
  scope: "GroupHeader"
});

// node_modules/@fluentui/react/lib/components/GroupedList/GroupShowAll.styles.js
var GlobalClassNames6 = {
  root: "ms-GroupShowAll",
  link: "ms-Link"
};
var getStyles5 = function(props) {
  var _a;
  var theme = props.theme;
  var fonts = theme.fonts;
  var classNames = getGlobalClassNames(GlobalClassNames6, theme);
  return {
    root: [
      classNames.root,
      {
        position: "relative",
        padding: "10px 84px",
        cursor: "pointer",
        selectors: (_a = {}, _a["." + classNames.link] = {
          fontSize: fonts.small.fontSize
        }, _a)
      }
    ]
  };
};

// node_modules/@fluentui/react/lib/components/GroupedList/GroupShowAll.base.js
var React9 = __toESM(require_react());
var import_react = __toESM(require_react());
var getClassNames5 = classNamesFunction();
var GroupShowAllBase = function(props) {
  var group = props.group, groupLevel = props.groupLevel, _a = props.showAllLinkText, showAllLinkText = _a === void 0 ? "Show All" : _a, styles = props.styles, theme = props.theme, onToggleSummarize = props.onToggleSummarize;
  var classNames = getClassNames5(styles, { theme });
  var memoizedOnClick = (0, import_react.useCallback)(function(ev) {
    onToggleSummarize(group);
    ev.stopPropagation();
    ev.preventDefault();
  }, [onToggleSummarize, group]);
  if (group) {
    return React9.createElement(
      "div",
      { className: classNames.root },
      React9.createElement(GroupSpacer, { count: groupLevel }),
      React9.createElement(Link, { onClick: memoizedOnClick }, showAllLinkText)
    );
  }
  return null;
};

// node_modules/@fluentui/react/lib/components/GroupedList/GroupShowAll.js
var GroupShowAll = styled(GroupShowAllBase, getStyles5, void 0, { scope: "GroupShowAll" });

// node_modules/@fluentui/react/lib/components/GroupedList/GroupFooter.styles.js
var GlobalClassNames7 = {
  root: "ms-groupFooter"
};
var getStyles6 = function(props) {
  var theme = props.theme, className = props.className;
  var classNames = getGlobalClassNames(GlobalClassNames7, theme);
  return {
    root: [
      theme.fonts.medium,
      classNames.root,
      {
        position: "relative",
        padding: "5px 38px"
      },
      className
    ]
  };
};

// node_modules/@fluentui/react/lib/components/GroupedList/GroupFooter.base.js
var React10 = __toESM(require_react());
var getClassNames6 = classNamesFunction();
var GroupFooterBase = function(props) {
  var group = props.group, groupLevel = props.groupLevel, footerText = props.footerText, indentWidth = props.indentWidth, styles = props.styles, theme = props.theme;
  var classNames = getClassNames6(styles, { theme });
  if (group && footerText) {
    return React10.createElement(
      "div",
      { className: classNames.root },
      React10.createElement(GroupSpacer, { indentWidth, count: groupLevel }),
      footerText
    );
  }
  return null;
};

// node_modules/@fluentui/react/lib/components/GroupedList/GroupFooter.js
var GroupFooter = styled(GroupFooterBase, getStyles6, void 0, {
  scope: "GroupFooter"
});

// node_modules/@fluentui/react/lib/components/GroupedList/GroupedListSection.js
var React11 = __toESM(require_react());
var DEFAULT_DROPPING_CSS_CLASS = "is-dropping";
var GroupedListSection = function(_super) {
  __extends(GroupedListSection2, _super);
  function GroupedListSection2(props) {
    var _this = _super.call(this, props) || this;
    _this._root = React11.createRef();
    _this._list = React11.createRef();
    _this._subGroupRefs = {};
    _this._droppingClassName = "";
    _this._onRenderGroupHeader = function(props2) {
      return React11.createElement(GroupHeader, __assign({}, props2));
    };
    _this._onRenderGroupShowAll = function(props2) {
      return React11.createElement(GroupShowAll, __assign({}, props2));
    };
    _this._onRenderGroupFooter = function(props2) {
      return React11.createElement(GroupFooter, __assign({}, props2));
    };
    _this._renderSubGroup = function(subGroup, subGroupIndex) {
      var _a = _this.props, dragDropEvents = _a.dragDropEvents, dragDropHelper = _a.dragDropHelper, eventsToRegister = _a.eventsToRegister, getGroupItemLimit = _a.getGroupItemLimit, groupNestingDepth = _a.groupNestingDepth, groupProps = _a.groupProps, items = _a.items, headerProps = _a.headerProps, showAllProps = _a.showAllProps, footerProps = _a.footerProps, listProps = _a.listProps, onRenderCell = _a.onRenderCell, selection2 = _a.selection, selectionMode = _a.selectionMode, viewport = _a.viewport, onRenderGroupHeader = _a.onRenderGroupHeader, onRenderGroupShowAll = _a.onRenderGroupShowAll, onRenderGroupFooter = _a.onRenderGroupFooter, onShouldVirtualize = _a.onShouldVirtualize, group2 = _a.group, compact = _a.compact;
      var nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;
      return !subGroup || subGroup.count > 0 || groupProps && groupProps.showEmptyGroups ? React11.createElement(GroupedListSection2, { ref: function(ref) {
        return _this._subGroupRefs["subGroup_" + subGroupIndex] = ref;
      }, key: _this._getGroupKey(subGroup, subGroupIndex), dragDropEvents, dragDropHelper, eventsToRegister, footerProps, getGroupItemLimit, group: subGroup, groupIndex: subGroupIndex, groupNestingDepth: nestingDepth, groupProps, headerProps, items, listProps, onRenderCell, selection: selection2, selectionMode, showAllProps, viewport, onRenderGroupHeader, onRenderGroupShowAll, onRenderGroupFooter, onShouldVirtualize, groups: group2 ? group2.children : [], compact }) : null;
    };
    _this._getGroupDragDropOptions = function() {
      var _a = _this.props, group2 = _a.group, groupIndex = _a.groupIndex, dragDropEvents = _a.dragDropEvents, eventsToRegister = _a.eventsToRegister;
      var options = {
        eventMap: eventsToRegister,
        selectionIndex: -1,
        context: { data: group2, index: groupIndex, isGroup: true },
        updateDropState: _this._updateDroppingState,
        canDrag: dragDropEvents.canDrag,
        canDrop: dragDropEvents.canDrop,
        onDrop: dragDropEvents.onDrop,
        onDragStart: dragDropEvents.onDragStart,
        onDragEnter: dragDropEvents.onDragEnter,
        onDragLeave: dragDropEvents.onDragLeave,
        onDragEnd: dragDropEvents.onDragEnd,
        onDragOver: dragDropEvents.onDragOver
      };
      return options;
    };
    _this._updateDroppingState = function(newIsDropping, event) {
      var isDropping = _this.state.isDropping;
      var _a = _this.props, dragDropEvents = _a.dragDropEvents, group2 = _a.group;
      if (isDropping !== newIsDropping) {
        if (isDropping) {
          if (dragDropEvents && dragDropEvents.onDragLeave) {
            dragDropEvents.onDragLeave(group2, event);
          }
        } else {
          if (dragDropEvents && dragDropEvents.onDragEnter) {
            _this._droppingClassName = dragDropEvents.onDragEnter(group2, event);
          }
        }
        _this.setState({ isDropping: newIsDropping });
      }
    };
    var selection = props.selection, group = props.group;
    initializeComponentRef(_this);
    _this._id = getId("GroupedListSection");
    _this.state = {
      isDropping: false,
      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false
    };
    _this._events = new EventGroup(_this);
    return _this;
  }
  GroupedListSection2.prototype.componentDidMount = function() {
    var _a = this.props, dragDropHelper = _a.dragDropHelper, selection = _a.selection;
    if (dragDropHelper && this._root.current) {
      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());
    }
    if (selection) {
      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);
    }
  };
  GroupedListSection2.prototype.componentWillUnmount = function() {
    this._events.dispose();
    if (this._dragDropSubscription) {
      this._dragDropSubscription.dispose();
    }
  };
  GroupedListSection2.prototype.componentDidUpdate = function(previousProps) {
    if (this.props.group !== previousProps.group || this.props.groupIndex !== previousProps.groupIndex || this.props.dragDropHelper !== previousProps.dragDropHelper) {
      if (this._dragDropSubscription) {
        this._dragDropSubscription.dispose();
        delete this._dragDropSubscription;
      }
      if (this.props.dragDropHelper && this._root.current) {
        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());
      }
    }
  };
  GroupedListSection2.prototype.render = function() {
    var _a = this.props, getGroupItemLimit = _a.getGroupItemLimit, group = _a.group, groupIndex = _a.groupIndex, headerProps = _a.headerProps, showAllProps = _a.showAllProps, footerProps = _a.footerProps, viewport = _a.viewport, selectionMode = _a.selectionMode, _b = _a.onRenderGroupHeader, onRenderGroupHeader = _b === void 0 ? this._onRenderGroupHeader : _b, _c = _a.onRenderGroupShowAll, onRenderGroupShowAll = _c === void 0 ? this._onRenderGroupShowAll : _c, _d = _a.onRenderGroupFooter, onRenderGroupFooter = _d === void 0 ? this._onRenderGroupFooter : _d, onShouldVirtualize = _a.onShouldVirtualize, groupedListClassNames = _a.groupedListClassNames, groups = _a.groups, compact = _a.compact, _e = _a.listProps, listProps = _e === void 0 ? {} : _e;
    var isSelected = this.state.isSelected;
    var renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;
    var isShowAllVisible = group && !group.children && !group.isCollapsed && !group.isShowingAll && (group.count > renderCount || group.hasMoreData);
    var hasNestedGroups = group && group.children && group.children.length > 0;
    var version = listProps.version;
    var dividerProps = {
      group,
      groupIndex,
      groupLevel: group ? group.level : 0,
      isSelected,
      selected: isSelected,
      viewport,
      selectionMode,
      groups,
      compact
    };
    var ariaControlsProps = {
      groupedListId: this._id,
      ariaLevel: (group === null || group === void 0 ? void 0 : group.level) ? group.level + 1 : 1,
      ariaSetSize: groups ? groups.length : void 0,
      ariaPosInSet: groupIndex !== void 0 ? groupIndex + 1 : void 0
    };
    var groupHeaderProps = __assign(__assign(__assign({}, headerProps), dividerProps), ariaControlsProps);
    var groupShowAllProps = __assign(__assign({}, showAllProps), dividerProps);
    var groupFooterProps = __assign(__assign({}, footerProps), dividerProps);
    var isDraggable = !!this.props.dragDropHelper && this._getGroupDragDropOptions().canDrag(group) && !!this.props.dragDropEvents.canDragGroups;
    return React11.createElement(
      "div",
      __assign({ ref: this._root }, isDraggable && { draggable: true }, { className: css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName()), role: "presentation" }),
      onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader),
      group && group.isCollapsed ? null : hasNestedGroups ? React11.createElement(List, { role: "presentation", ref: this._list, items: group ? group.children : [], onRenderCell: this._renderSubGroup, getItemCountForPage: this._returnOne, onShouldVirtualize, version, id: this._id }) : this._onRenderGroup(renderCount),
      group && group.isCollapsed ? null : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll),
      onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)
    );
  };
  GroupedListSection2.prototype.forceUpdate = function() {
    _super.prototype.forceUpdate.call(this);
    this.forceListUpdate();
  };
  GroupedListSection2.prototype.forceListUpdate = function() {
    var group = this.props.group;
    if (this._list.current) {
      this._list.current.forceUpdate();
      if (group && group.children && group.children.length > 0) {
        var subGroupCount = group.children.length;
        for (var i = 0; i < subGroupCount; i++) {
          var subGroup = this._list.current.pageRefs["subGroup_" + String(i)];
          if (subGroup) {
            subGroup.forceListUpdate();
          }
        }
      }
    } else {
      var subGroup = this._subGroupRefs["subGroup_" + String(0)];
      if (subGroup) {
        subGroup.forceListUpdate();
      }
    }
  };
  GroupedListSection2.prototype._onSelectionChange = function() {
    var _a = this.props, group = _a.group, selection = _a.selection;
    if (selection && group) {
      var isSelected = selection.isRangeSelected(group.startIndex, group.count);
      if (isSelected !== this.state.isSelected) {
        this.setState({ isSelected });
      }
    }
  };
  GroupedListSection2.prototype._onRenderGroupCell = function(onRenderCell, groupNestingDepth, group) {
    return function(item, itemIndex) {
      return onRenderCell(groupNestingDepth, item, itemIndex, group);
    };
  };
  GroupedListSection2.prototype._onRenderGroup = function(renderCount) {
    var _a = this.props, group = _a.group, items = _a.items, onRenderCell = _a.onRenderCell, listProps = _a.listProps, groupNestingDepth = _a.groupNestingDepth, onShouldVirtualize = _a.onShouldVirtualize, groupProps = _a.groupProps;
    var count = group && !group.isShowingAll ? group.count : items.length;
    var startIndex = group ? group.startIndex : 0;
    return React11.createElement(List, __assign({ role: groupProps && groupProps.role ? groupProps.role : "rowgroup", "aria-label": group === null || group === void 0 ? void 0 : group.name, items, onRenderCell: this._onRenderGroupCell(onRenderCell, groupNestingDepth, group), ref: this._list, renderCount: Math.min(count, renderCount), startIndex, onShouldVirtualize, id: this._id }, listProps));
  };
  GroupedListSection2.prototype._returnOne = function() {
    return 1;
  };
  GroupedListSection2.prototype._getGroupKey = function(group, index) {
    return "group-" + (group && group.key ? group.key : String(group.level) + String(index));
  };
  GroupedListSection2.prototype._getDroppingClassName = function() {
    var isDropping = this.state.isDropping;
    var _a = this.props, group = _a.group, groupedListClassNames = _a.groupedListClassNames;
    isDropping = !!(group && isDropping);
    return css(isDropping && this._droppingClassName, isDropping && DEFAULT_DROPPING_CSS_CLASS, isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping);
  };
  return GroupedListSection2;
}(React11.Component);

// node_modules/@fluentui/react/lib/components/GroupedList/GroupedList.base.js
var React12 = __toESM(require_react());
var getClassNames7 = classNamesFunction();
var ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.rowHeight;
var COMPACT_ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.compactRowHeight;
var GroupedListBase = function(_super) {
  __extends(GroupedListBase2, _super);
  function GroupedListBase2(props) {
    var _this = _super.call(this, props) || this;
    _this._list = React12.createRef();
    _this._renderGroup = function(group, groupIndex) {
      var _a2 = _this.props, dragDropEvents = _a2.dragDropEvents, dragDropHelper = _a2.dragDropHelper, eventsToRegister = _a2.eventsToRegister, groupProps = _a2.groupProps, items = _a2.items, listProps = _a2.listProps, onRenderCell = _a2.onRenderCell, selectionMode = _a2.selectionMode, selection = _a2.selection, viewport = _a2.viewport, onShouldVirtualize = _a2.onShouldVirtualize, groups = _a2.groups, compact = _a2.compact;
      var dividerProps = {
        onToggleSelectGroup: _this._onToggleSelectGroup,
        onToggleCollapse: _this._onToggleCollapse,
        onToggleSummarize: _this._onToggleSummarize
      };
      var headerProps = __assign(__assign({}, groupProps.headerProps), dividerProps);
      var showAllProps = __assign(__assign({}, groupProps.showAllProps), dividerProps);
      var footerProps = __assign(__assign({}, groupProps.footerProps), dividerProps);
      var groupNestingDepth = _this._getGroupNestingDepth();
      if (!groupProps.showEmptyGroups && group && group.count === 0) {
        return null;
      }
      var finalListProps = __assign(__assign({}, listProps || {}), { version: _this.state.version });
      return React12.createElement(GroupedListSection, { key: _this._getGroupKey(group, groupIndex), dragDropEvents, dragDropHelper, eventsToRegister, footerProps, getGroupItemLimit: groupProps && groupProps.getGroupItemLimit, group, groupIndex, groupNestingDepth, groupProps, headerProps, listProps: finalListProps, items, onRenderCell, onRenderGroupHeader: groupProps.onRenderHeader, onRenderGroupShowAll: groupProps.onRenderShowAll, onRenderGroupFooter: groupProps.onRenderFooter, selectionMode, selection, showAllProps, viewport, onShouldVirtualize, groupedListClassNames: _this._classNames, groups, compact });
    };
    _this._getDefaultGroupItemLimit = function(group) {
      return group.children && group.children.length > 0 ? group.children.length : group.count;
    };
    _this._getGroupItemLimit = function(group) {
      var groupProps = _this.props.groupProps;
      var getGroupItemLimit = groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : _this._getDefaultGroupItemLimit;
      return getGroupItemLimit(group);
    };
    _this._getGroupHeight = function(group) {
      var rowHeight = _this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;
      return rowHeight + (group.isCollapsed ? 0 : rowHeight * _this._getGroupItemLimit(group));
    };
    _this._getPageHeight = function(itemIndex) {
      var groups = _this.state.groups;
      var _a2 = _this.props.getGroupHeight, getGroupHeight = _a2 === void 0 ? _this._getGroupHeight : _a2;
      var pageGroup = groups && groups[itemIndex];
      if (pageGroup) {
        return getGroupHeight(pageGroup, itemIndex);
      } else {
        return 0;
      }
    };
    _this._onToggleCollapse = function(group) {
      var groupProps = _this.props.groupProps;
      var onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;
      if (group) {
        if (onToggleCollapse) {
          onToggleCollapse(group);
        }
        group.isCollapsed = !group.isCollapsed;
        _this._updateIsSomeGroupExpanded();
        _this.forceUpdate();
      }
    };
    _this._onToggleSelectGroup = function(group) {
      var _a2 = _this.props, selection = _a2.selection, selectionMode = _a2.selectionMode;
      if (group && selection && selectionMode === SelectionMode.multiple) {
        selection.toggleRangeSelected(group.startIndex, group.count);
      }
    };
    _this._isInnerZoneKeystroke = function(ev) {
      return ev.which === getRTLSafeKeyCode(KeyCodes.right);
    };
    _this._onToggleSummarize = function(group) {
      var groupProps = _this.props.groupProps;
      var onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;
      if (onToggleSummarize) {
        onToggleSummarize(group);
      } else {
        if (group) {
          group.isShowingAll = !group.isShowingAll;
        }
        _this.forceUpdate();
      }
    };
    _this._getPageSpecification = function(itemIndex) {
      var groups = _this.state.groups;
      var pageGroup = groups && groups[itemIndex];
      return {
        key: pageGroup && pageGroup.key
      };
    };
    initializeComponentRef(_this);
    _this._isSomeGroupExpanded = _this._computeIsSomeGroupExpanded(props.groups);
    var _a = props.listProps, _b = _a === void 0 ? {} : _a, _c = _b.version, version = _c === void 0 ? {} : _c;
    _this.state = {
      groups: props.groups,
      items: props.items,
      listProps: props.listProps,
      version
    };
    return _this;
  }
  GroupedListBase2.getDerivedStateFromProps = function(nextProps, previousState) {
    var groups = nextProps.groups, selectionMode = nextProps.selectionMode, compact = nextProps.compact, items = nextProps.items, listProps = nextProps.listProps;
    var listVersion = listProps && listProps.version;
    var nextState = __assign(__assign({}, previousState), { selectionMode, compact, groups, listProps });
    var shouldForceUpdates = false;
    var previousListVersion = previousState.listProps && previousState.listProps.version;
    if (listVersion !== previousListVersion || items !== previousState.items || groups !== previousState.groups || selectionMode !== previousState.selectionMode || compact !== previousState.compact) {
      shouldForceUpdates = true;
    }
    if (groups !== previousState.groups) {
      nextState = __assign(__assign({}, nextState), { groups });
    }
    if (selectionMode !== previousState.selectionMode || compact !== previousState.compact) {
      shouldForceUpdates = true;
    }
    if (shouldForceUpdates) {
      nextState = __assign(__assign({}, nextState), { version: {} });
    }
    return nextState;
  };
  GroupedListBase2.prototype.scrollToIndex = function(index, measureItem, scrollToMode) {
    if (this._list.current) {
      this._list.current.scrollToIndex(index, measureItem, scrollToMode);
    }
  };
  GroupedListBase2.prototype.getStartItemIndexInView = function() {
    return this._list.current.getStartItemIndexInView() || 0;
  };
  GroupedListBase2.prototype.componentDidMount = function() {
    var _a = this.props, groupProps = _a.groupProps, _b = _a.groups, groups = _b === void 0 ? [] : _b;
    if (groupProps && groupProps.isAllGroupsCollapsed) {
      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);
    }
  };
  GroupedListBase2.prototype.render = function() {
    var _a = this.props, className = _a.className, usePageCache = _a.usePageCache, onShouldVirtualize = _a.onShouldVirtualize, theme = _a.theme, _b = _a.role, role = _b === void 0 ? "treegrid" : _b, styles = _a.styles, compact = _a.compact, _c = _a.focusZoneProps, focusZoneProps = _c === void 0 ? {} : _c, _d = _a.rootListProps, rootListProps = _d === void 0 ? {} : _d;
    var _e = this.state, groups = _e.groups, version = _e.version;
    this._classNames = getClassNames7(styles, {
      theme,
      className,
      compact
    });
    var _f = focusZoneProps.shouldEnterInnerZone, shouldEnterInnerZone = _f === void 0 ? this._isInnerZoneKeystroke : _f;
    return React12.createElement(FocusZone, __assign({ direction: FocusZoneDirection.vertical, "data-automationid": "GroupedList", "data-is-scrollable": "false", role: "presentation" }, focusZoneProps, { shouldEnterInnerZone, className: css(this._classNames.root, focusZoneProps.className) }), !groups ? this._renderGroup(void 0, 0) : React12.createElement(List, __assign({ ref: this._list, role, items: groups, onRenderCell: this._renderGroup, getItemCountForPage: this._returnOne, getPageHeight: this._getPageHeight, getPageSpecification: this._getPageSpecification, usePageCache, onShouldVirtualize, version }, rootListProps)));
  };
  GroupedListBase2.prototype.forceUpdate = function() {
    _super.prototype.forceUpdate.call(this);
    this._forceListUpdates();
  };
  GroupedListBase2.prototype.toggleCollapseAll = function(allCollapsed) {
    var _a = this.state.groups, groups = _a === void 0 ? [] : _a;
    var groupProps = this.props.groupProps;
    var onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;
    if (groups.length > 0) {
      if (onToggleCollapseAll) {
        onToggleCollapseAll(allCollapsed);
      }
      this._setGroupsCollapsedState(groups, allCollapsed);
      this._updateIsSomeGroupExpanded();
      this.forceUpdate();
    }
  };
  GroupedListBase2.prototype._setGroupsCollapsedState = function(groups, isCollapsed) {
    for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {
      groups[groupIndex].isCollapsed = isCollapsed;
    }
  };
  GroupedListBase2.prototype._returnOne = function() {
    return 1;
  };
  GroupedListBase2.prototype._getGroupKey = function(group, index) {
    return "group-" + (group && group.key ? group.key : String(index));
  };
  GroupedListBase2.prototype._getGroupNestingDepth = function() {
    var groups = this.state.groups;
    var level = 0;
    var groupsInLevel = groups;
    while (groupsInLevel && groupsInLevel.length > 0) {
      level++;
      groupsInLevel = groupsInLevel[0].children;
    }
    return level;
  };
  GroupedListBase2.prototype._forceListUpdates = function(groups) {
    this.setState({
      version: {}
    });
  };
  GroupedListBase2.prototype._computeIsSomeGroupExpanded = function(groups) {
    var _this = this;
    return !!(groups && groups.some(function(group) {
      return group.children ? _this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed;
    }));
  };
  GroupedListBase2.prototype._updateIsSomeGroupExpanded = function() {
    var groups = this.state.groups;
    var onGroupExpandStateChanged = this.props.onGroupExpandStateChanged;
    var newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);
    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {
      if (onGroupExpandStateChanged) {
        onGroupExpandStateChanged(newIsSomeGroupExpanded);
      }
      this._isSomeGroupExpanded = newIsSomeGroupExpanded;
    }
  };
  GroupedListBase2.defaultProps = {
    selectionMode: SelectionMode.multiple,
    isHeaderVisible: true,
    groupProps: {},
    compact: false
  };
  return GroupedListBase2;
}(React12.Component);

// node_modules/@fluentui/react/lib/components/GroupedList/GroupedList.styles.js
var GlobalClassNames8 = {
  root: "ms-GroupedList",
  compact: "ms-GroupedList--Compact",
  group: "ms-GroupedList-group",
  link: "ms-Link",
  listCell: "ms-List-cell"
};
var beziers2 = {
  easeInOutSine: "cubic-bezier(0.445, 0.050, 0.550, 0.950)"
};
var getStyles7 = function(props) {
  var _a, _b;
  var theme = props.theme, className = props.className, compact = props.compact;
  var palette = theme.palette;
  var classNames = getGlobalClassNames(GlobalClassNames8, theme);
  return {
    root: [
      classNames.root,
      theme.fonts.small,
      {
        position: "relative",
        selectors: (_a = {}, _a["." + classNames.listCell] = {
          minHeight: 38
        }, _a)
      },
      compact && [
        classNames.compact,
        {
          selectors: (_b = {}, _b["." + classNames.listCell] = {
            minHeight: 32
          }, _b)
        }
      ],
      className
    ],
    group: [
      classNames.group,
      {
        transition: "background-color " + AnimationVariables.durationValue2 + " " + beziers2.easeInOutSine
      }
    ],
    groupIsDropping: {
      backgroundColor: palette.neutralLight
    }
  };
};

// node_modules/@fluentui/react/lib/components/GroupedList/GroupedList.js
var GroupedList = styled(GroupedListBase, getStyles7, void 0, {
  scope: "GroupedList"
});

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsRowCheck.js
var React13 = __toESM(require_react());
var getClassNames8 = classNamesFunction();
var DetailsRowCheckBase = function(props) {
  var _a = props.isVisible, isVisible = _a === void 0 ? false : _a, _b = props.canSelect, canSelect = _b === void 0 ? false : _b, _c = props.anySelected, anySelected = _c === void 0 ? false : _c, _d = props.selected, selected = _d === void 0 ? false : _d, selectionMode = props.selectionMode, _e = props.isHeader, isHeader = _e === void 0 ? false : _e, className = props.className, checkClassName = props.checkClassName, styles = props.styles, theme = props.theme, compact = props.compact, onRenderDetailsCheckbox = props.onRenderDetailsCheckbox, _f = props.useFastIcons, useFastIcons = _f === void 0 ? true : _f, buttonProps = __rest(props, ["isVisible", "canSelect", "anySelected", "selected", "selectionMode", "isHeader", "className", "checkClassName", "styles", "theme", "compact", "onRenderDetailsCheckbox", "useFastIcons"]);
  var defaultCheckboxRender = useFastIcons ? _fastDefaultCheckboxRender : _defaultCheckboxRender;
  var onRenderCheckbox = onRenderDetailsCheckbox ? composeRenderFunction(onRenderDetailsCheckbox, defaultCheckboxRender) : defaultCheckboxRender;
  var classNames = getClassNames8(styles, {
    theme,
    canSelect,
    selected,
    anySelected,
    className,
    isHeader,
    isVisible,
    compact
  });
  var detailsCheckboxProps = {
    checked: selected,
    theme
  };
  var divProps = getNativeElementProps("div", buttonProps, ["aria-label", "aria-labelledby", "aria-describedby"]);
  var checkRole = selectionMode === SelectionMode.single ? "radio" : "checkbox";
  return canSelect ? React13.createElement("div", __assign({}, buttonProps, {
    role: checkRole,
    className: css(classNames.root, classNames.check),
    "aria-checked": selected,
    "data-selection-toggle": true,
    "data-automationid": "DetailsRowCheck",
    tabIndex: -1
  }), onRenderCheckbox(detailsCheckboxProps)) : React13.createElement("div", __assign({}, divProps, { className: css(classNames.root, classNames.check) }));
};
var FastCheck2 = React13.memo(function(props) {
  return React13.createElement(Check, { theme: props.theme, checked: props.checked, className: props.className, useFastIcons: true });
});
function _defaultCheckboxRender(checkboxProps) {
  return React13.createElement(Check, { checked: checkboxProps.checked });
}
function _fastDefaultCheckboxRender(checkboxProps) {
  return React13.createElement(FastCheck2, { theme: checkboxProps.theme, checked: checkboxProps.checked });
}
var DetailsRowCheck = styled(DetailsRowCheckBase, getDetailsRowCheckStyles, void 0, { scope: "DetailsRowCheck" }, true);

// node_modules/@fluentui/react/lib/utilities/dragdrop/DragDropHelper.js
var MOUSEDOWN_PRIMARY_BUTTON = 0;
var MOUSEMOVE_PRIMARY_BUTTON = 1;
var DragDropHelper = function() {
  function DragDropHelper2(params) {
    this._selection = params.selection;
    this._dragEnterCounts = {};
    this._activeTargets = {};
    this._lastId = 0;
    this._initialized = false;
  }
  DragDropHelper2.prototype.dispose = function() {
    if (this._events) {
      this._events.dispose();
    }
  };
  DragDropHelper2.prototype.subscribe = function(root, events, dragDropOptions) {
    var _this = this;
    if (!this._initialized) {
      this._events = new EventGroup(this);
      var doc = getDocument();
      if (doc) {
        this._events.on(doc.body, "mouseup", this._onMouseUp.bind(this), true);
        this._events.on(doc, "mouseup", this._onDocumentMouseUp.bind(this), true);
      }
      this._initialized = true;
    }
    var _a = dragDropOptions.key, key = _a === void 0 ? "" + ++this._lastId : _a;
    var handlers = [];
    var onDragStart;
    var onDragLeave;
    var onDragEnter;
    var onDragEnd;
    var onDrop;
    var onDragOver;
    var onMouseDown;
    var isDraggable;
    var isDroppable;
    var activeTarget;
    if (dragDropOptions && root) {
      var eventMap = dragDropOptions.eventMap, context = dragDropOptions.context, updateDropState_1 = dragDropOptions.updateDropState;
      var dragDropTarget = {
        root,
        options: dragDropOptions,
        key
      };
      isDraggable = this._isDraggable(dragDropTarget);
      isDroppable = this._isDroppable(dragDropTarget);
      if (isDraggable || isDroppable) {
        if (eventMap) {
          for (var _i = 0, eventMap_1 = eventMap; _i < eventMap_1.length; _i++) {
            var event_1 = eventMap_1[_i];
            var handler = {
              callback: event_1.callback.bind(null, context),
              eventName: event_1.eventName
            };
            handlers.push(handler);
            this._events.on(root, handler.eventName, handler.callback);
          }
        }
      }
      if (isDroppable) {
        onDragLeave = function(event) {
          if (!event.isHandled) {
            event.isHandled = true;
            _this._dragEnterCounts[key]--;
            if (_this._dragEnterCounts[key] === 0) {
              updateDropState_1(false, event);
            }
          }
        };
        onDragEnter = function(event) {
          event.preventDefault();
          if (!event.isHandled) {
            event.isHandled = true;
            _this._dragEnterCounts[key]++;
            if (_this._dragEnterCounts[key] === 1) {
              updateDropState_1(true, event);
            }
          }
        };
        onDragEnd = function(event) {
          _this._dragEnterCounts[key] = 0;
          updateDropState_1(false, event);
        };
        onDrop = function(event) {
          _this._dragEnterCounts[key] = 0;
          updateDropState_1(false, event);
          if (dragDropOptions.onDrop) {
            dragDropOptions.onDrop(dragDropOptions.context.data, event);
          }
        };
        onDragOver = function(event) {
          event.preventDefault();
          if (dragDropOptions.onDragOver) {
            dragDropOptions.onDragOver(dragDropOptions.context.data, event);
          }
        };
        this._dragEnterCounts[key] = 0;
        events.on(root, "dragenter", onDragEnter);
        events.on(root, "dragleave", onDragLeave);
        events.on(root, "dragend", onDragEnd);
        events.on(root, "drop", onDrop);
        events.on(root, "dragover", onDragOver);
      }
      if (isDraggable) {
        onMouseDown = this._onMouseDown.bind(this, dragDropTarget);
        onDragEnd = this._onDragEnd.bind(this, dragDropTarget);
        onDragStart = function(event) {
          var options = dragDropOptions;
          if (options && options.onDragStart) {
            options.onDragStart(options.context.data, options.context.index, _this._selection.getSelection(), event);
          }
          _this._isDragging = true;
          if (event.dataTransfer) {
            event.dataTransfer.setData("id", root.id);
          }
        };
        events.on(root, "dragstart", onDragStart);
        events.on(root, "mousedown", onMouseDown);
        events.on(root, "dragend", onDragEnd);
      }
      activeTarget = {
        target: dragDropTarget,
        dispose: function() {
          if (_this._activeTargets[key] === activeTarget) {
            delete _this._activeTargets[key];
          }
          if (root) {
            for (var _i2 = 0, handlers_1 = handlers; _i2 < handlers_1.length; _i2++) {
              var handler2 = handlers_1[_i2];
              _this._events.off(root, handler2.eventName, handler2.callback);
            }
            if (isDroppable) {
              events.off(root, "dragenter", onDragEnter);
              events.off(root, "dragleave", onDragLeave);
              events.off(root, "dragend", onDragEnd);
              events.off(root, "dragover", onDragOver);
              events.off(root, "drop", onDrop);
            }
            if (isDraggable) {
              events.off(root, "dragstart", onDragStart);
              events.off(root, "mousedown", onMouseDown);
              events.off(root, "dragend", onDragEnd);
            }
          }
        }
      };
      this._activeTargets[key] = activeTarget;
    }
    return {
      key,
      dispose: function() {
        if (activeTarget) {
          activeTarget.dispose();
        }
      }
    };
  };
  DragDropHelper2.prototype.unsubscribe = function(root, key) {
    var activeTarget = this._activeTargets[key];
    if (activeTarget) {
      activeTarget.dispose();
    }
  };
  DragDropHelper2.prototype._onDragEnd = function(target, event) {
    var options = target.options;
    if (options.onDragEnd) {
      options.onDragEnd(options.context.data, event);
    }
  };
  DragDropHelper2.prototype._onMouseUp = function(event) {
    this._isDragging = false;
    if (this._dragData) {
      for (var _i = 0, _a = Object.keys(this._activeTargets); _i < _a.length; _i++) {
        var key = _a[_i];
        var activeTarget = this._activeTargets[key];
        if (activeTarget.target.root) {
          this._events.off(activeTarget.target.root, "mousemove");
          this._events.off(activeTarget.target.root, "mouseleave");
        }
      }
      if (this._dragData.dropTarget) {
        EventGroup.raise(this._dragData.dropTarget.root, "dragleave");
        EventGroup.raise(this._dragData.dropTarget.root, "drop");
      }
    }
    this._dragData = null;
  };
  DragDropHelper2.prototype._onDocumentMouseUp = function(event) {
    var doc = getDocument();
    if (doc && event.target === doc.documentElement) {
      this._onMouseUp(event);
    }
  };
  DragDropHelper2.prototype._onMouseMove = function(target, event) {
    var _a = event.buttons, buttons = _a === void 0 ? MOUSEMOVE_PRIMARY_BUTTON : _a;
    if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {
      this._onMouseUp(event);
      return;
    }
    var root = target.root, key = target.key;
    if (this._isDragging) {
      if (this._isDroppable(target)) {
        if (this._dragData) {
          if (this._dragData.dropTarget && this._dragData.dropTarget.key !== key && !this._isChild(root, this._dragData.dropTarget.root)) {
            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {
              EventGroup.raise(this._dragData.dropTarget.root, "dragleave");
              EventGroup.raise(root, "dragenter");
              this._dragData.dropTarget = target;
            }
          }
        }
      }
    }
  };
  DragDropHelper2.prototype._onMouseLeave = function(target, event) {
    if (this._isDragging) {
      if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {
        EventGroup.raise(target.root, "dragleave");
        this._dragData.dropTarget = void 0;
      }
    }
  };
  DragDropHelper2.prototype._onMouseDown = function(target, event) {
    if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {
      return;
    }
    if (this._isDraggable(target)) {
      this._dragData = {
        clientX: event.clientX,
        clientY: event.clientY,
        eventTarget: event.target,
        dragTarget: target
      };
      for (var _i = 0, _a = Object.keys(this._activeTargets); _i < _a.length; _i++) {
        var key = _a[_i];
        var activeTarget = this._activeTargets[key];
        if (activeTarget.target.root) {
          this._events.on(activeTarget.target.root, "mousemove", this._onMouseMove.bind(this, activeTarget.target));
          this._events.on(activeTarget.target.root, "mouseleave", this._onMouseLeave.bind(this, activeTarget.target));
        }
      }
    } else {
      this._dragData = null;
    }
  };
  DragDropHelper2.prototype._isChild = function(parentElement, childElement) {
    while (childElement && childElement.parentElement) {
      if (childElement.parentElement === parentElement) {
        return true;
      }
      childElement = childElement.parentElement;
    }
    return false;
  };
  DragDropHelper2.prototype._isDraggable = function(target) {
    var options = target.options;
    return !!(options.canDrag && options.canDrag(options.context.data));
  };
  DragDropHelper2.prototype._isDroppable = function(target) {
    var options = target.options;
    var dragContext = this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : void 0;
    return !!(options.canDrop && options.canDrop(options.context, dragContext));
  };
  return DragDropHelper2;
}();

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsColumn.base.js
var React14 = __toESM(require_react());
var MOUSEDOWN_PRIMARY_BUTTON2 = 0;
var getClassNames9 = classNamesFunction();
var TRANSITION_DURATION_DRAG = 200;
var TRANSITION_DURATION_DROP = 1500;
var CLASSNAME_ADD_INTERVAL = 20;
var defaultOnRenderHeader = function(classNames) {
  return function(props) {
    if (!props) {
      return null;
    }
    if (props.column.isIconOnly) {
      return React14.createElement("span", { className: classNames.accessibleLabel }, props.column.name);
    }
    return React14.createElement(React14.Fragment, null, props.column.name);
  };
};
var DetailsColumnBase = function(_super) {
  __extends(DetailsColumnBase2, _super);
  function DetailsColumnBase2(props) {
    var _this = _super.call(this, props) || this;
    _this._root = React14.createRef();
    _this._onRenderFilterIcon = function(classNames) {
      return function(props2) {
        var columnProps = props2.columnProps, iconProps = __rest(props2, ["columnProps"]);
        var IconComponent = (columnProps === null || columnProps === void 0 ? void 0 : columnProps.useFastIcons) ? FontIcon : Icon;
        return React14.createElement(IconComponent, __assign({}, iconProps));
      };
    };
    _this._onRenderColumnHeaderTooltip = function(tooltipHostProps) {
      return React14.createElement("span", { className: tooltipHostProps.hostClassName }, tooltipHostProps.children);
    };
    _this._onColumnClick = function(ev) {
      var _a = _this.props, onColumnClick = _a.onColumnClick, column = _a.column;
      if (column.columnActionsMode === ColumnActionsMode.disabled) {
        return;
      }
      if (column.onColumnClick) {
        column.onColumnClick(ev, column);
      }
      if (onColumnClick) {
        onColumnClick(ev, column);
      }
    };
    _this._onDragStart = function(item, itemIndex, selectedItems, event) {
      var classNames = _this._classNames;
      if (itemIndex) {
        _this._updateHeaderDragInfo(itemIndex);
        _this._root.current.classList.add(classNames.borderWhileDragging);
        _this._async.setTimeout(function() {
          if (_this._root.current) {
            _this._root.current.classList.add(classNames.noBorderWhileDragging);
          }
        }, CLASSNAME_ADD_INTERVAL);
      }
    };
    _this._onDragEnd = function(item, event) {
      var classNames = _this._classNames;
      if (event) {
        _this._updateHeaderDragInfo(-1, event);
      }
      _this._root.current.classList.remove(classNames.borderWhileDragging);
      _this._root.current.classList.remove(classNames.noBorderWhileDragging);
    };
    _this._updateHeaderDragInfo = function(itemIndex, event) {
      if (_this.props.setDraggedItemIndex) {
        _this.props.setDraggedItemIndex(itemIndex);
      }
      if (_this.props.updateDragInfo) {
        _this.props.updateDragInfo({ itemIndex }, event);
      }
    };
    _this._onColumnContextMenu = function(ev) {
      var _a = _this.props, onColumnContextMenu = _a.onColumnContextMenu, column = _a.column;
      if (column.onColumnContextMenu) {
        column.onColumnContextMenu(column, ev);
        ev.preventDefault();
      }
      if (onColumnContextMenu) {
        onColumnContextMenu(column, ev);
        ev.preventDefault();
      }
    };
    _this._onRootMouseDown = function(ev) {
      var isDraggable = _this.props.isDraggable;
      if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON2) {
        ev.stopPropagation();
      }
    };
    initializeComponentRef(_this);
    _this._async = new Async(_this);
    _this._events = new EventGroup(_this);
    return _this;
  }
  DetailsColumnBase2.prototype.render = function() {
    var _a = this.props, column = _a.column, parentId = _a.parentId, isDraggable = _a.isDraggable, styles = _a.styles, theme = _a.theme, _b = _a.cellStyleProps, cellStyleProps = _b === void 0 ? DEFAULT_CELL_STYLE_PROPS : _b, _c = _a.useFastIcons, useFastIcons = _c === void 0 ? true : _c;
    var _d = this.props.onRenderColumnHeaderTooltip, onRenderColumnHeaderTooltip = _d === void 0 ? this._onRenderColumnHeaderTooltip : _d;
    this._classNames = getClassNames9(styles, {
      theme,
      headerClassName: column.headerClassName,
      iconClassName: column.iconClassName,
      isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,
      isEmpty: !column.name,
      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,
      isPadded: column.isPadded,
      isIconOnly: column.isIconOnly,
      cellStyleProps,
      transitionDurationDrag: TRANSITION_DURATION_DRAG,
      transitionDurationDrop: TRANSITION_DURATION_DROP
    });
    var classNames = this._classNames;
    var IconComponent = useFastIcons ? FontIcon : Icon;
    var onRenderFilterIcon = column.onRenderFilterIcon ? composeRenderFunction(column.onRenderFilterIcon, this._onRenderFilterIcon(this._classNames)) : this._onRenderFilterIcon(this._classNames);
    var onRenderHeader = column.onRenderHeader ? composeRenderFunction(column.onRenderHeader, defaultOnRenderHeader(this._classNames)) : defaultOnRenderHeader(this._classNames);
    var hasInnerButton = column.columnActionsMode !== ColumnActionsMode.disabled && (column.onColumnClick !== void 0 || this.props.onColumnClick !== void 0);
    var accNameDescription = {
      "aria-label": column.ariaLabel ? column.ariaLabel : column.isIconOnly ? column.name : void 0,
      "aria-labelledby": column.ariaLabel || column.isIconOnly ? void 0 : parentId + "-" + column.key + "-name",
      "aria-describedby": !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleDescription() ? parentId + "-" + column.key + "-tooltip" : void 0
    };
    return React14.createElement(
      React14.Fragment,
      null,
      React14.createElement(
        "div",
        __assign({ key: column.key, ref: this._root, role: "columnheader" }, !hasInnerButton && accNameDescription, { "aria-sort": column.isSorted ? column.isSortedDescending ? "descending" : "ascending" : "none", "data-is-focusable": !hasInnerButton && column.columnActionsMode !== ColumnActionsMode.disabled ? "true" : void 0, className: classNames.root, "data-is-draggable": isDraggable, draggable: isDraggable, style: {
          width: column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)
        }, "data-automationid": "ColumnsHeaderColumn", "data-item-key": column.key }),
        isDraggable && React14.createElement(IconComponent, { iconName: "GripperBarVertical", className: classNames.gripperBarVerticalStyle }),
        onRenderColumnHeaderTooltip({
          hostClassName: classNames.cellTooltip,
          id: parentId + "-" + column.key + "-tooltip",
          setAriaDescribedBy: false,
          column,
          content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : "",
          children: React14.createElement(
            "span",
            __assign({ id: parentId + "-" + column.key, className: classNames.cellTitle, "data-is-focusable": hasInnerButton && column.columnActionsMode !== ColumnActionsMode.disabled ? "true" : void 0, role: hasInnerButton ? "button" : void 0 }, hasInnerButton && accNameDescription, { onContextMenu: this._onColumnContextMenu, onClick: this._onColumnClick, "aria-haspopup": column.columnActionsMode === ColumnActionsMode.hasDropdown ? "menu" : void 0, "aria-expanded": column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : void 0 }),
            React14.createElement(
              "span",
              { id: parentId + "-" + column.key + "-name", className: classNames.cellName },
              (column.iconName || column.iconClassName) && React14.createElement(IconComponent, { className: classNames.iconClassName, iconName: column.iconName }),
              onRenderHeader(this.props)
            ),
            column.isFiltered && React14.createElement(IconComponent, { className: classNames.nearIcon, iconName: "Filter" }),
            (column.isSorted || column.showSortIconWhenUnsorted) && React14.createElement(IconComponent, { className: classNames.sortIcon, iconName: column.isSorted ? column.isSortedDescending ? "SortDown" : "SortUp" : "Sort" }),
            column.isGrouped && React14.createElement(IconComponent, { className: classNames.nearIcon, iconName: "GroupedDescending" }),
            column.columnActionsMode === ColumnActionsMode.hasDropdown && !column.isIconOnly && onRenderFilterIcon({
              "aria-hidden": true,
              columnProps: this.props,
              className: classNames.filterChevron,
              iconName: "ChevronDown"
            })
          )
        }, this._onRenderColumnHeaderTooltip)
      ),
      !this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleDescription() : null
    );
  };
  DetailsColumnBase2.prototype.componentDidMount = function() {
    var _this = this;
    if (this.props.dragDropHelper && this.props.isDraggable) {
      this._addDragDropHandling();
    }
    var classNames = this._classNames;
    if (this.props.isDropped) {
      if (this._root.current) {
        this._root.current.classList.add(classNames.borderAfterDropping);
        this._async.setTimeout(function() {
          if (_this._root.current) {
            _this._root.current.classList.add(classNames.noBorderAfterDropping);
          }
        }, CLASSNAME_ADD_INTERVAL);
      }
      this._async.setTimeout(function() {
        if (_this._root.current) {
          _this._root.current.classList.remove(classNames.borderAfterDropping);
          _this._root.current.classList.remove(classNames.noBorderAfterDropping);
        }
      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);
    }
  };
  DetailsColumnBase2.prototype.componentWillUnmount = function() {
    if (this._dragDropSubscription) {
      this._dragDropSubscription.dispose();
      delete this._dragDropSubscription;
    }
    this._async.dispose();
    this._events.dispose();
  };
  DetailsColumnBase2.prototype.componentDidUpdate = function() {
    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {
      this._addDragDropHandling();
    }
    if (this._dragDropSubscription && !this.props.isDraggable) {
      this._dragDropSubscription.dispose();
      this._events.off(this._root.current, "mousedown");
      delete this._dragDropSubscription;
    }
  };
  DetailsColumnBase2.prototype._getColumnDragDropOptions = function() {
    var _this = this;
    var columnIndex = this.props.columnIndex;
    var options = {
      selectionIndex: columnIndex,
      context: { data: columnIndex, index: columnIndex },
      canDrag: function() {
        return _this.props.isDraggable;
      },
      canDrop: function() {
        return false;
      },
      onDragStart: this._onDragStart,
      updateDropState: function() {
        return void 0;
      },
      onDrop: function() {
        return void 0;
      },
      onDragEnd: this._onDragEnd
    };
    return options;
  };
  DetailsColumnBase2.prototype._hasAccessibleDescription = function() {
    var column = this.props.column;
    return !!(column.filterAriaLabel || column.sortAscendingAriaLabel || column.sortDescendingAriaLabel || column.groupAriaLabel || column.sortableAriaLabel);
  };
  DetailsColumnBase2.prototype._renderAccessibleDescription = function() {
    var _a = this.props, column = _a.column, parentId = _a.parentId;
    var classNames = this._classNames;
    return this._hasAccessibleDescription() && !this.props.onRenderColumnHeaderTooltip ? React14.createElement(
      "label",
      { key: column.key + "_label", id: parentId + "-" + column.key + "-tooltip", className: classNames.accessibleLabel, hidden: true },
      column.isFiltered && column.filterAriaLabel || null,
      (column.isSorted || column.showSortIconWhenUnsorted) && (column.isSorted ? column.isSortedDescending ? column.sortDescendingAriaLabel : column.sortAscendingAriaLabel : column.sortableAriaLabel) || null,
      column.isGrouped && column.groupAriaLabel || null
    ) : null;
  };
  DetailsColumnBase2.prototype._addDragDropHandling = function() {
    this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getColumnDragDropOptions());
    this._events.on(this._root.current, "mousedown", this._onRootMouseDown);
  };
  return DetailsColumnBase2;
}(React14.Component);

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsColumn.styles.js
var GlobalClassNames9 = {
  isActionable: "is-actionable",
  cellIsCheck: "ms-DetailsHeader-cellIsCheck",
  collapseButton: "ms-DetailsHeader-collapseButton",
  isCollapsed: "is-collapsed",
  isAllSelected: "is-allSelected",
  isSelectAllHidden: "is-selectAllHidden",
  isResizingColumn: "is-resizingColumn",
  isEmpty: "is-empty",
  isIconVisible: "is-icon-visible",
  cellSizer: "ms-DetailsHeader-cellSizer",
  isResizing: "is-resizing",
  dropHintCircleStyle: "ms-DetailsHeader-dropHintCircleStyle",
  dropHintLineStyle: "ms-DetailsHeader-dropHintLineStyle",
  cellTitle: "ms-DetailsHeader-cellTitle",
  cellName: "ms-DetailsHeader-cellName",
  filterChevron: "ms-DetailsHeader-filterChevron",
  gripperBarVerticalStyle: "ms-DetailsColumn-gripperBar",
  nearIcon: "ms-DetailsColumn-nearIcon"
};
var getDetailsColumnStyles = function(props) {
  var _a;
  var theme = props.theme, headerClassName = props.headerClassName, iconClassName = props.iconClassName, isActionable = props.isActionable, isEmpty = props.isEmpty, isIconVisible = props.isIconVisible, isPadded = props.isPadded, isIconOnly = props.isIconOnly, _b = props.cellStyleProps, cellStyleProps = _b === void 0 ? DEFAULT_CELL_STYLE_PROPS : _b, transitionDurationDrag = props.transitionDurationDrag, transitionDurationDrop = props.transitionDurationDrop;
  var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;
  var classNames = getGlobalClassNames(GlobalClassNames9, theme);
  var colors = {
    iconForegroundColor: semanticColors.bodySubtext,
    headerForegroundColor: semanticColors.bodyText,
    headerBackgroundColor: semanticColors.bodyBackground,
    dropdownChevronForegroundColor: palette.neutralSecondary,
    resizerColor: palette.neutralTertiaryAlt
  };
  var nearIconStyle = {
    color: colors.iconForegroundColor,
    opacity: 1,
    paddingLeft: 8
  };
  var borderWhileDragging = {
    outline: "1px solid " + palette.themePrimary
  };
  var borderAfterDragOrDrop = {
    outlineColor: "transparent"
  };
  return {
    root: [
      getCellStyles(props),
      fonts.small,
      isActionable && [
        classNames.isActionable,
        {
          selectors: {
            ":hover": {
              color: semanticColors.bodyText,
              background: semanticColors.listHeaderBackgroundHovered
            },
            ":active": {
              background: semanticColors.listHeaderBackgroundPressed
            }
          }
        }
      ],
      isEmpty && [
        classNames.isEmpty,
        {
          textOverflow: "clip"
        }
      ],
      isIconVisible && classNames.isIconVisible,
      isPadded && {
        paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding
      },
      {
        selectors: {
          ':hover i[data-icon-name="GripperBarVertical"]': {
            display: "block"
          }
        }
      },
      headerClassName
    ],
    gripperBarVerticalStyle: {
      display: "none",
      position: "absolute",
      textAlign: "left",
      color: palette.neutralTertiary,
      left: 1
    },
    nearIcon: [classNames.nearIcon, nearIconStyle],
    sortIcon: [
      nearIconStyle,
      {
        paddingLeft: 4,
        position: "relative",
        top: 1
      }
    ],
    iconClassName: [
      {
        color: colors.iconForegroundColor,
        opacity: 1
      },
      iconClassName
    ],
    filterChevron: [
      classNames.filterChevron,
      {
        color: colors.dropdownChevronForegroundColor,
        paddingLeft: 6,
        verticalAlign: "middle",
        fontSize: fonts.small.fontSize
      }
    ],
    cellTitle: [
      classNames.cellTitle,
      getFocusStyle(theme),
      __assign({ display: "flex", flexDirection: "row", justifyContent: "flex-start", alignItems: "stretch", boxSizing: "border-box", overflow: "hidden", padding: "0 " + cellStyleProps.cellRightPadding + "px 0 " + cellStyleProps.cellLeftPadding + "px" }, isIconOnly ? {
        alignContent: "flex-end",
        maxHeight: "100%",
        flexWrap: "wrap-reverse"
      } : {})
    ],
    cellName: [
      classNames.cellName,
      {
        flex: "0 1 auto",
        overflow: "hidden",
        textOverflow: "ellipsis",
        fontWeight: FontWeights.semibold,
        fontSize: fonts.medium.fontSize
      },
      isIconOnly && {
        selectors: (_a = {}, _a["." + classNames.nearIcon] = {
          paddingLeft: 0
        }, _a)
      }
    ],
    cellTooltip: {
      display: "block",
      position: "absolute",
      top: 0,
      left: 0,
      bottom: 0,
      right: 0
    },
    accessibleLabel: hiddenContentStyle,
    borderWhileDragging,
    noBorderWhileDragging: [borderAfterDragOrDrop, { transition: "outline " + transitionDurationDrag + "ms ease" }],
    borderAfterDropping: borderWhileDragging,
    noBorderAfterDropping: [borderAfterDragOrDrop, { transition: "outline  " + transitionDurationDrop + "ms ease" }]
  };
};

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsColumn.js
var DetailsColumn = styled(DetailsColumnBase, getDetailsColumnStyles, void 0, { scope: "DetailsColumn" });

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsHeader.types.js
var SelectAllVisibility;
(function(SelectAllVisibility2) {
  SelectAllVisibility2[SelectAllVisibility2["none"] = 0] = "none";
  SelectAllVisibility2[SelectAllVisibility2["hidden"] = 1] = "hidden";
  SelectAllVisibility2[SelectAllVisibility2["visible"] = 2] = "visible";
})(SelectAllVisibility || (SelectAllVisibility = {}));

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsHeader.base.js
var React15 = __toESM(require_react());
var getClassNames10 = classNamesFunction();
var MOUSEDOWN_PRIMARY_BUTTON3 = 0;
var MOUSEMOVE_PRIMARY_BUTTON2 = 1;
var NO_COLUMNS = [];
var DetailsHeaderBase = function(_super) {
  __extends(DetailsHeaderBase2, _super);
  function DetailsHeaderBase2(props) {
    var _this = _super.call(this, props) || this;
    _this._rootElement = React15.createRef();
    _this._rootComponent = React15.createRef();
    _this._draggedColumnIndex = -1;
    _this._dropHintDetails = {};
    _this._updateDroppingState = function(newValue, event) {
      if (_this._draggedColumnIndex >= 0 && event.type !== "drop" && !newValue) {
        _this._resetDropHints();
      }
    };
    _this._onDragOver = function(item, event) {
      if (_this._draggedColumnIndex >= 0) {
        event.stopPropagation();
        _this._computeDropHintToBeShown(event.clientX);
      }
    };
    _this._onDrop = function(item, event) {
      var columnReorderProps = _this._getColumnReorderProps();
      if (_this._draggedColumnIndex >= 0 && event) {
        var targetIndex = _this._draggedColumnIndex > _this._currentDropHintIndex ? _this._currentDropHintIndex : _this._currentDropHintIndex - 1;
        var isValidDrop = _this._isValidCurrentDropHintIndex();
        event.stopPropagation();
        if (isValidDrop) {
          _this._onDropIndexInfo.sourceIndex = _this._draggedColumnIndex;
          _this._onDropIndexInfo.targetIndex = targetIndex;
          if (columnReorderProps.onColumnDrop) {
            var dragDropDetails = {
              draggedIndex: _this._draggedColumnIndex,
              targetIndex
            };
            columnReorderProps.onColumnDrop(dragDropDetails);
          } else if (columnReorderProps.handleColumnReorder) {
            columnReorderProps.handleColumnReorder(_this._draggedColumnIndex, targetIndex);
          }
        }
      }
      _this._resetDropHints();
      _this._dropHintDetails = {};
      _this._draggedColumnIndex = -1;
    };
    _this._updateDragInfo = function(props2, event) {
      var columnReorderProps = _this._getColumnReorderProps();
      var itemIndex = props2.itemIndex;
      if (itemIndex >= 0) {
        _this._draggedColumnIndex = _this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;
        _this._getDropHintPositions();
        if (columnReorderProps.onColumnDragStart) {
          columnReorderProps.onColumnDragStart(true);
        }
      } else if (event && _this._draggedColumnIndex >= 0) {
        _this._resetDropHints();
        _this._draggedColumnIndex = -1;
        _this._dropHintDetails = {};
        if (columnReorderProps.onColumnDragEnd) {
          var columnDragEndLocation = _this._isEventOnHeader(event);
          columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);
        }
      }
    };
    _this._getDropHintPositions = function() {
      var _a = _this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;
      var columnReorderProps = _this._getColumnReorderProps();
      var prevX = 0;
      var prevMid = 0;
      var prevRef;
      var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;
      var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;
      for (var i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {
        if (_this._rootElement.current) {
          var dropHintElement = _this._rootElement.current.querySelectorAll("#columnDropHint_" + i)[0];
          if (dropHintElement) {
            if (i === frozenColumnCountFromStart) {
              prevX = dropHintElement.offsetLeft;
              prevMid = dropHintElement.offsetLeft;
              prevRef = dropHintElement;
            } else {
              var newMid = (dropHintElement.offsetLeft + prevX) / 2;
              _this._dropHintDetails[i - 1] = {
                originX: prevX,
                startX: prevMid,
                endX: newMid,
                dropHintElementRef: prevRef
              };
              prevMid = newMid;
              prevRef = dropHintElement;
              prevX = dropHintElement.offsetLeft;
              if (i === columns.length - frozenColumnCountFromEnd) {
                _this._dropHintDetails[i] = {
                  originX: prevX,
                  startX: prevMid,
                  endX: dropHintElement.offsetLeft,
                  dropHintElementRef: prevRef
                };
              }
            }
          }
        }
      }
    };
    _this._computeDropHintToBeShown = function(clientX) {
      var isRtl = getRTL(_this.props.theme);
      if (_this._rootElement.current) {
        var clientRect = _this._rootElement.current.getBoundingClientRect();
        var headerOriginX = clientRect.left;
        var eventXRelativePosition = clientX - headerOriginX;
        var currentDropHintIndex = _this._currentDropHintIndex;
        if (_this._isValidCurrentDropHintIndex()) {
          if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex].startX, _this._dropHintDetails[currentDropHintIndex].endX)) {
            return;
          }
        }
        var _a = _this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;
        var columnReorderProps = _this._getColumnReorderProps();
        var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;
        var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;
        var currentIndex = frozenColumnCountFromStart;
        var lastValidColumn = columns.length - frozenColumnCountFromEnd;
        var indexToUpdate = -1;
        if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[currentIndex].endX)) {
          indexToUpdate = currentIndex;
        } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[lastValidColumn].startX)) {
          indexToUpdate = lastValidColumn;
        } else if (_this._isValidCurrentDropHintIndex()) {
          if (_this._dropHintDetails[currentDropHintIndex + 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex + 1].startX, _this._dropHintDetails[currentDropHintIndex + 1].endX)) {
            indexToUpdate = currentDropHintIndex + 1;
          } else if (_this._dropHintDetails[currentDropHintIndex - 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex - 1].startX, _this._dropHintDetails[currentDropHintIndex - 1].endX)) {
            indexToUpdate = currentDropHintIndex - 1;
          }
        }
        if (indexToUpdate === -1) {
          var startIndex = frozenColumnCountFromStart;
          var endIndex = lastValidColumn;
          while (startIndex < endIndex) {
            var middleIndex = Math.ceil((endIndex + startIndex) / 2);
            if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].startX, _this._dropHintDetails[middleIndex].endX)) {
              indexToUpdate = middleIndex;
              break;
            } else if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {
              endIndex = middleIndex;
            } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {
              startIndex = middleIndex;
            }
          }
        }
        if (indexToUpdate === _this._draggedColumnIndex || indexToUpdate === _this._draggedColumnIndex + 1) {
          if (_this._isValidCurrentDropHintIndex()) {
            _this._resetDropHints();
          }
        } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {
          _this._resetDropHints();
          _this._updateDropHintElement(_this._dropHintDetails[indexToUpdate].dropHintElementRef, "inline-block");
          _this._currentDropHintIndex = indexToUpdate;
        }
      }
    };
    _this._renderColumnSizer = function(_a) {
      var _b;
      var columnIndex = _a.columnIndex;
      var _c = _this.props.columns, columns = _c === void 0 ? NO_COLUMNS : _c;
      var column = columns[columnIndex];
      var columnResizeDetails = _this.state.columnResizeDetails;
      var classNames = _this._classNames;
      return column.isResizable ? React15.createElement("div", { key: column.key + "_sizer", "aria-hidden": true, role: "button", "data-is-focusable": false, onClick: _stopPropagation, "data-sizer-index": columnIndex, onBlur: _this._onSizerBlur, className: css(classNames.cellSizer, columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd, (_b = {}, _b[classNames.cellIsResizing] = columnResizeDetails && columnResizeDetails.columnIndex === columnIndex, _b)), onDoubleClick: _this._onSizerDoubleClick.bind(_this, columnIndex) }) : null;
    };
    _this._onRenderColumnHeaderTooltip = function(tooltipHostProps) {
      return React15.createElement("span", { className: tooltipHostProps.hostClassName }, tooltipHostProps.children);
    };
    _this._onSelectAllClicked = function() {
      var selection = _this.props.selection;
      if (selection) {
        selection.toggleAllSelected();
      }
    };
    _this._onRootMouseDown = function(ev) {
      var columnIndexAttr = ev.target.getAttribute("data-sizer-index");
      var columnIndex = Number(columnIndexAttr);
      var _a = _this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;
      if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON3) {
        return;
      }
      _this.setState({
        columnResizeDetails: {
          columnIndex,
          columnMinWidth: columns[columnIndex].calculatedWidth,
          originX: ev.clientX
        }
      });
      ev.preventDefault();
      ev.stopPropagation();
    };
    _this._onRootMouseMove = function(ev) {
      var _a = _this.state, columnResizeDetails = _a.columnResizeDetails, isSizing = _a.isSizing;
      if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {
        _this.setState({ isSizing: true });
      }
    };
    _this._onRootKeyDown = function(ev) {
      var _a = _this.state, columnResizeDetails = _a.columnResizeDetails, isSizing = _a.isSizing;
      var _b = _this.props, _c = _b.columns, columns = _c === void 0 ? NO_COLUMNS : _c, onColumnResized = _b.onColumnResized;
      var columnIndexAttr = ev.target.getAttribute("data-sizer-index");
      if (!columnIndexAttr || isSizing) {
        return;
      }
      var columnIndex = Number(columnIndexAttr);
      if (!columnResizeDetails) {
        if (ev.which === KeyCodes.enter) {
          _this.setState({
            columnResizeDetails: {
              columnIndex,
              columnMinWidth: columns[columnIndex].calculatedWidth
            }
          });
          ev.preventDefault();
          ev.stopPropagation();
        }
      } else {
        var increment = void 0;
        if (ev.which === KeyCodes.enter) {
          _this.setState({
            columnResizeDetails: void 0
          });
          ev.preventDefault();
          ev.stopPropagation();
        } else if (ev.which === KeyCodes.left) {
          increment = getRTL(_this.props.theme) ? 1 : -1;
        } else if (ev.which === KeyCodes.right) {
          increment = getRTL(_this.props.theme) ? -1 : 1;
        }
        if (increment) {
          if (!ev.shiftKey) {
            increment *= 10;
          }
          _this.setState({
            columnResizeDetails: __assign(__assign({}, columnResizeDetails), { columnMinWidth: columnResizeDetails.columnMinWidth + increment })
          });
          if (onColumnResized) {
            onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);
          }
          ev.preventDefault();
          ev.stopPropagation();
        }
      }
    };
    _this._onSizerMouseMove = function(ev) {
      var buttons = ev.buttons;
      var _a = _this.props, onColumnIsSizingChanged = _a.onColumnIsSizingChanged, onColumnResized = _a.onColumnResized, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b;
      var columnResizeDetails = _this.state.columnResizeDetails;
      if (buttons !== void 0 && buttons !== MOUSEMOVE_PRIMARY_BUTTON2) {
        _this._onSizerMouseUp(ev);
        return;
      }
      if (ev.clientX !== columnResizeDetails.originX) {
        if (onColumnIsSizingChanged) {
          onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], true);
        }
      }
      if (onColumnResized) {
        var movement = ev.clientX - columnResizeDetails.originX;
        if (getRTL(_this.props.theme)) {
          movement = -movement;
        }
        onColumnResized(columns[columnResizeDetails.columnIndex], columnResizeDetails.columnMinWidth + movement, columnResizeDetails.columnIndex);
      }
    };
    _this._onSizerBlur = function(ev) {
      var columnResizeDetails = _this.state.columnResizeDetails;
      if (columnResizeDetails) {
        _this.setState({
          columnResizeDetails: void 0,
          isSizing: false
        });
      }
    };
    _this._onSizerMouseUp = function(ev) {
      var _a = _this.props, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b, onColumnIsSizingChanged = _a.onColumnIsSizingChanged;
      var columnResizeDetails = _this.state.columnResizeDetails;
      _this.setState({
        columnResizeDetails: void 0,
        isSizing: false
      });
      if (onColumnIsSizingChanged) {
        onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], false);
      }
    };
    _this._onToggleCollapseAll = function() {
      var onToggleCollapseAll = _this.props.onToggleCollapseAll;
      var newCollapsed = !_this.state.isAllCollapsed;
      _this.setState({
        isAllCollapsed: newCollapsed
      });
      if (onToggleCollapseAll) {
        onToggleCollapseAll(newCollapsed);
      }
    };
    initializeComponentRef(_this);
    _this._events = new EventGroup(_this);
    _this.state = {
      columnResizeDetails: void 0,
      isAllCollapsed: _this.props.isAllCollapsed,
      isAllSelected: !!_this.props.selection && _this.props.selection.isAllSelected()
    };
    _this._onDropIndexInfo = {
      sourceIndex: -1,
      targetIndex: -1
    };
    _this._id = getId("header");
    _this._currentDropHintIndex = -1;
    _this._dragDropHelper = new DragDropHelper({
      selection: {
        getSelection: function() {
          return;
        }
      },
      minimumPixelsForDrag: _this.props.minimumPixelsForDrag
    });
    return _this;
  }
  DetailsHeaderBase2.prototype.componentDidMount = function() {
    var selection = this.props.selection;
    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);
    if (this._rootElement.current) {
      this._events.on(this._rootElement.current, "mousedown", this._onRootMouseDown);
      this._events.on(this._rootElement.current, "keydown", this._onRootKeyDown);
      if (this._getColumnReorderProps()) {
        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());
      }
    }
  };
  DetailsHeaderBase2.prototype.componentDidUpdate = function(prevProps) {
    if (this._getColumnReorderProps()) {
      if (!this._subscriptionObject && this._rootElement.current) {
        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());
      }
    } else if (this._subscriptionObject) {
      this._subscriptionObject.dispose();
      delete this._subscriptionObject;
    }
    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {
      var _a = prevProps.columns, previousColumns = _a === void 0 ? NO_COLUMNS : _a;
      var _b = this.props.columns, columns = _b === void 0 ? NO_COLUMNS : _b;
      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {
        this._onDropIndexInfo = {
          sourceIndex: -1,
          targetIndex: -1
        };
      }
    }
    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {
      this.setState({ isAllCollapsed: this.props.isAllCollapsed });
    }
  };
  DetailsHeaderBase2.prototype.componentWillUnmount = function() {
    if (this._subscriptionObject) {
      this._subscriptionObject.dispose();
      delete this._subscriptionObject;
    }
    this._dragDropHelper.dispose();
    this._events.dispose();
  };
  DetailsHeaderBase2.prototype.render = function() {
    var _this = this;
    var _a = this.props, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b, ariaLabel = _a.ariaLabel, ariaLabelForToggleAllGroupsButton = _a.ariaLabelForToggleAllGroupsButton, ariaLabelForSelectAllCheckbox = _a.ariaLabelForSelectAllCheckbox, selectAllVisibility = _a.selectAllVisibility, ariaLabelForSelectionColumn = _a.ariaLabelForSelectionColumn, indentWidth = _a.indentWidth, onColumnClick = _a.onColumnClick, onColumnContextMenu = _a.onColumnContextMenu, _c = _a.onRenderColumnHeaderTooltip, onRenderColumnHeaderTooltip = _c === void 0 ? this._onRenderColumnHeaderTooltip : _c, styles = _a.styles, selectionMode = _a.selectionMode, theme = _a.theme, onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox, groupNestingDepth = _a.groupNestingDepth, useFastIcons = _a.useFastIcons, checkboxVisibility = _a.checkboxVisibility, className = _a.className;
    var _d = this.state, isAllSelected = _d.isAllSelected, columnResizeDetails = _d.columnResizeDetails, isSizing = _d.isSizing, isAllCollapsed = _d.isAllCollapsed;
    var showCheckbox = selectAllVisibility !== SelectAllVisibility.none;
    var isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;
    var isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;
    var columnReorderProps = this._getColumnReorderProps();
    var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart ? columnReorderProps.frozenColumnCountFromStart : 0;
    var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd ? columnReorderProps.frozenColumnCountFromEnd : 0;
    this._classNames = getClassNames10(styles, {
      theme,
      isAllSelected,
      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,
      isResizingColumn: !!columnResizeDetails && isSizing,
      isSizing,
      isAllCollapsed,
      isCheckboxHidden,
      className
    });
    var classNames = this._classNames;
    var IconComponent = useFastIcons ? FontIcon : Icon;
    var showGroupExpander = groupNestingDepth > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible;
    var columnIndexOffset = 1 + (showCheckbox ? 1 : 0) + (showGroupExpander ? 1 : 0);
    var isRTL = getRTL(theme);
    return React15.createElement(
      FocusZone,
      { role: "row", "aria-label": ariaLabel, className: classNames.root, componentRef: this._rootComponent, elementRef: this._rootElement, onMouseMove: this._onRootMouseMove, "data-automationid": "DetailsHeader", direction: FocusZoneDirection.horizontal },
      showCheckbox ? [
        React15.createElement("div", { key: "__checkbox", className: classNames.cellIsCheck, "aria-labelledby": this._id + "-checkTooltip", onClick: !isCheckboxHidden ? this._onSelectAllClicked : void 0, role: "columnheader" }, onRenderColumnHeaderTooltip({
          hostClassName: classNames.checkTooltip,
          id: this._id + "-checkTooltip",
          setAriaDescribedBy: false,
          content: ariaLabelForSelectAllCheckbox,
          children: React15.createElement(DetailsRowCheck, { id: this._id + "-check", "aria-label": selectionMode === SelectionMode.multiple ? ariaLabelForSelectAllCheckbox : ariaLabelForSelectionColumn, "data-is-focusable": !isCheckboxHidden || void 0, isHeader: true, selected: isAllSelected, anySelected: false, canSelect: !isCheckboxHidden, className: classNames.check, onRenderDetailsCheckbox, useFastIcons, isVisible: isCheckboxAlwaysVisible })
        }, this._onRenderColumnHeaderTooltip)),
        !this.props.onRenderColumnHeaderTooltip ? ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? React15.createElement("label", { key: "__checkboxLabel", id: this._id + "-checkTooltip", className: classNames.accessibleLabel, "aria-hidden": true }, ariaLabelForSelectAllCheckbox) : ariaLabelForSelectionColumn && isCheckboxHidden ? React15.createElement("label", { key: "__checkboxLabel", id: this._id + "-checkTooltip", className: classNames.accessibleLabel, "aria-hidden": true }, ariaLabelForSelectionColumn) : null : null
      ] : null,
      showGroupExpander ? React15.createElement(
        "div",
        { className: classNames.cellIsGroupExpander, onClick: this._onToggleCollapseAll, "data-is-focusable": true, "aria-label": ariaLabelForToggleAllGroupsButton, "aria-expanded": !isAllCollapsed, role: "columnheader" },
        React15.createElement(IconComponent, { className: classNames.collapseButton, iconName: isRTL ? "ChevronLeftMed" : "ChevronRightMed" }),
        React15.createElement("span", { className: classNames.accessibleLabel }, ariaLabelForToggleAllGroupsButton)
      ) : null,
      React15.createElement(GroupSpacer, { indentWidth, role: "gridcell", count: groupNestingDepth - 1 }),
      columns.map(function(column, columnIndex) {
        var _isDraggable = columnReorderProps ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd : false;
        return [
          columnReorderProps && (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) && _this._renderDropHint(columnIndex),
          React15.createElement(DetailsColumn, {
            column,
            styles: column.styles,
            key: column.key,
            columnIndex: columnIndexOffset + columnIndex,
            parentId: _this._id,
            isDraggable: _isDraggable,
            updateDragInfo: _this._updateDragInfo,
            dragDropHelper: _this._dragDropHelper,
            onColumnClick,
            onColumnContextMenu,
            onRenderColumnHeaderTooltip: _this.props.onRenderColumnHeaderTooltip,
            isDropped: _this._onDropIndexInfo.targetIndex === columnIndex,
            cellStyleProps: _this.props.cellStyleProps,
            useFastIcons
          }),
          _this._renderColumnDivider(columnIndex)
        ];
      }),
      columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length),
      isSizing && React15.createElement(
        Layer,
        null,
        React15.createElement("div", { className: classNames.sizingOverlay, onMouseMove: this._onSizerMouseMove, onMouseUp: this._onSizerMouseUp })
      )
    );
  };
  DetailsHeaderBase2.prototype.focus = function() {
    var _a;
    return !!((_a = this._rootComponent.current) === null || _a === void 0 ? void 0 : _a.focus());
  };
  DetailsHeaderBase2.prototype._getColumnReorderProps = function() {
    var _a = this.props, columnReorderOptions = _a.columnReorderOptions, columnReorderProps = _a.columnReorderProps;
    return columnReorderProps || columnReorderOptions && __assign(__assign({}, columnReorderOptions), { onColumnDragEnd: void 0 });
  };
  DetailsHeaderBase2.prototype._getHeaderDragDropOptions = function() {
    var options = {
      selectionIndex: 1,
      context: { data: this, index: 0 },
      canDrag: function() {
        return false;
      },
      canDrop: function() {
        return true;
      },
      onDragStart: function() {
        return void 0;
      },
      updateDropState: this._updateDroppingState,
      onDrop: this._onDrop,
      onDragEnd: function() {
        return void 0;
      },
      onDragOver: this._onDragOver
    };
    return options;
  };
  DetailsHeaderBase2.prototype._isValidCurrentDropHintIndex = function() {
    return this._currentDropHintIndex >= 0;
  };
  DetailsHeaderBase2.prototype._isCheckboxColumnHidden = function() {
    var _a = this.props, selectionMode = _a.selectionMode, checkboxVisibility = _a.checkboxVisibility;
    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;
  };
  DetailsHeaderBase2.prototype._resetDropHints = function() {
    if (this._currentDropHintIndex >= 0) {
      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, "none");
      this._currentDropHintIndex = -1;
    }
  };
  DetailsHeaderBase2.prototype._updateDropHintElement = function(element, displayProperty) {
    element.childNodes[1].style.display = displayProperty;
    element.childNodes[0].style.display = displayProperty;
  };
  DetailsHeaderBase2.prototype._isEventOnHeader = function(event) {
    if (this._rootElement.current) {
      var clientRect = this._rootElement.current.getBoundingClientRect();
      if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {
        return ColumnDragEndLocation.header;
      }
    }
  };
  DetailsHeaderBase2.prototype._renderColumnDivider = function(columnIndex) {
    var _a = this.props.columns, columns = _a === void 0 ? NO_COLUMNS : _a;
    var column = columns[columnIndex];
    var onRenderDivider = column.onRenderDivider;
    return onRenderDivider ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer) : this._renderColumnSizer({ column, columnIndex });
  };
  DetailsHeaderBase2.prototype._renderDropHint = function(dropHintIndex) {
    var classNames = this._classNames;
    var IconComponent = this.props.useFastIcons ? FontIcon : Icon;
    return React15.createElement(
      "div",
      { key: "dropHintKey", className: classNames.dropHintStyle, id: "columnDropHint_" + dropHintIndex },
      React15.createElement(
        "div",
        { role: "presentation", key: "dropHintCircleKey", className: classNames.dropHintCaretStyle, "data-is-focusable": false, "data-sizer-index": dropHintIndex, "aria-hidden": true },
        React15.createElement(IconComponent, { iconName: "CircleShapeSolid" })
      ),
      React15.createElement("div", { key: "dropHintLineKey", "aria-hidden": true, "data-is-focusable": false, "data-sizer-index": dropHintIndex, className: classNames.dropHintLineStyle })
    );
  };
  DetailsHeaderBase2.prototype._onSizerDoubleClick = function(columnIndex, ev) {
    var _a = this.props, onColumnAutoResized = _a.onColumnAutoResized, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS : _b;
    if (onColumnAutoResized) {
      onColumnAutoResized(columns[columnIndex], columnIndex);
    }
  };
  DetailsHeaderBase2.prototype._onSelectionChanged = function() {
    var isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();
    if (this.state.isAllSelected !== isAllSelected) {
      this.setState({
        isAllSelected
      });
    }
  };
  DetailsHeaderBase2.defaultProps = {
    selectAllVisibility: SelectAllVisibility.visible,
    collapseAllVisibility: CollapseAllVisibility.visible,
    useFastIcons: true
  };
  return DetailsHeaderBase2;
}(React15.Component);
function _liesBetween(rtl, target, left, right) {
  return rtl ? target <= left && target >= right : target >= left && target <= right;
}
function _isBefore(rtl, a, b) {
  return rtl ? a >= b : a <= b;
}
function _isAfter(rtl, a, b) {
  return rtl ? a <= b : a >= b;
}
function _stopPropagation(ev) {
  ev.stopPropagation();
}

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsHeader.js
var DetailsHeader = styled(DetailsHeaderBase, getDetailsHeaderStyles, void 0, { scope: "DetailsHeader" });

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsRowFields.js
var React16 = __toESM(require_react());
var getCellText = function(item, column) {
  var value = item && column && column.fieldName ? item[column.fieldName] : "";
  if (value === null || value === void 0) {
    value = "";
  }
  if (typeof value === "boolean") {
    return value.toString();
  }
  return value;
};
var DetailsRowFields = function(props) {
  var columns = props.columns, rowClassNames = props.rowClassNames, _a = props.cellStyleProps, cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a, item = props.item, itemIndex = props.itemIndex, isSelected = props.isSelected, onRenderItemColumn = props.onRenderItemColumn, getCellValueKey = props.getCellValueKey, propsOnRenderField = props.onRenderField, cellsByColumn = props.cellsByColumn, enableUpdateAnimations = props.enableUpdateAnimations, rowHeaderId = props.rowHeaderId;
  var cellValueKeysRef = React16.useRef();
  var cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});
  var defaultOnRenderField = React16.useCallback(function(fieldProps) {
    var column = fieldProps.column, cellValueKey = fieldProps.cellValueKey, className = fieldProps.className, onRender = fieldProps.onRender, fieldItem = fieldProps.item, fieldItemIndex = fieldProps.itemIndex;
    var width = typeof column.calculatedWidth === "undefined" ? "auto" : column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);
    var key = "" + column.key + (cellValueKey !== void 0 ? "-" + cellValueKey : "");
    return React16.createElement("div", { key, id: column.isRowHeader ? rowHeaderId : void 0, role: column.isRowHeader ? "rowheader" : "gridcell", "aria-readonly": true, className: css(column.className, column.isMultiline && rowClassNames.isMultiline, column.isRowHeader && rowClassNames.isRowHeader, rowClassNames.cell, column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded, className), style: { width }, "data-automationid": "DetailsRowCell", "data-automation-key": column.key }, onRender(fieldItem, fieldItemIndex, column));
  }, [rowClassNames, cellStyleProps, rowHeaderId]);
  return React16.createElement("div", { className: rowClassNames.fields, "data-automationid": "DetailsRowFields", role: "presentation" }, columns.map(function(column) {
    var _a2 = column.getValueKey, getValueKey = _a2 === void 0 ? getCellValueKey : _a2;
    var onRender = cellsByColumn && column.key in cellsByColumn && function() {
      return cellsByColumn[column.key];
    } || column.onRender || onRenderItemColumn || defaultOnRender;
    var onRenderField = defaultOnRenderField;
    if (column.onRenderField) {
      onRenderField = composeRenderFunction(column.onRenderField, onRenderField);
    }
    if (propsOnRenderField) {
      onRenderField = composeRenderFunction(propsOnRenderField, onRenderField);
    }
    var previousValueKey = cellValueKeys[column.key];
    var cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : void 0;
    var showAnimation = false;
    if (cellValueKey !== void 0 && previousValueKey !== void 0 && cellValueKey !== previousValueKey) {
      showAnimation = true;
    }
    cellValueKeys[column.key] = cellValueKey;
    return onRenderField({
      item,
      itemIndex,
      isSelected,
      column,
      cellValueKey,
      className: showAnimation ? rowClassNames.cellAnimation : void 0,
      onRender
    });
  }));
};
function defaultOnRender(item, index, column) {
  if (!item || !column) {
    return null;
  }
  return getCellText(item, column);
}

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsRow.base.js
var React17 = __toESM(require_react());
var getClassNames11 = classNamesFunction();
var DEFAULT_DROPPING_CSS_CLASS2 = "is-dropping";
var NO_COLUMNS2 = [];
var DetailsRowBase = function(_super) {
  __extends(DetailsRowBase2, _super);
  function DetailsRowBase2(props) {
    var _this = _super.call(this, props) || this;
    _this._root = React17.createRef();
    _this._cellMeasurer = React17.createRef();
    _this._focusZone = React17.createRef();
    _this._onSelectionChanged = function() {
      var selectionState = getSelectionState(_this.props);
      if (!shallowCompare(selectionState, _this.state.selectionState)) {
        _this.setState({
          selectionState
        });
      }
    };
    _this._updateDroppingState = function(newValue, event) {
      var isDropping = _this.state.isDropping;
      var _a = _this.props, dragDropEvents = _a.dragDropEvents, item = _a.item;
      if (!newValue) {
        if (dragDropEvents.onDragLeave) {
          dragDropEvents.onDragLeave(item, event);
        }
      } else if (dragDropEvents.onDragEnter) {
        _this._droppingClassNames = dragDropEvents.onDragEnter(item, event);
      }
      if (isDropping !== newValue) {
        _this.setState({ isDropping: newValue });
      }
    };
    initializeComponentRef(_this);
    _this._events = new EventGroup(_this);
    _this.state = {
      selectionState: getSelectionState(props),
      columnMeasureInfo: void 0,
      isDropping: false
    };
    _this._droppingClassNames = "";
    return _this;
  }
  DetailsRowBase2.getDerivedStateFromProps = function(nextProps, previousState) {
    return __assign(__assign({}, previousState), { selectionState: getSelectionState(nextProps) });
  };
  DetailsRowBase2.prototype.componentDidMount = function() {
    var _a = this.props, dragDropHelper = _a.dragDropHelper, selection = _a.selection, item = _a.item, onDidMount = _a.onDidMount;
    if (dragDropHelper && this._root.current) {
      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());
    }
    if (selection) {
      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);
    }
    if (onDidMount && item) {
      this._onDidMountCalled = true;
      onDidMount(this);
    }
  };
  DetailsRowBase2.prototype.componentDidUpdate = function(previousProps) {
    var state = this.state;
    var _a = this.props, item = _a.item, onDidMount = _a.onDidMount;
    var columnMeasureInfo = state.columnMeasureInfo;
    if (this.props.itemIndex !== previousProps.itemIndex || this.props.item !== previousProps.item || this.props.dragDropHelper !== previousProps.dragDropHelper) {
      if (this._dragDropSubscription) {
        this._dragDropSubscription.dispose();
        delete this._dragDropSubscription;
      }
      if (this.props.dragDropHelper && this._root.current) {
        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());
      }
    }
    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {
      var newWidth = this._cellMeasurer.current.getBoundingClientRect().width;
      columnMeasureInfo.onMeasureDone(newWidth);
      this.setState({
        columnMeasureInfo: void 0
      });
    }
    if (item && onDidMount && !this._onDidMountCalled) {
      this._onDidMountCalled = true;
      onDidMount(this);
    }
  };
  DetailsRowBase2.prototype.componentWillUnmount = function() {
    var _a = this.props, item = _a.item, onWillUnmount = _a.onWillUnmount;
    if (onWillUnmount && item) {
      onWillUnmount(this);
    }
    if (this._dragDropSubscription) {
      this._dragDropSubscription.dispose();
      delete this._dragDropSubscription;
    }
    this._events.dispose();
  };
  DetailsRowBase2.prototype.shouldComponentUpdate = function(nextProps, nextState) {
    if (this.props.useReducedRowRenderer) {
      var newSelectionState = getSelectionState(nextProps);
      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {
        return true;
      }
      return !shallowCompare(this.props, nextProps);
    } else {
      return true;
    }
  };
  DetailsRowBase2.prototype.render = function() {
    var _a = this.props, className = _a.className, _b = _a.columns, columns = _b === void 0 ? NO_COLUMNS2 : _b, dragDropEvents = _a.dragDropEvents, item = _a.item, itemIndex = _a.itemIndex, id = _a.id, _c = _a.flatIndexOffset, flatIndexOffset = _c === void 0 ? 2 : _c, _d = _a.onRenderCheck, onRenderCheck = _d === void 0 ? this._onRenderCheck : _d, onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox, onRenderItemColumn = _a.onRenderItemColumn, onRenderField = _a.onRenderField, getCellValueKey = _a.getCellValueKey, selectionMode = _a.selectionMode, _e = _a.rowWidth, rowWidth = _e === void 0 ? 0 : _e, checkboxVisibility = _a.checkboxVisibility, getRowAriaLabel = _a.getRowAriaLabel, getRowAriaDescription = _a.getRowAriaDescription, getRowAriaDescribedBy = _a.getRowAriaDescribedBy, isGridRow = _a.isGridRow, checkButtonAriaLabel = _a.checkButtonAriaLabel, checkboxCellClassName = _a.checkboxCellClassName, rowFieldsAs = _a.rowFieldsAs, selection = _a.selection, indentWidth = _a.indentWidth, enableUpdateAnimations = _a.enableUpdateAnimations, compact = _a.compact, theme = _a.theme, styles = _a.styles, cellsByColumn = _a.cellsByColumn, groupNestingDepth = _a.groupNestingDepth, _f = _a.useFastIcons, useFastIcons = _f === void 0 ? true : _f, cellStyleProps = _a.cellStyleProps, group = _a.group, focusZoneProps = _a.focusZoneProps, _g = _a.disabled, disabled = _g === void 0 ? false : _g;
    var _h = this.state, columnMeasureInfo = _h.columnMeasureInfo, isDropping = _h.isDropping;
    var _j = this.state.selectionState, _k = _j.isSelected, isSelected = _k === void 0 ? false : _k, _l = _j.isSelectionModal, isSelectionModal = _l === void 0 ? false : _l;
    var isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : void 0;
    var droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS2 : "";
    var ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : void 0;
    var ariaRowDescription = getRowAriaDescription ? getRowAriaDescription(item) : void 0;
    var ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : void 0;
    var canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;
    var isContentUnselectable = selectionMode === SelectionMode.multiple;
    var showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;
    var ariaSelected = selectionMode === SelectionMode.none ? void 0 : isSelected;
    var ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : void 0;
    var ariaSetSize = group ? group.count : void 0;
    var focusZoneDirection = focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.horizontal;
    this._classNames = __assign(__assign({}, this._classNames), getClassNames11(styles, {
      theme,
      isSelected,
      canSelect: !isContentUnselectable,
      anySelected: isSelectionModal,
      checkboxCellClassName,
      droppingClassName,
      className,
      compact,
      enableUpdateAnimations,
      cellStyleProps,
      disabled
    }));
    var rowClassNames = {
      isMultiline: this._classNames.isMultiline,
      isRowHeader: this._classNames.isRowHeader,
      cell: this._classNames.cell,
      cellAnimation: this._classNames.cellAnimation,
      cellPadded: this._classNames.cellPadded,
      cellUnpadded: this._classNames.cellUnpadded,
      fields: this._classNames.fields
    };
    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {
      this._rowClassNames = rowClassNames;
    }
    var RowFields = rowFieldsAs ? composeComponentAs(rowFieldsAs, DetailsRowFields) : DetailsRowFields;
    var rowFields = React17.createElement(RowFields, { rowClassNames: this._rowClassNames, rowHeaderId: id + "-header", cellsByColumn, columns, item, itemIndex, isSelected, columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0), onRenderItemColumn, onRenderField, getCellValueKey, enableUpdateAnimations, cellStyleProps });
    var defaultRole = "row";
    var role = this.props.role ? this.props.role : defaultRole;
    this._ariaRowDescriptionId = getId("DetailsRow-description");
    var hasRowHeader = columns.some(function(column) {
      return !!column.isRowHeader;
    });
    var ariaLabelledby = id + "-checkbox" + (hasRowHeader ? " " + id + "-header" : "");
    var groupedListRowProps = isGridRow ? {} : {
      "aria-level": groupNestingDepth && groupNestingDepth + 1 || void 0,
      "aria-posinset": ariaPositionInSet,
      "aria-setsize": ariaSetSize
    };
    return React17.createElement(
      FocusZone,
      __assign({ "data-is-focusable": true }, getNativeProps(this.props, divProperties), typeof isDraggable === "boolean" ? {
        "data-is-draggable": isDraggable,
        draggable: isDraggable
      } : {}, focusZoneProps, groupedListRowProps, { direction: focusZoneDirection, elementRef: this._root, componentRef: this._focusZone, role, "aria-label": ariaLabel, "aria-disabled": disabled || void 0, "aria-describedby": ariaRowDescription ? this._ariaRowDescriptionId : ariaDescribedBy, className: this._classNames.root, "data-selection-index": itemIndex, "data-selection-touch-invoke": true, "data-selection-disabled": disabled || void 0, "data-item-index": itemIndex, "aria-rowindex": ariaPositionInSet === void 0 ? itemIndex + flatIndexOffset : void 0, "data-automationid": "DetailsRow", style: { minWidth: rowWidth }, "aria-selected": ariaSelected, allowFocusRoot: true }),
      ariaRowDescription ? React17.createElement("span", { key: "description", role: "presentation", hidden: true, id: this._ariaRowDescriptionId }, ariaRowDescription) : null,
      showCheckbox && React17.createElement("div", { role: "gridcell", "data-selection-toggle": true, className: this._classNames.checkCell }, onRenderCheck({
        id: id ? id + "-checkbox" : void 0,
        selected: isSelected,
        selectionMode,
        anySelected: isSelectionModal,
        "aria-label": checkButtonAriaLabel,
        "aria-labelledby": id ? ariaLabelledby : void 0,
        canSelect,
        compact,
        className: this._classNames.check,
        theme,
        isVisible: checkboxVisibility === CheckboxVisibility.always,
        onRenderDetailsCheckbox,
        useFastIcons
      })),
      React17.createElement(GroupSpacer, { indentWidth, role: "gridcell", count: groupNestingDepth - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0) }),
      item && rowFields,
      columnMeasureInfo && React17.createElement(
        "span",
        { role: "presentation", className: css(this._classNames.cellMeasurer, this._classNames.cell), ref: this._cellMeasurer },
        React17.createElement(RowFields, { rowClassNames: this._rowClassNames, rowHeaderId: id + "-header", columns: [columnMeasureInfo.column], item, itemIndex, columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length, onRenderItemColumn, getCellValueKey })
      ),
      React17.createElement("span", { role: "checkbox", className: this._classNames.checkCover, "aria-checked": isSelected, "data-selection-toggle": true })
    );
  };
  DetailsRowBase2.prototype.measureCell = function(index, onMeasureDone) {
    var _a = this.props.columns, columns = _a === void 0 ? NO_COLUMNS2 : _a;
    var column = __assign({}, columns[index]);
    column.minWidth = 0;
    column.maxWidth = 999999;
    delete column.calculatedWidth;
    this.setState({
      columnMeasureInfo: {
        index,
        column,
        onMeasureDone
      }
    });
  };
  DetailsRowBase2.prototype.focus = function(forceIntoFirstElement) {
    var _a;
    if (forceIntoFirstElement === void 0) {
      forceIntoFirstElement = false;
    }
    return !!((_a = this._focusZone.current) === null || _a === void 0 ? void 0 : _a.focus(forceIntoFirstElement));
  };
  DetailsRowBase2.prototype._onRenderCheck = function(props) {
    return React17.createElement(DetailsRowCheck, __assign({}, props));
  };
  DetailsRowBase2.prototype._getRowDragDropOptions = function() {
    var _a = this.props, item = _a.item, itemIndex = _a.itemIndex, dragDropEvents = _a.dragDropEvents, eventsToRegister = _a.eventsToRegister;
    var options = {
      eventMap: eventsToRegister,
      selectionIndex: itemIndex,
      context: { data: item, index: itemIndex },
      canDrag: dragDropEvents.canDrag,
      canDrop: dragDropEvents.canDrop,
      onDragStart: dragDropEvents.onDragStart,
      updateDropState: this._updateDroppingState,
      onDrop: dragDropEvents.onDrop,
      onDragEnd: dragDropEvents.onDragEnd,
      onDragOver: dragDropEvents.onDragOver
    };
    return options;
  };
  return DetailsRowBase2;
}(React17.Component);
function getSelectionState(props) {
  var _a;
  var itemIndex = props.itemIndex, selection = props.selection;
  return {
    isSelected: !!(selection === null || selection === void 0 ? void 0 : selection.isIndexSelected(itemIndex)),
    isSelectionModal: !!((_a = selection === null || selection === void 0 ? void 0 : selection.isModal) === null || _a === void 0 ? void 0 : _a.call(selection))
  };
}

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsRow.js
var DetailsRow = styled(DetailsRowBase, getDetailsRowStyles, void 0, {
  scope: "DetailsRow"
});

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsList.base.js
var React19 = __toESM(require_react());

// node_modules/@fluentui/react/lib/utilities/decorators/withViewport.js
var React18 = __toESM(require_react());
var RESIZE_DELAY2 = 500;
var MAX_RESIZE_ATTEMPTS = 3;
function withViewport(ComposedComponent) {
  return function(_super) {
    __extends(WithViewportComponent, _super);
    function WithViewportComponent(props) {
      var _this = _super.call(this, props) || this;
      _this._root = React18.createRef();
      _this._registerResizeObserver = function() {
        var win = getWindow(_this._root.current);
        _this._viewportResizeObserver = new win.ResizeObserver(_this._onAsyncResize);
        _this._viewportResizeObserver.observe(_this._root.current);
      };
      _this._unregisterResizeObserver = function() {
        if (_this._viewportResizeObserver) {
          _this._viewportResizeObserver.disconnect();
          delete _this._viewportResizeObserver;
        }
      };
      _this._updateViewport = function(withForceUpdate) {
        var viewport = _this.state.viewport;
        var viewportElement = _this._root.current;
        var scrollElement = findScrollableParent(viewportElement);
        var scrollRect = getRect(scrollElement);
        var clientRect = getRect(viewportElement);
        var updateComponent = function() {
          if (withForceUpdate && _this._composedComponentInstance) {
            _this._composedComponentInstance.forceUpdate();
          }
        };
        var isSizeChanged = (clientRect && clientRect.width) !== viewport.width || (scrollRect && scrollRect.height) !== viewport.height;
        if (isSizeChanged && _this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {
          _this._resizeAttempts++;
          _this.setState({
            viewport: {
              width: clientRect.width,
              height: scrollRect.height
            }
          }, function() {
            _this._updateViewport(withForceUpdate);
          });
        } else {
          _this._resizeAttempts = 0;
          updateComponent();
        }
      };
      _this._async = new Async(_this);
      _this._events = new EventGroup(_this);
      _this._resizeAttempts = 0;
      _this.state = {
        viewport: {
          width: 0,
          height: 0
        }
      };
      return _this;
    }
    WithViewportComponent.prototype.componentDidMount = function() {
      var _this = this;
      var _a = this.props, delayFirstMeasure = _a.delayFirstMeasure, disableResizeObserver = _a.disableResizeObserver, skipViewportMeasures = _a.skipViewportMeasures;
      var win = getWindow(this._root.current);
      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY2, {
        leading: false
      });
      if (!skipViewportMeasures) {
        if (!disableResizeObserver && this._isResizeObserverAvailable()) {
          this._registerResizeObserver();
        } else {
          this._events.on(win, "resize", this._onAsyncResize);
        }
        if (delayFirstMeasure) {
          this._async.setTimeout(function() {
            _this._updateViewport();
          }, RESIZE_DELAY2);
        } else {
          this._updateViewport();
        }
      }
    };
    WithViewportComponent.prototype.componentDidUpdate = function(previousProps) {
      var previousSkipViewportMeasures = previousProps.skipViewportMeasures;
      var _a = this.props, disableResizeObserver = _a.disableResizeObserver, skipViewportMeasures = _a.skipViewportMeasures;
      var win = getWindow(this._root.current);
      if (skipViewportMeasures !== previousSkipViewportMeasures) {
        if (!skipViewportMeasures) {
          if (!disableResizeObserver && this._isResizeObserverAvailable()) {
            if (!this._viewportResizeObserver) {
              this._registerResizeObserver();
            }
          } else {
            this._events.on(win, "resize", this._onAsyncResize);
          }
          this._updateViewport();
        } else {
          this._unregisterResizeObserver();
          this._events.off(win, "resize", this._onAsyncResize);
        }
      }
    };
    WithViewportComponent.prototype.componentWillUnmount = function() {
      this._events.dispose();
      this._async.dispose();
      this._unregisterResizeObserver();
    };
    WithViewportComponent.prototype.render = function() {
      var viewport = this.state.viewport;
      var newViewport = viewport.width > 0 && viewport.height > 0 ? viewport : void 0;
      return React18.createElement(
        "div",
        { className: "ms-Viewport", ref: this._root, style: { minWidth: 1, minHeight: 1 } },
        React18.createElement(ComposedComponent, __assign({ ref: this._updateComposedComponentRef, viewport: newViewport }, this.props))
      );
    };
    WithViewportComponent.prototype.forceUpdate = function() {
      this._updateViewport(true);
    };
    WithViewportComponent.prototype._onAsyncResize = function() {
      this._updateViewport();
    };
    WithViewportComponent.prototype._isResizeObserverAvailable = function() {
      var win = getWindow(this._root.current);
      return win && win.ResizeObserver;
    };
    return WithViewportComponent;
  }(BaseDecorator);
}

// node_modules/@fluentui/react/lib/utilities/groupedList/GroupedListUtility.js
var GetGroupCount = function(groups) {
  var total = 0;
  if (groups) {
    var remainingGroups = __spreadArray([], groups);
    var currentGroup = void 0;
    while (remainingGroups && remainingGroups.length > 0) {
      ++total;
      currentGroup = remainingGroups.pop();
      if (currentGroup && currentGroup.children) {
        remainingGroups.push.apply(remainingGroups, currentGroup.children);
      }
    }
  }
  return total;
};

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsList.base.js
var getClassNames12 = classNamesFunction();
var MIN_COLUMN_WIDTH = 100;
var DEFAULT_RENDERED_WINDOWS_AHEAD2 = 2;
var DEFAULT_RENDERED_WINDOWS_BEHIND2 = 2;
var DetailsListInner = function(props) {
  var selection = props.selection;
  var ariaLabelForListHeader = props.ariaLabelForListHeader, ariaLabelForSelectAllCheckbox = props.ariaLabelForSelectAllCheckbox, ariaLabelForSelectionColumn = props.ariaLabelForSelectionColumn, className = props.className, checkboxVisibility = props.checkboxVisibility, compact = props.compact, constrainMode = props.constrainMode, dragDropEvents = props.dragDropEvents, groups = props.groups, groupProps = props.groupProps, indentWidth = props.indentWidth, items = props.items, isPlaceholderData = props.isPlaceholderData, isHeaderVisible = props.isHeaderVisible, layoutMode = props.layoutMode, onItemInvoked = props.onItemInvoked, onItemContextMenu = props.onItemContextMenu, onColumnHeaderClick = props.onColumnHeaderClick, onColumnHeaderContextMenu = props.onColumnHeaderContextMenu, _a = props.selectionMode, selectionMode = _a === void 0 ? selection.mode : _a, selectionPreservedOnEmptyClick = props.selectionPreservedOnEmptyClick, selectionZoneProps = props.selectionZoneProps, ariaLabel = props.ariaLabel, ariaLabelForGrid = props.ariaLabelForGrid, rowElementEventMap = props.rowElementEventMap, _b = props.shouldApplyApplicationRole, shouldApplyApplicationRole = _b === void 0 ? false : _b, getKey = props.getKey, listProps = props.listProps, usePageCache = props.usePageCache, onShouldVirtualize = props.onShouldVirtualize, viewport = props.viewport, minimumPixelsForDrag = props.minimumPixelsForDrag, getGroupHeight = props.getGroupHeight, styles = props.styles, theme = props.theme, _c = props.cellStyleProps, cellStyleProps = _c === void 0 ? DEFAULT_CELL_STYLE_PROPS : _c, onRenderCheckbox = props.onRenderCheckbox, useFastIcons = props.useFastIcons, dragDropHelper = props.dragDropHelper, adjustedColumns = props.adjustedColumns, isCollapsed = props.isCollapsed, isSizing = props.isSizing, isSomeGroupExpanded = props.isSomeGroupExpanded, version = props.version, rootRef = props.rootRef, listRef = props.listRef, focusZoneRef = props.focusZoneRef, columnReorderOptions = props.columnReorderOptions, groupedListRef = props.groupedListRef, headerRef = props.headerRef, onGroupExpandStateChanged = props.onGroupExpandStateChanged, onColumnIsSizingChanged = props.onColumnIsSizingChanged, onRowDidMount = props.onRowDidMount, onRowWillUnmount = props.onRowWillUnmount, disableSelectionZone = props.disableSelectionZone, _d = props.isSelectedOnFocus, isSelectedOnFocus = _d === void 0 ? true : _d, onColumnResized = props.onColumnResized, onColumnAutoResized = props.onColumnAutoResized, onToggleCollapse = props.onToggleCollapse, onActiveRowChanged = props.onActiveRowChanged, onBlur = props.onBlur, eventsToRegister = props.rowElementEventMap, onRenderMissingItem = props.onRenderMissingItem, onRenderItemColumn = props.onRenderItemColumn, onRenderField = props.onRenderField, getCellValueKey = props.getCellValueKey, getRowAriaLabel = props.getRowAriaLabel, getRowAriaDescribedBy = props.getRowAriaDescribedBy, checkButtonAriaLabel = props.checkButtonAriaLabel, checkButtonGroupAriaLabel = props.checkButtonGroupAriaLabel, checkboxCellClassName = props.checkboxCellClassName, useReducedRowRenderer = props.useReducedRowRenderer, enableUpdateAnimations = props.enableUpdateAnimations, enterModalSelectionOnTouch = props.enterModalSelectionOnTouch, onRenderDefaultRow = props.onRenderDefaultRow, selectionZoneRef = props.selectionZoneRef, focusZoneProps = props.focusZoneProps;
  var defaultRole = "grid";
  var role = props.role ? props.role : defaultRole;
  var rowId = getId("row");
  var groupNestingDepth = getGroupNestingDepth(groups);
  var groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);
  var additionalListProps = React19.useMemo(function() {
    return __assign({ renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD2, renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND2, getKey, version }, listProps);
  }, [isSizing, getKey, version, listProps]);
  var selectAllVisibility = SelectAllVisibility.none;
  if (selectionMode === SelectionMode.single) {
    selectAllVisibility = SelectAllVisibility.hidden;
  }
  if (selectionMode === SelectionMode.multiple) {
    var isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;
    if (isCollapsedGroupSelectVisible === void 0) {
      isCollapsedGroupSelectVisible = true;
    }
    var isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;
    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;
  }
  if (checkboxVisibility === CheckboxVisibility.hidden) {
    selectAllVisibility = SelectAllVisibility.none;
  }
  var defaultOnRenderDetailsHeader = React19.useCallback(function(detailsHeaderProps) {
    return React19.createElement(DetailsHeader, __assign({}, detailsHeaderProps));
  }, []);
  var defaultOnRenderDetailsFooter = React19.useCallback(function() {
    return null;
  }, []);
  var propsOnRenderDetailsHeader = props.onRenderDetailsHeader;
  var onRenderDetailsHeader = React19.useMemo(function() {
    return propsOnRenderDetailsHeader ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader) : defaultOnRenderDetailsHeader;
  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);
  var propsOnRenderDetailsFooter = props.onRenderDetailsFooter;
  var onRenderDetailsFooter = React19.useMemo(function() {
    return propsOnRenderDetailsFooter ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter) : defaultOnRenderDetailsFooter;
  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);
  var detailsFooterProps = React19.useMemo(function() {
    return {
      columns: adjustedColumns,
      groupNestingDepth,
      selection,
      selectionMode,
      viewport,
      checkboxVisibility,
      indentWidth,
      cellStyleProps
    };
  }, [
    adjustedColumns,
    groupNestingDepth,
    selection,
    selectionMode,
    viewport,
    checkboxVisibility,
    indentWidth,
    cellStyleProps
  ]);
  var columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;
  var onColumnDragEnd = React19.useCallback(function(_a2, event) {
    var dropLocation = _a2.dropLocation;
    var finalDropLocation = ColumnDragEndLocation.outside;
    if (columnReorderOnDragEnd) {
      if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {
        finalDropLocation = dropLocation;
      } else if (rootRef.current) {
        var clientRect = rootRef.current.getBoundingClientRect();
        if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {
          finalDropLocation = ColumnDragEndLocation.surface;
        }
      }
      columnReorderOnDragEnd(finalDropLocation);
    }
  }, [columnReorderOnDragEnd, rootRef]);
  var columnReorderProps = React19.useMemo(function() {
    if (columnReorderOptions) {
      return __assign(__assign({}, columnReorderOptions), { onColumnDragEnd });
    }
  }, [columnReorderOptions, onColumnDragEnd]);
  var rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);
  var colCount = (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) + (adjustedColumns ? adjustedColumns.length : 0) + (groups ? 1 : 0);
  var classNames = React19.useMemo(function() {
    return getClassNames12(styles, {
      theme,
      compact,
      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,
      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,
      className
    });
  }, [styles, theme, compact, layoutMode, constrainMode, className]);
  var onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;
  var finalOnRenderDetailsGroupFooter = React19.useMemo(function() {
    return onRenderDetailsGroupFooter ? function(groupFooterProps, defaultRender) {
      return onRenderDetailsGroupFooter(__assign(__assign({}, groupFooterProps), { columns: adjustedColumns, groupNestingDepth, indentWidth, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps }), defaultRender);
    } : void 0;
  }, [
    onRenderDetailsGroupFooter,
    adjustedColumns,
    groupNestingDepth,
    indentWidth,
    selection,
    selectionMode,
    viewport,
    checkboxVisibility,
    cellStyleProps
  ]);
  var onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;
  var finalOnRenderDetailsGroupHeader = React19.useMemo(function() {
    return onRenderDetailsGroupHeader ? function(groupHeaderProps, defaultRender) {
      var _a2, _b2;
      var groupIndex = groupHeaderProps.groupIndex;
      var groupKey = groupIndex !== void 0 ? (_b2 = (_a2 = groupHeaderProps.groups) === null || _a2 === void 0 ? void 0 : _a2[groupIndex]) === null || _b2 === void 0 ? void 0 : _b2.key : void 0;
      var totalRowCount = groupKey !== void 0 && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].totalRowCount : 0;
      return onRenderDetailsGroupHeader(__assign(__assign({}, groupHeaderProps), { columns: adjustedColumns, groupNestingDepth, indentWidth, selection, selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none, viewport, checkboxVisibility, cellStyleProps, ariaColSpan: adjustedColumns.length, ariaLevel: void 0, ariaPosInSet: void 0, ariaSetSize: void 0, ariaRowCount: void 0, ariaRowIndex: groupIndex !== void 0 ? totalRowCount + (isHeaderVisible ? 1 : 0) : void 0 }), defaultRender);
    } : function(groupHeaderProps, defaultRender) {
      var _a2, _b2;
      var groupIndex = groupHeaderProps.groupIndex;
      var groupKey = groupIndex !== void 0 ? (_b2 = (_a2 = groupHeaderProps.groups) === null || _a2 === void 0 ? void 0 : _a2[groupIndex]) === null || _b2 === void 0 ? void 0 : _b2.key : void 0;
      var totalRowCount = groupKey !== void 0 && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].totalRowCount : 0;
      return defaultRender(__assign(__assign({}, groupHeaderProps), { ariaColSpan: adjustedColumns.length, ariaLevel: void 0, ariaPosInSet: void 0, ariaSetSize: void 0, ariaRowCount: void 0, ariaRowIndex: groupIndex !== void 0 ? totalRowCount + (isHeaderVisible ? 1 : 0) : void 0 }));
    };
  }, [
    onRenderDetailsGroupHeader,
    adjustedColumns,
    groupNestingDepth,
    indentWidth,
    isHeaderVisible,
    selection,
    selectionMode,
    viewport,
    checkboxVisibility,
    cellStyleProps,
    groupedDetailsListIndexMap
  ]);
  var finalGroupProps = React19.useMemo(function() {
    var _a2;
    return __assign(__assign({}, groupProps), {
      role: role === defaultRole ? "rowgroup" : "presentation",
      onRenderFooter: finalOnRenderDetailsGroupFooter,
      onRenderHeader: finalOnRenderDetailsGroupHeader,
      headerProps: __assign(__assign({}, groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps), { selectAllButtonProps: __assign({ "aria-label": checkButtonGroupAriaLabel }, (_a2 = groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps) === null || _a2 === void 0 ? void 0 : _a2.selectAllButtonProps) })
    });
  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);
  var sumColumnWidths = useConst(function() {
    return memoizeFunction(function(columns) {
      var totalWidth = 0;
      columns.forEach(function(column) {
        return totalWidth += column.calculatedWidth || column.minWidth;
      });
      return totalWidth;
    });
  });
  var collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;
  var rowWidth = React19.useMemo(function() {
    return sumColumnWidths(adjustedColumns);
  }, [adjustedColumns, sumColumnWidths]);
  var onRenderCell = React19.useCallback(function(nestingDepth, item, index, group) {
    var finalOnRenderRow = props.onRenderRow ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow) : onRenderDefaultRow;
    var groupKey = group ? group.key : void 0;
    var numOfGroupHeadersBeforeItem = groupKey && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem : 0;
    var rowRole = role === defaultRole ? void 0 : "presentation";
    var rowProps = {
      item,
      itemIndex: index,
      flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,
      compact,
      columns: adjustedColumns,
      groupNestingDepth: nestingDepth,
      id: rowId + "-" + index,
      selectionMode,
      selection,
      onDidMount: onRowDidMount,
      onWillUnmount: onRowWillUnmount,
      onRenderItemColumn,
      onRenderField,
      getCellValueKey,
      eventsToRegister,
      dragDropEvents,
      dragDropHelper,
      viewport,
      checkboxVisibility,
      collapseAllVisibility,
      getRowAriaLabel,
      getRowAriaDescribedBy,
      checkButtonAriaLabel,
      checkboxCellClassName,
      useReducedRowRenderer,
      indentWidth,
      cellStyleProps,
      onRenderDetailsCheckbox: onRenderCheckbox,
      enableUpdateAnimations,
      rowWidth,
      useFastIcons,
      role: rowRole,
      isGridRow: true
    };
    if (!item) {
      if (onRenderMissingItem) {
        return onRenderMissingItem(index, rowProps);
      }
      return null;
    }
    return finalOnRenderRow(rowProps);
  }, [
    compact,
    adjustedColumns,
    selectionMode,
    selection,
    rowId,
    onRowDidMount,
    onRowWillUnmount,
    onRenderItemColumn,
    onRenderField,
    getCellValueKey,
    eventsToRegister,
    dragDropEvents,
    dragDropHelper,
    viewport,
    checkboxVisibility,
    collapseAllVisibility,
    getRowAriaLabel,
    getRowAriaDescribedBy,
    isHeaderVisible,
    checkButtonAriaLabel,
    checkboxCellClassName,
    useReducedRowRenderer,
    indentWidth,
    cellStyleProps,
    onRenderCheckbox,
    enableUpdateAnimations,
    useFastIcons,
    onRenderDefaultRow,
    onRenderMissingItem,
    props.onRenderRow,
    rowWidth,
    role,
    groupedDetailsListIndexMap
  ]);
  var onRenderListCell = React19.useCallback(function(nestingDepth) {
    return function(item, itemIndex) {
      return onRenderCell(nestingDepth, item, itemIndex);
    };
  }, [onRenderCell]);
  var isRightArrow = React19.useCallback(function(event) {
    return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);
  }, [theme]);
  var focusZoneInnerProps = __assign(__assign({}, focusZoneProps), { componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef, className: classNames.focusZone, direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical, shouldEnterInnerZone: focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow, onActiveElementChanged: focusZoneProps && focusZoneProps.onActiveElementChanged ? focusZoneProps.onActiveElementChanged : onActiveRowChanged, shouldRaiseClicksOnEnter: false, onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur });
  var list = groups ? React19.createElement(GroupedList, { focusZoneProps: focusZoneInnerProps, componentRef: groupedListRef, groups, groupProps: finalGroupProps, items, onRenderCell, role: "presentation", selection, selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none, dragDropEvents, dragDropHelper, eventsToRegister: rowElementEventMap, listProps: additionalListProps, onGroupExpandStateChanged, usePageCache, onShouldVirtualize, getGroupHeight, compact }) : React19.createElement(
    FocusZone,
    __assign({}, focusZoneInnerProps),
    React19.createElement(List, __assign({ ref: listRef, role: "presentation", items, onRenderCell: onRenderListCell(0), usePageCache, onShouldVirtualize }, additionalListProps))
  );
  var onHeaderKeyDown = React19.useCallback(function(ev) {
    if (ev.which === KeyCodes.down) {
      if (focusZoneRef.current && focusZoneRef.current.focus()) {
        if (isSelectedOnFocus && selection.getSelectedIndices().length === 0) {
          selection.setIndexSelected(0, true, false);
        }
        ev.preventDefault();
        ev.stopPropagation();
      }
    }
  }, [selection, focusZoneRef, isSelectedOnFocus]);
  var onContentKeyDown = React19.useCallback(function(ev) {
    if (ev.which === KeyCodes.up && !ev.altKey) {
      if (headerRef.current && headerRef.current.focus()) {
        ev.preventDefault();
        ev.stopPropagation();
      }
    }
  }, [headerRef]);
  return React19.createElement(
    "div",
    __assign({ ref: rootRef, className: classNames.root, "data-automationid": "DetailsList", "data-is-scrollable": "false" }, shouldApplyApplicationRole ? { role: "application" } : {}),
    React19.createElement(FocusRects, null),
    React19.createElement(
      "div",
      { role, "aria-label": ariaLabelForGrid || ariaLabel, "aria-rowcount": isPlaceholderData ? 0 : rowCount, "aria-colcount": colCount, "aria-readonly": "true", "aria-busy": isPlaceholderData },
      React19.createElement("div", { onKeyDown: onHeaderKeyDown, role: "presentation", className: classNames.headerWrapper }, isHeaderVisible && onRenderDetailsHeader({
        componentRef: headerRef,
        selectionMode,
        layoutMode,
        selection,
        columns: adjustedColumns,
        onColumnClick: onColumnHeaderClick,
        onColumnContextMenu: onColumnHeaderContextMenu,
        onColumnResized,
        onColumnIsSizingChanged,
        onColumnAutoResized,
        groupNestingDepth,
        isAllCollapsed: isCollapsed,
        onToggleCollapseAll: onToggleCollapse,
        ariaLabel: ariaLabelForListHeader,
        ariaLabelForSelectAllCheckbox,
        ariaLabelForSelectionColumn,
        selectAllVisibility,
        collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,
        viewport,
        columnReorderProps,
        minimumPixelsForDrag,
        cellStyleProps,
        checkboxVisibility,
        indentWidth,
        onRenderDetailsCheckbox: onRenderCheckbox,
        rowWidth: sumColumnWidths(adjustedColumns),
        useFastIcons
      }, onRenderDetailsHeader)),
      React19.createElement("div", { onKeyDown: onContentKeyDown, role: "presentation", className: classNames.contentWrapper }, !disableSelectionZone ? React19.createElement(SelectionZone, __assign({ ref: selectionZoneRef, selection, selectionPreservedOnEmptyClick, selectionMode, isSelectedOnFocus, selectionClearedOnEscapePress: isSelectedOnFocus, toggleWithoutModifierPressed: !isSelectedOnFocus, onItemInvoked, onItemContextMenu, enterModalOnTouch: enterModalSelectionOnTouch }, selectionZoneProps || {}), list) : list),
      onRenderDetailsFooter(__assign({}, detailsFooterProps))
    )
  );
};
var DetailsListBase = function(_super) {
  __extends(DetailsListBase2, _super);
  function DetailsListBase2(props) {
    var _this = _super.call(this, props) || this;
    _this._root = React19.createRef();
    _this._header = React19.createRef();
    _this._groupedList = React19.createRef();
    _this._list = React19.createRef();
    _this._focusZone = React19.createRef();
    _this._selectionZone = React19.createRef();
    _this._onRenderRow = function(props2, defaultRender) {
      return React19.createElement(DetailsRow, __assign({}, props2));
    };
    _this._getDerivedStateFromProps = function(nextProps, previousState) {
      var _a = _this.props, checkboxVisibility = _a.checkboxVisibility, items = _a.items, setKey = _a.setKey, _b = _a.selectionMode, selectionMode = _b === void 0 ? _this._selection.mode : _b, columns = _a.columns, viewport = _a.viewport, compact = _a.compact, dragDropEvents = _a.dragDropEvents;
      var _c = (_this.props.groupProps || {}).isAllGroupsCollapsed, isAllGroupsCollapsed = _c === void 0 ? void 0 : _c;
      var newViewportWidth = nextProps.viewport && nextProps.viewport.width || 0;
      var oldViewportWidth = viewport && viewport.width || 0;
      var shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === void 0;
      var shouldForceUpdates = false;
      if (nextProps.layoutMode !== _this.props.layoutMode) {
        shouldForceUpdates = true;
      }
      var nextState = previousState;
      if (shouldResetSelection) {
        _this._initialFocusedIndex = nextProps.initialFocusedIndex;
        nextState = __assign(__assign({}, nextState), { focusedItemIndex: _this._initialFocusedIndex !== void 0 ? _this._initialFocusedIndex : -1 });
      }
      if (!_this.props.disableSelectionZone && nextProps.items !== items) {
        _this._selection.setItems(nextProps.items, shouldResetSelection);
      }
      if (nextProps.checkboxVisibility !== checkboxVisibility || nextProps.columns !== columns || newViewportWidth !== oldViewportWidth || nextProps.compact !== compact) {
        shouldForceUpdates = true;
      }
      nextState = __assign(__assign({}, nextState), _this._adjustColumns(nextProps, nextState, true));
      if (nextProps.selectionMode !== selectionMode) {
        shouldForceUpdates = true;
      }
      if (isAllGroupsCollapsed === void 0 && nextProps.groupProps && nextProps.groupProps.isAllGroupsCollapsed !== void 0) {
        nextState = __assign(__assign({}, nextState), { isCollapsed: nextProps.groupProps.isAllGroupsCollapsed, isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed });
      }
      if (nextProps.dragDropEvents !== dragDropEvents) {
        _this._dragDropHelper && _this._dragDropHelper.dispose();
        _this._dragDropHelper = nextProps.dragDropEvents ? new DragDropHelper({
          selection: _this._selection,
          minimumPixelsForDrag: nextProps.minimumPixelsForDrag
        }) : void 0;
        shouldForceUpdates = true;
      }
      if (shouldForceUpdates) {
        nextState = __assign(__assign({}, nextState), { version: {} });
      }
      return nextState;
    };
    _this._onGroupExpandStateChanged = function(isSomeGroupExpanded) {
      _this.setState({ isSomeGroupExpanded });
    };
    _this._onColumnIsSizingChanged = function(column, isSizing) {
      _this.setState({ isSizing });
    };
    _this._onRowDidMount = function(row) {
      var _a = row.props, item = _a.item, itemIndex = _a.itemIndex;
      var itemKey = _this._getItemKey(item, itemIndex);
      _this._activeRows[itemKey] = row;
      _this._setFocusToRowIfPending(row);
      var onRowDidMount = _this.props.onRowDidMount;
      if (onRowDidMount) {
        onRowDidMount(item, itemIndex);
      }
    };
    _this._onRowWillUnmount = function(row) {
      var onRowWillUnmount = _this.props.onRowWillUnmount;
      var _a = row.props, item = _a.item, itemIndex = _a.itemIndex;
      var itemKey = _this._getItemKey(item, itemIndex);
      delete _this._activeRows[itemKey];
      if (onRowWillUnmount) {
        onRowWillUnmount(item, itemIndex);
      }
    };
    _this._onToggleCollapse = function(collapsed) {
      _this.setState({
        isCollapsed: collapsed
      });
      if (_this._groupedList.current) {
        _this._groupedList.current.toggleCollapseAll(collapsed);
      }
    };
    _this._onColumnResized = function(resizingColumn, newWidth, resizingColumnIndex) {
      var newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);
      if (_this.props.onColumnResize) {
        _this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);
      }
      _this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);
      _this.setState(__assign(__assign({}, _this._adjustColumns(_this.props, _this.state, true, resizingColumnIndex)), { version: {} }));
    };
    _this._onColumnAutoResized = function(column, columnIndex) {
      var max = 0;
      var count = 0;
      var totalCount = Object.keys(_this._activeRows).length;
      for (var key in _this._activeRows) {
        if (_this._activeRows.hasOwnProperty(key)) {
          var currentRow = _this._activeRows[key];
          currentRow.measureCell(columnIndex, function(width) {
            max = Math.max(max, width);
            count++;
            if (count === totalCount) {
              _this._onColumnResized(column, max, columnIndex);
            }
          });
        }
      }
    };
    _this._onActiveRowChanged = function(el, ev) {
      var _a = _this.props, items = _a.items, onActiveItemChanged = _a.onActiveItemChanged;
      if (!el) {
        return;
      }
      if (el.getAttribute("data-item-index")) {
        var index = Number(el.getAttribute("data-item-index"));
        if (index >= 0) {
          if (onActiveItemChanged) {
            onActiveItemChanged(items[index], index, ev);
          }
          _this.setState({
            focusedItemIndex: index
          });
        }
      }
    };
    _this._onBlur = function(event) {
      _this.setState({
        focusedItemIndex: -1
      });
    };
    initializeComponentRef(_this);
    _this._async = new Async(_this);
    _this._activeRows = {};
    _this._columnOverrides = {};
    _this.state = {
      focusedItemIndex: -1,
      lastWidth: 0,
      adjustedColumns: _this._getAdjustedColumns(props, void 0),
      isSizing: false,
      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,
      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,
      version: {},
      getDerivedStateFromProps: _this._getDerivedStateFromProps
    };
    _this._selection = props.selection || new Selection({
      onSelectionChanged: void 0,
      getKey: props.getKey,
      selectionMode: props.selectionMode
    });
    if (!_this.props.disableSelectionZone) {
      _this._selection.setItems(props.items, false);
    }
    _this._dragDropHelper = props.dragDropEvents ? new DragDropHelper({
      selection: _this._selection,
      minimumPixelsForDrag: props.minimumPixelsForDrag
    }) : void 0;
    _this._initialFocusedIndex = props.initialFocusedIndex;
    return _this;
  }
  DetailsListBase2.getDerivedStateFromProps = function(nextProps, previousState) {
    return previousState.getDerivedStateFromProps(nextProps, previousState);
  };
  DetailsListBase2.prototype.scrollToIndex = function(index, measureItem, scrollToMode) {
    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);
    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);
  };
  DetailsListBase2.prototype.focusIndex = function(index, forceIntoFirstElement, measureItem, scrollToMode) {
    if (forceIntoFirstElement === void 0) {
      forceIntoFirstElement = false;
    }
    var item = this.props.items[index];
    if (item) {
      this.scrollToIndex(index, measureItem, scrollToMode);
      var itemKey = this._getItemKey(item, index);
      var row = this._activeRows[itemKey];
      if (row) {
        this._setFocusToRow(row, forceIntoFirstElement);
      }
    }
  };
  DetailsListBase2.prototype.getStartItemIndexInView = function() {
    if (this._list && this._list.current) {
      return this._list.current.getStartItemIndexInView();
    } else if (this._groupedList && this._groupedList.current) {
      return this._groupedList.current.getStartItemIndexInView();
    }
    return 0;
  };
  DetailsListBase2.prototype.updateColumn = function(column, options) {
    var _a, _b;
    var NO_COLUMNS3 = [];
    var _c = this.props, _d = _c.columns, columns = _d === void 0 ? NO_COLUMNS3 : _d, selectionMode = _c.selectionMode, checkboxVisibility = _c.checkboxVisibility, columnReorderOptions = _c.columnReorderOptions;
    var width = options.width, newColumnIndex = options.newColumnIndex;
    var index = columns.findIndex(function(col) {
      return col.key === column.key;
    });
    if (width) {
      this._onColumnResized(column, width, index);
    }
    if (newColumnIndex !== void 0 && columnReorderOptions) {
      var isCheckboxColumnHidden = selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;
      var showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;
      var columnIndex = (showCheckbox ? 2 : 1) + index;
      var draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;
      var targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;
      var frozenColumnCountFromStart = (_a = columnReorderOptions.frozenColumnCountFromStart) !== null && _a !== void 0 ? _a : 0;
      var frozenColumnCountFromEnd = (_b = columnReorderOptions.frozenColumnCountFromEnd) !== null && _b !== void 0 ? _b : 0;
      var isValidTargetIndex = targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;
      if (isValidTargetIndex) {
        if (columnReorderOptions.onColumnDrop) {
          var dragDropDetails = {
            draggedIndex,
            targetIndex
          };
          columnReorderOptions.onColumnDrop(dragDropDetails);
        } else if (columnReorderOptions.handleColumnReorder) {
          columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);
        }
      }
    }
  };
  DetailsListBase2.prototype.componentWillUnmount = function() {
    if (this._dragDropHelper) {
      this._dragDropHelper.dispose();
    }
    this._async.dispose();
  };
  DetailsListBase2.prototype.componentDidUpdate = function(prevProps, prevState) {
    this._notifyColumnsResized();
    if (this._initialFocusedIndex !== void 0) {
      var item = this.props.items[this._initialFocusedIndex];
      if (item) {
        var itemKey = this._getItemKey(item, this._initialFocusedIndex);
        var row = this._activeRows[itemKey];
        if (row) {
          this._setFocusToRowIfPending(row);
        }
      }
    }
    if (this.props.items !== prevProps.items && this.props.items.length > 0 && this.state.focusedItemIndex !== -1 && !elementContains(this._root.current, document.activeElement, false)) {
      var index = this.state.focusedItemIndex < this.props.items.length ? this.state.focusedItemIndex : this.props.items.length - 1;
      var item = this.props.items[index];
      var itemKey = this._getItemKey(item, this.state.focusedItemIndex);
      var row = this._activeRows[itemKey];
      if (row) {
        this._setFocusToRow(row);
      } else {
        this._initialFocusedIndex = index;
      }
    }
    if (this.props.onDidUpdate) {
      this.props.onDidUpdate(this);
    }
  };
  DetailsListBase2.prototype.render = function() {
    return React19.createElement(DetailsListInner, __assign({}, this.props, this.state, { selection: this._selection, dragDropHelper: this._dragDropHelper, rootRef: this._root, listRef: this._list, groupedListRef: this._groupedList, focusZoneRef: this._focusZone, headerRef: this._header, selectionZoneRef: this._selectionZone, onGroupExpandStateChanged: this._onGroupExpandStateChanged, onColumnIsSizingChanged: this._onColumnIsSizingChanged, onRowDidMount: this._onRowDidMount, onRowWillUnmount: this._onRowWillUnmount, onColumnResized: this._onColumnResized, onColumnAutoResized: this._onColumnAutoResized, onToggleCollapse: this._onToggleCollapse, onActiveRowChanged: this._onActiveRowChanged, onBlur: this._onBlur, onRenderDefaultRow: this._onRenderRow }));
  };
  DetailsListBase2.prototype.forceUpdate = function() {
    _super.prototype.forceUpdate.call(this);
    this._forceListUpdates();
  };
  DetailsListBase2.prototype._getGroupNestingDepth = function() {
    var groups = this.props.groups;
    var level = 0;
    var groupsInLevel = groups;
    while (groupsInLevel && groupsInLevel.length > 0) {
      level++;
      groupsInLevel = groupsInLevel[0].children;
    }
    return level;
  };
  DetailsListBase2.prototype._setFocusToRowIfPending = function(row) {
    var itemIndex = row.props.itemIndex;
    if (this._initialFocusedIndex !== void 0 && itemIndex === this._initialFocusedIndex) {
      this._setFocusToRow(row);
      delete this._initialFocusedIndex;
    }
  };
  DetailsListBase2.prototype._setFocusToRow = function(row, forceIntoFirstElement) {
    if (forceIntoFirstElement === void 0) {
      forceIntoFirstElement = false;
    }
    if (this._selectionZone.current) {
      this._selectionZone.current.ignoreNextFocus();
    }
    this._async.setTimeout(function() {
      row.focus(forceIntoFirstElement);
    }, 0);
  };
  DetailsListBase2.prototype._forceListUpdates = function() {
    if (this._groupedList.current) {
      this._groupedList.current.forceUpdate();
    }
    if (this._list.current) {
      this._list.current.forceUpdate();
    }
  };
  DetailsListBase2.prototype._notifyColumnsResized = function() {
    this.state.adjustedColumns.forEach(function(column) {
      if (column.onColumnResize) {
        column.onColumnResize(column.currentWidth);
      }
    });
  };
  DetailsListBase2.prototype._adjustColumns = function(newProps, previousState, forceUpdate, resizingColumnIndex) {
    var adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);
    var viewport = this.props.viewport;
    var viewportWidth = viewport && viewport.width ? viewport.width : 0;
    return __assign(__assign({}, previousState), { adjustedColumns, lastWidth: viewportWidth });
  };
  DetailsListBase2.prototype._getAdjustedColumns = function(newProps, previousState, forceUpdate, resizingColumnIndex) {
    var _this = this;
    var newItems = newProps.items, layoutMode = newProps.layoutMode, selectionMode = newProps.selectionMode, viewport = newProps.viewport;
    var viewportWidth = viewport && viewport.width ? viewport.width : 0;
    var newColumns = newProps.columns;
    var columns = this.props ? this.props.columns : [];
    var lastWidth = previousState ? previousState.lastWidth : -1;
    var lastSelectionMode = previousState ? previousState.lastSelectionMode : void 0;
    if (!forceUpdate && lastWidth === viewportWidth && lastSelectionMode === selectionMode && (!columns || newColumns === columns)) {
      return newColumns || [];
    }
    newColumns = newColumns || buildColumns(newItems, true);
    var adjustedColumns;
    if (layoutMode === DetailsListLayoutMode.fixedColumns) {
      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);
      adjustedColumns.forEach(function(column) {
        _this._rememberCalculatedWidth(column, column.calculatedWidth);
      });
    } else {
      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);
      adjustedColumns.forEach(function(column) {
        _this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;
      });
    }
    return adjustedColumns;
  };
  DetailsListBase2.prototype._getFixedColumns = function(newColumns, viewportWidth, props) {
    var _this = this;
    var _a = this.props, _b = _a.selectionMode, selectionMode = _b === void 0 ? this._selection.mode : _b, checkboxVisibility = _a.checkboxVisibility, flexMargin = _a.flexMargin, skipViewportMeasures = _a.skipViewportMeasures;
    var remainingWidth = viewportWidth - (flexMargin || 0);
    var sumProportionalWidth = 0;
    newColumns.forEach(function(col) {
      if (skipViewportMeasures || !col.flexGrow) {
        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;
      } else {
        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;
        sumProportionalWidth += col.flexGrow;
      }
      remainingWidth -= getPaddedWidth(col, props, true);
    });
    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECK_CELL_WIDTH : 0;
    var groupExpandWidth = this._getGroupNestingDepth() * SPACER_WIDTH;
    remainingWidth -= rowCheckWidth + groupExpandWidth;
    var widthFraction = remainingWidth / sumProportionalWidth;
    if (!skipViewportMeasures) {
      newColumns.forEach(function(column) {
        var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]);
        if (newColumn.flexGrow && newColumn.maxWidth) {
          var fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;
          var shrinkWidth = fullWidth - newColumn.maxWidth;
          if (shrinkWidth > 0) {
            remainingWidth += shrinkWidth;
            sumProportionalWidth -= shrinkWidth / (fullWidth - newColumn.minWidth) * newColumn.flexGrow;
          }
        }
      });
    }
    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;
    return newColumns.map(function(column) {
      var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]);
      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {
        return newColumn;
      }
      if (!newColumn.calculatedWidth) {
        if (!skipViewportMeasures && newColumn.flexGrow) {
          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;
          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);
        } else {
          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;
        }
      }
      return newColumn;
    });
  };
  DetailsListBase2.prototype._getJustifiedColumns = function(newColumns, viewportWidth, props) {
    var _this = this;
    var _a = props.selectionMode, selectionMode = _a === void 0 ? this._selection.mode : _a, checkboxVisibility = props.checkboxVisibility;
    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECK_CELL_WIDTH : 0;
    var groupExpandWidth = this._getGroupNestingDepth() * SPACER_WIDTH;
    var totalWidth = 0;
    var minimumWidth = 0;
    var availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);
    var adjustedColumns = newColumns.map(function(column2, i2) {
      var baseColumn = __assign(__assign({}, column2), { calculatedWidth: column2.minWidth || MIN_COLUMN_WIDTH });
      var newColumn = __assign(__assign({}, baseColumn), _this._columnOverrides[column2.key]);
      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {
        minimumWidth += getPaddedWidth(baseColumn, props);
      }
      totalWidth += getPaddedWidth(newColumn, props);
      return newColumn;
    });
    if (minimumWidth > availableWidth) {
      return adjustedColumns;
    }
    var lastIndex = adjustedColumns.length - 1;
    while (lastIndex >= 0 && totalWidth > availableWidth) {
      var column = adjustedColumns[lastIndex];
      var minWidth = column.minWidth || MIN_COLUMN_WIDTH;
      var overflowWidth = totalWidth - availableWidth;
      if (column.calculatedWidth - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {
        var originalWidth = column.calculatedWidth;
        column.calculatedWidth = Math.max(column.calculatedWidth - overflowWidth, minWidth);
        totalWidth -= originalWidth - column.calculatedWidth;
      } else {
        totalWidth -= getPaddedWidth(column, props);
        adjustedColumns.splice(lastIndex, 1);
      }
      lastIndex--;
    }
    for (var i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {
      var column = adjustedColumns[i];
      var isLast = i === adjustedColumns.length - 1;
      var overrides = this._columnOverrides[column.key];
      if (overrides && overrides.calculatedWidth && !isLast) {
        continue;
      }
      var spaceLeft = availableWidth - totalWidth;
      var increment = void 0;
      if (isLast) {
        increment = spaceLeft;
      } else {
        var maxWidth = column.maxWidth;
        var minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;
        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;
      }
      column.calculatedWidth = column.calculatedWidth + increment;
      totalWidth += increment;
    }
    return adjustedColumns;
  };
  DetailsListBase2.prototype._rememberCalculatedWidth = function(column, newCalculatedWidth) {
    var overrides = this._getColumnOverride(column.key);
    overrides.calculatedWidth = newCalculatedWidth;
    overrides.currentWidth = newCalculatedWidth;
  };
  DetailsListBase2.prototype._getColumnOverride = function(key) {
    return this._columnOverrides[key] = this._columnOverrides[key] || {};
  };
  DetailsListBase2.prototype._getItemKey = function(item, itemIndex) {
    var getKey = this.props.getKey;
    var itemKey = void 0;
    if (item) {
      itemKey = item.key;
    }
    if (getKey) {
      itemKey = getKey(item, itemIndex);
    }
    if (!itemKey) {
      itemKey = itemIndex;
    }
    return itemKey;
  };
  DetailsListBase2.defaultProps = {
    layoutMode: DetailsListLayoutMode.justified,
    selectionMode: SelectionMode.multiple,
    constrainMode: ConstrainMode.horizontalConstrained,
    checkboxVisibility: CheckboxVisibility.onHover,
    isHeaderVisible: true,
    compact: false,
    useFastIcons: true
  };
  DetailsListBase2 = __decorate([
    withViewport
  ], DetailsListBase2);
  return DetailsListBase2;
}(React19.Component);
function buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, isMultiline, columnActionsMode) {
  var columns = [];
  if (items && items.length) {
    var firstItem = items[0];
    for (var propName in firstItem) {
      if (firstItem.hasOwnProperty(propName)) {
        columns.push({
          key: propName,
          name: propName,
          fieldName: propName,
          minWidth: MIN_COLUMN_WIDTH,
          maxWidth: 300,
          isCollapsable: !!columns.length,
          isCollapsible: !!columns.length,
          isMultiline: isMultiline === void 0 ? false : isMultiline,
          isSorted: sortedColumnKey === propName,
          isSortedDescending: !!isSortedDescending,
          isRowHeader: false,
          columnActionsMode: columnActionsMode !== null && columnActionsMode !== void 0 ? columnActionsMode : ColumnActionsMode.clickable,
          isResizable: canResizeColumns,
          onColumnClick,
          isGrouped: groupedColumnKey === propName
        });
      }
    }
  }
  return columns;
}
function getPaddedWidth(column, props, paddingOnly) {
  var _a = props.cellStyleProps, cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;
  return (paddingOnly ? 0 : column.calculatedWidth) + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);
}
function getGroupNestingDepth(groups) {
  var level = 0;
  var groupsInLevel = groups;
  while (groupsInLevel && groupsInLevel.length > 0) {
    level++;
    groupsInLevel = groupsInLevel[0].children;
  }
  return level;
}
function useGroupedDetailsListIndexMap(groups) {
  return React19.useMemo(function() {
    var indexMap = {};
    if (groups) {
      var rowCount = 1;
      var numGroupHeaders = 1;
      for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
        var group = groups_1[_i];
        var key = group.key;
        indexMap[key] = { numOfGroupHeadersBeforeItem: numGroupHeaders, totalRowCount: rowCount };
        numGroupHeaders++;
        rowCount += group.count + 1;
      }
    }
    return indexMap;
  }, [groups]);
}

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsList.styles.js
var GlobalClassNames10 = {
  root: "ms-DetailsList",
  compact: "ms-DetailsList--Compact",
  contentWrapper: "ms-DetailsList-contentWrapper",
  headerWrapper: "ms-DetailsList-headerWrapper",
  isFixed: "is-fixed",
  isHorizontalConstrained: "is-horizontalConstrained",
  listCell: "ms-List-cell"
};
var getDetailsListStyles = function(props) {
  var _a, _b;
  var theme = props.theme, className = props.className, isHorizontalConstrained = props.isHorizontalConstrained, compact = props.compact, isFixed = props.isFixed;
  var semanticColors = theme.semanticColors;
  var classNames = getGlobalClassNames(GlobalClassNames10, theme);
  return {
    root: [
      classNames.root,
      theme.fonts.small,
      {
        position: "relative",
        color: semanticColors.listText,
        selectors: (_a = {}, _a["& ." + classNames.listCell] = {
          minHeight: 38,
          wordBreak: "break-word"
        }, _a)
      },
      isFixed && classNames.isFixed,
      compact && [
        classNames.compact,
        {
          selectors: (_b = {}, _b["." + classNames.listCell] = {
            minHeight: 32
          }, _b)
        }
      ],
      isHorizontalConstrained && [
        classNames.isHorizontalConstrained,
        {
          overflowX: "auto",
          overflowY: "visible",
          WebkitOverflowScrolling: "touch"
        }
      ],
      className
    ],
    focusZone: [
      {
        display: "inline-block",
        minWidth: "100%",
        minHeight: 1
      }
    ],
    headerWrapper: classNames.headerWrapper,
    contentWrapper: classNames.contentWrapper
  };
};

// node_modules/@fluentui/react/lib/components/DetailsList/DetailsList.js
var DetailsList = styled(DetailsListBase, getDetailsListStyles, void 0, {
  scope: "DetailsList"
});

export {
  LinkBase,
  Link,
  CheckBase,
  Check,
  ScrollToMode,
  List,
  SelectionZone,
  CollapseAllVisibility,
  ColumnActionsMode,
  ConstrainMode,
  ColumnDragEndLocation,
  DetailsListLayoutMode,
  CheckboxVisibility,
  GroupSpacer,
  DetailsRowGlobalClassNames,
  DEFAULT_CELL_STYLE_PROPS,
  DEFAULT_ROW_HEIGHTS,
  getDetailsRowStyles,
  HEADER_HEIGHT,
  getCellStyles,
  getDetailsHeaderStyles,
  CHECK_CELL_WIDTH,
  getDetailsRowCheckStyles,
  SpinnerSize,
  SpinnerType,
  SpinnerBase,
  Spinner,
  GroupHeader,
  GroupShowAll,
  GroupFooter,
  GroupedListSection,
  GroupedListBase,
  GroupedList,
  DetailsRowCheck,
  DragDropHelper,
  DetailsColumnBase,
  getDetailsColumnStyles,
  DetailsColumn,
  SelectAllVisibility,
  DetailsHeaderBase,
  DetailsHeader,
  DetailsRowFields,
  DetailsRowBase,
  DetailsRow,
  DetailsListBase,
  buildColumns,
  getDetailsListStyles,
  DetailsList
};
//# sourceMappingURL=chunk-W6GKZDF7.js.map
