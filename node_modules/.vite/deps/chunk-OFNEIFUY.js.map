{
  "version": 3,
  "sources": ["../../@fluentui/react/lib/version.ts", "../../@fluentui/react-window-provider/lib/WindowProvider.tsx", "../../@fluentui/react/lib/components/Fabric/components/Fabric/Fabric.base.tsx", "../../@fluentui/react-hooks/lib/version.ts", "../../@fluentui/react-hooks/lib/useAsync.ts", "../../@fluentui/react-hooks/lib/useBoolean.ts", "../../@fluentui/react-hooks/lib/useConst.ts", "../../@fluentui/react-hooks/lib/useConstCallback.ts", "../../@fluentui/react-hooks/lib/useControllableValue.ts", "../../@fluentui/react-hooks/lib/useEventCallback.ts", "../../@fluentui/react-hooks/lib/useForceUpdate.ts", "../../@fluentui/react-hooks/lib/useId.ts", "../../@fluentui/react-hooks/lib/useMergedRefs.ts", "../../@fluentui/react-hooks/lib/useMount.ts", "../../@fluentui/react-hooks/lib/useMountSync.ts", "../../@fluentui/react-hooks/lib/useOnEvent.ts", "../../@fluentui/react-hooks/lib/usePrevious.ts", "../../@fluentui/react-hooks/lib/useRefEffect.ts", "../../@fluentui/react-hooks/lib/useSetInterval.ts", "../../@fluentui/react-hooks/lib/useSetTimeout.ts", "../../@fluentui/react-hooks/lib/useTarget.ts", "../../@fluentui/react-window-provider/lib/version.ts", "../../@fluentui/react-hooks/lib/useUnmount.ts", "../../@fluentui/react-hooks/lib/useWarnings.ts", "../../@fluentui/react/lib/components/Fabric/components/Fabric/Fabric.styles.ts", "../../@fluentui/react/lib/components/Fabric/components/Fabric/Fabric.tsx", "../../@fluentui/react/lib/components/Layer/components/Layer/Layer.notification.ts", "../../@fluentui/react-portal-compat-context/lib/PortalCompatContext.ts", "../../@fluentui/react/lib/components/Layer/components/Layer/Layer.base.tsx", "../../@fluentui/react/lib/components/Layer/components/Layer/Layer.styles.ts", "../../@fluentui/react/lib/components/Layer/components/Layer/Layer.tsx", "../../@fluentui/react/lib/components/Layer/components/Layer/LayerHost.tsx"],
  "sourcesContent": ["// Do not modify this file; it is generated as part of publish.\n// The checked in version is a placeholder only and will not be updated.\nimport { setVersion } from '@fluentui/set-version';\nsetVersion('@fluentui/react', '8.86.3');", "import * as React from 'react';\n\n/**\n * Props for the WindowProvider component.\n */\nexport type WindowProviderProps = {\n  /**\n   * Provide the active window.\n   */\n  window: Window | undefined;\n};\n\n/**\n * Context for providing the window.\n */\nexport const WindowContext = React.createContext<WindowProviderProps>({\n  window: typeof window === 'object' ? window : undefined,\n});\n\n/**\n * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useWindow = (): Window | undefined => React.useContext(WindowContext).window;\n\n/**\n * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useDocument = (): Document | undefined => React.useContext(WindowContext).window?.document;\n\n/**\n * Component to provide the window object contextually. This is useful when rendering content to an element\n * contained within a child window or iframe element, where event handlers and styling must be projected\n * to an alternative window or document.\n */\nexport const WindowProvider: React.FunctionComponent<WindowProviderProps> = props => {\n  return <WindowContext.Provider value={props}>{props.children}</WindowContext.Provider>;\n};\n", "import * as React from 'react';\nimport {\n  classNamesFunction,\n  divProperties,\n  getDocument,\n  getNativeProps,\n  getRTL,\n  memoizeFunction,\n  Customizer,\n  FocusRectsContext,\n  FocusRectsProvider,\n} from '../../Utilities';\nimport { createTheme } from '../../Styling';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport type { IFabricProps, IFabricStyleProps, IFabricStyles } from './Fabric.types';\nimport type { IProcessedStyleSet } from '@fluentui/merge-styles';\nimport type { ITheme } from '../../Styling';\nimport type { IFocusRectsContext } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<IFabricStyleProps, IFabricStyles>();\nconst getFabricTheme = memoizeFunction((theme?: ITheme, isRTL?: boolean) => createTheme({ ...theme, rtl: isRTL }));\n\nconst getDir = ({ theme, dir }: IFabricProps) => {\n  const contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  const pageDir = getRTL() ? 'rtl' : 'ltr';\n  const componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir,\n  };\n};\n\nexport const FabricBase: React.FunctionComponent<IFabricProps> = React.forwardRef<HTMLDivElement, IFabricProps>(\n  (props, ref) => {\n    const { className, theme, applyTheme, applyThemeToBody, styles } = props;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      applyTheme: applyTheme,\n      className,\n    });\n\n    const rootElement = React.useRef<HTMLDivElement>(null);\n    useApplyThemeToBody(applyThemeToBody, classNames, rootElement);\n\n    return <>{useRenderedContent(props, classNames, rootElement, ref)}</>;\n  },\n);\nFabricBase.displayName = 'FabricBase';\n\nfunction useRenderedContent(\n  props: IFabricProps,\n  { root }: IProcessedStyleSet<IFabricStyles>,\n  rootElement: React.RefObject<HTMLDivElement>,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const { as: Root = 'div', dir, theme } = props;\n  const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, ['dir']);\n\n  const { rootDir, needsTheme } = getDir(props);\n\n  const { providerRef: parentProviderRef } = React.useContext(FocusRectsContext);\n  const focusRectsContext = React.useMemo<IFocusRectsContext>(\n    () => ({\n      providerRef: parentProviderRef ?? rootElement,\n    }),\n    [parentProviderRef, rootElement],\n  );\n\n  let renderedContent = (\n    <FocusRectsProvider value={focusRectsContext}>\n      <Root dir={rootDir} {...divProps} className={root} ref={useMergedRefs(rootElement, ref)} />\n    </FocusRectsProvider>\n  );\n\n  // Create the contextual theme if component direction does not match parent direction.\n  if (needsTheme) {\n    // Disabling ThemeProvider here because theme doesn't need to be re-provided by ThemeProvider if dir has changed.\n    renderedContent = (\n      // eslint-disable-next-line deprecation/deprecation\n      <Customizer settings={{ theme: getFabricTheme(theme, dir === 'rtl') }}>{renderedContent}</Customizer>\n    );\n  }\n\n  return renderedContent;\n}\n\nfunction useApplyThemeToBody(\n  applyThemeToBody: boolean | undefined,\n  { bodyThemed }: IProcessedStyleSet<IFabricStyles>,\n  rootElement: React.RefObject<HTMLDivElement | undefined>,\n) {\n  React.useEffect((): void | (() => void) => {\n    if (applyThemeToBody) {\n      const currentDoc = getDocument(rootElement.current);\n      if (currentDoc) {\n        currentDoc.body.classList.add(bodyThemed);\n        return () => {\n          currentDoc.body.classList.remove(bodyThemed);\n        };\n      }\n    }\n  }, [bodyThemed, applyThemeToBody, rootElement]);\n\n  return rootElement;\n}\n", "// Do not modify this file; it is generated as part of publish.\n// The checked in version is a placeholder only and will not be updated.\nimport { setVersion } from '@fluentui/set-version';\nsetVersion('@fluentui/react-hooks', '8.6.4');", "import { Async } from '@fluentui/utilities';\nimport * as React from 'react';\n\n/**\n * Hook to provide an Async instance that is automatically cleaned up on dismount.\n */\nexport function useAsync() {\n  const asyncRef = React.useRef<Async>();\n  if (!asyncRef.current) {\n    asyncRef.current = new Async();\n  }\n  React.useEffect(() => {\n    return () => {\n      asyncRef.current?.dispose();\n      asyncRef.current = undefined;\n    };\n  }, []);\n  return asyncRef.current;\n}\n", "import * as React from 'react';\nimport { useConst } from './useConst';\n\n/** Updater callbacks returned by `useBoolean`. */\nexport interface IUseBooleanCallbacks {\n  /** Set the value to true. Always has the same identity. */\n  setTrue: () => void;\n  /** Set the value to false. Always has the same identity. */\n  setFalse: () => void;\n  /** Toggle the value. Always has the same identity. */\n  toggle: () => void;\n}\n\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\nexport function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks] {\n  const [value, setValue] = React.useState(initialState);\n\n  const setTrue = useConst(() => () => {\n    setValue(true);\n  });\n  const setFalse = useConst(() => () => {\n    setValue(false);\n  });\n  const toggle = useConst(() => () => {\n    setValue(currentValue => !currentValue);\n  });\n\n  return [value, { setTrue, setFalse, toggle }];\n}\n", "import * as React from 'react';\n\n/**\n * Hook to initialize and return a constant value. Unlike `React.useMemo`, this is guaranteed to\n * always return the same value (and if the initializer is a function, only call it once).\n * This is similar to setting a private member in a class constructor.\n *\n * If the value should ever change based on dependencies, use `React.useMemo` instead.\n *\n * @param initialValue - Initial value, or function to get the initial value. Similar to `useState`,\n * only the value/function passed in the first time this is called is respected.\n * @returns The value. The identity of this value will always be the same.\n */\nexport function useConst<T>(initialValue: T | (() => T)): T {\n  // Use useRef to store the value because it's the least expensive built-in hook that works here\n  // (we could also use `const [value] = React.useState(initialValue)` but that's more expensive\n  // internally due to reducer handling which we don't need)\n  const ref = React.useRef<{ value: T }>();\n  if (ref.current === undefined) {\n    // Box the value in an object so we can tell if it's initialized even if the initializer\n    // returns/is undefined\n    ref.current = {\n      value: typeof initialValue === 'function' ? (initialValue as Function)() : initialValue,\n    };\n  }\n  return ref.current.value;\n}\n", "import * as React from 'react';\n\n/**\n * @deprecated Deprecated due to potential for misuse. Generally, use `React.useCallback` instead.\n * If you need a callback reference that never changes, consider `useEventCallback`.\n *\n * This hook was intended for creating callbacks which have no dependencies, and therefore never\n * need to change. It works fine if everyone using it is extremely mindful of how closures work,\n * but that's not a safe assumption--so in practice, usage of this hook tends to result in bugs\n * like unintentionally capturing the first value of a prop and not respecting updates (when\n * updates should be respected).\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useConstCallback<T extends (...args: any[]) => any>(callback: T): T {\n  const ref = React.useRef<T>();\n  if (!ref.current) {\n    ref.current = callback;\n  }\n  return ref.current;\n}\n", "import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type ChangeCallback<\n  TElement extends HTMLElement,\n  TValue,\n  TEvent extends React.SyntheticEvent<TElement> | undefined\n> = (ev: TEvent, newValue: TValue | undefined) => void;\n\n/**\n * Hook to manage a value that could be either controlled or uncontrolled, such as a checked state or\n * text box string.\n * @param controlledValue - The controlled value passed in the props. This value will always be used if provided,\n * and the internal state will be updated to reflect it.\n * @param defaultUncontrolledValue - Initial value for the internal state in the uncontrolled case.\n * @returns An array of the current value and an updater callback. Like `React.useState`, the updater\n * callback always has the same identity, and it can take either a new value, or a function which\n * is passed the previous value and returns the new value.\n * @see https://reactjs.org/docs/uncontrolled-components.html\n */\nexport function useControllableValue<TValue, TElement extends HTMLElement>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n): Readonly<[TValue | undefined, (update: React.SetStateAction<TValue | undefined>) => void]>;\nexport function useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TEvent extends React.SyntheticEvent<TElement> | undefined\n>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n  onChange: ChangeCallback<TElement, TValue, TEvent> | undefined,\n): Readonly<\n  [TValue | undefined, (update: React.SetStateAction<TValue | undefined>, ev?: React.FormEvent<TElement>) => void]\n>;\nexport function useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TEvent extends React.SyntheticEvent<TElement> | undefined\n>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n  onChange?: ChangeCallback<TElement, TValue, TEvent>,\n) {\n  const [value, setValue] = React.useState<TValue | undefined>(defaultUncontrolledValue);\n  const isControlled = useConst<boolean>(controlledValue !== undefined);\n  const currentValue = isControlled ? controlledValue : value;\n\n  // Duplicate the current value and onChange in refs so they're accessible from\n  // setValueOrCallOnChange without creating a new callback every time\n  const valueRef = React.useRef(currentValue);\n  const onChangeRef = React.useRef(onChange);\n  React.useEffect(() => {\n    valueRef.current = currentValue;\n    onChangeRef.current = onChange;\n  });\n\n  // To match the behavior of the setter returned by React.useState, this callback's identity\n  // should never change. This means it MUST NOT directly reference variables that can change.\n  const setValueOrCallOnChange = useConst(() => (update: React.SetStateAction<TValue | undefined>, ev?: TEvent) => {\n    // Assuming here that TValue is not a function, because a controllable value will typically\n    // be something a user can enter as input\n    const newValue = typeof update === 'function' ? (update as Function)(valueRef.current) : update;\n\n    if (onChangeRef.current) {\n      onChangeRef.current(ev!, newValue);\n    }\n\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  });\n\n  return [currentValue, setValueOrCallOnChange] as const;\n}\n", "import * as React from 'react';\nimport { useConst } from './useConst';\nimport { useIsomorphicLayoutEffect } from '@fluentui/utilities';\n\n/**\n * Modified `useCallback` that returns the same function reference every time, but internally calls\n * the most-recently passed callback implementation. Can be useful in situations such as:\n * - Event handler dependencies change too frequently, such as user props which might change on\n *   every render, or volatile values such as useState/useDispatch\n * - Callback must be referenced in a captured context (such as a window event handler or unmount\n *   handler that's registered once) but needs access to the latest props\n *\n * In general, prefer `useCallback` unless you've encountered one of the problems above.\n *\n * https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n *\n * @param fn - The callback function that will be used\n * @returns A function which is referentially stable but internally calls the most recently passed callback\n */\nexport function useEventCallback<Args extends unknown[], Return>(fn: (...args: Args) => Return) {\n  const callbackRef = React.useRef<typeof fn>(() => {\n    throw new Error('Cannot call an event handler while rendering');\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    callbackRef.current = fn;\n  }, [fn]);\n\n  // useConst rather than useCallback to ensure the reference is always stable\n  // (useCallback's deps list is an optimization, not a guarantee)\n  return useConst(() => (...args: Args) => {\n    const callback = callbackRef.current;\n    return callback(...args);\n  });\n}\n", "import * as React from 'react';\nimport { useConst } from './useConst';\n\n/**\n * Hook to force update a function component by updating a dummy state.\n */\nexport function useForceUpdate(): () => void {\n  const [, setValue] = React.useState(0);\n  const forceUpdate = useConst(() => () => setValue(value => ++value));\n  return forceUpdate;\n}\n", "import * as React from 'react';\nimport { getId } from '@fluentui/utilities';\n\n/**\n * Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).\n *\n * @param prefix - Optional prefix for the ID\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */\nexport function useId(prefix?: string, providedId?: string): string {\n  // getId should only be called once since it updates the global constant for the next ID value.\n  // (While an extra update isn't likely to cause problems in practice, it's better to avoid it.)\n  const ref = React.useRef<string | undefined>(providedId);\n  if (!ref.current) {\n    ref.current = getId(prefix);\n  }\n  return ref.current;\n}\n", "import * as React from 'react';\n\n/**\n * A Ref function which can be treated like a ref object in that it has an attached\n * current property, which will be updated as the ref is evaluated.\n */\nexport type RefObjectFunction<T> = React.RefObject<T> & ((value: T) => void);\n\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\nexport function useMergedRefs<T>(...refs: (React.Ref<T> | undefined)[]): RefObjectFunction<T> {\n  const mergedCallback: RefObjectFunction<T> = (React.useCallback(\n    (value: T) => {\n      // Update the \"current\" prop hanging on the function.\n      ((mergedCallback as unknown) as React.MutableRefObject<T>).current = value;\n\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref) {\n          // work around the immutability of the React.Ref type\n          ((ref as unknown) as React.MutableRefObject<T>).current = value;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive\n    [...refs],\n  ) as unknown) as RefObjectFunction<T>;\n\n  return mergedCallback;\n}\n", "import * as React from 'react';\n\n/**\n * Hook which asynchronously executes a callback once the component has been mounted.\n *\n * @param callback - Function to call before mount.\n */\nexport const useMount = (callback: () => void) => {\n  const mountRef = React.useRef(callback);\n  mountRef.current = callback;\n  React.useEffect(() => {\n    mountRef.current?.();\n  }, []);\n};\n", "import * as React from 'react';\n\n/**\n * Hook which synchronously executes a callback once the component has been mounted.\n *\n * `WARNING` This should only be used if you need to perform an action after the component has been mounted and\n * before the browser paints. useMountSync will trigger debug warnings in server-rendered scenarios and should be used\n * sparingly.\n *\n * @deprecated Consider to use React.useEffect() or React.useLayoutEffect() directly based on a use case\n *\n * @param callback - Function to call once the component has been mounted.\n */\nexport const useMountSync = (callback: () => void) => {\n  const mountRef = React.useRef(callback);\n  mountRef.current = callback;\n  // eslint-disable-next-line no-restricted-properties\n  React.useLayoutEffect(() => {\n    mountRef.current?.();\n  }, []);\n};\n", "import { on } from '@fluentui/utilities';\nimport * as React from 'react';\n\n/**\n * Hook to attach an event handler on mount and handle cleanup.\n * @param element - Element (or ref to an element) to attach the event handler to\n * @param eventName - The event to attach a handler for\n * @param callback - The handler for the event\n * @param useCapture - Whether or not to attach the handler for the capture phase\n */\nexport function useOnEvent<TElement extends Element, TEvent extends Event>(\n  element: React.RefObject<TElement | undefined | null> | TElement | Window | Document | undefined | null,\n  eventName: string,\n  callback: (ev: TEvent) => void,\n  useCapture?: boolean,\n) {\n  // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders\n  const callbackRef = React.useRef(callback);\n  callbackRef.current = callback;\n\n  React.useEffect(() => {\n    const actualElement = element && 'current' in element ? element.current : element;\n    if (!actualElement) {\n      return;\n    }\n\n    const dispose = on(actualElement, eventName, (ev: TEvent) => callbackRef.current(ev), useCapture);\n    return dispose;\n  }, [element, eventName, useCapture]);\n}\n", "import { useRef, useEffect } from 'react';\n\n/**\n * Hook keeping track of a given value from a previous execution of the component the Hook is used in.\n *\n * See [React Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state)\n */\nexport function usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T | undefined>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n", "import * as React from 'react';\n\n/**\n * A callback ref function that also has a .current member for the ref's current value.\n */\nexport type RefCallback<T> = ((value: T | null) => void) & React.RefObject<T>;\n\n/**\n * Creates a ref, and calls a callback whenever the ref changes to a non-null value. The callback can optionally return\n * a cleanup function that'll be called before the value changes, and when the ref is unmounted.\n *\n * This can be used to work around a limitation that useEffect cannot depend on `ref.current` (see\n * https://github.com/facebook/react/issues/14387#issuecomment-503616820).\n *\n * Usage example:\n * ```ts\n * const myRef = useRefEffect<HTMLElement>(element => {\n *  ...\n *  return () => { ... cleanup ... };\n * });\n * ```\n * ```jsx\n * <div ref={myRef} />\n * ```\n *\n * @param callback - Called whenever the ref's value changes to non-null. Can optionally return a cleanup function.\n * @param initial - (Optional) The initial value for the ref.\n *\n * @returns A function that should be called to set the ref's value. The object also has a `.current` member that can be\n * used to access the ref's value (like a normal RefObject). It can be hooked up to an element's `ref` property.\n */\nexport function useRefEffect<T>(callback: (value: T) => (() => void) | void, initial: T | null = null): RefCallback<T> {\n  type RefData = {\n    ref: ((value: T | null) => void) & React.MutableRefObject<T | null>;\n    callback: (value: T) => (() => void) | void;\n    cleanup?: (() => void) | void;\n  };\n\n  const createRefCallback = () => {\n    const refCallback = (value: T | null) => {\n      if (data.ref.current !== value) {\n        if (data.cleanup) {\n          data.cleanup();\n          data.cleanup = undefined;\n        }\n\n        data.ref.current = value;\n\n        if (value !== null) {\n          data.cleanup = data.callback(value);\n        }\n      }\n    };\n\n    refCallback.current = initial;\n    return refCallback;\n  };\n\n  const data = React.useRef<RefData>({\n    ref: createRefCallback(),\n    callback,\n  }).current;\n\n  data.callback = callback;\n\n  return data.ref;\n}\n", "import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type UseSetIntervalReturnType = {\n  setInterval: (callback: () => void, duration: number) => number;\n  clearInterval: (id: number) => void;\n};\n\n/**\n *  Returns a wrapper function for `setInterval` which automatically handles disposal.\n */\nexport const useSetInterval = (): UseSetIntervalReturnType => {\n  const intervalIds = useConst<Record<number, number>>({});\n\n  React.useEffect(\n    () => () => {\n      for (const id of Object.keys(intervalIds)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearInterval(id as any);\n      }\n    },\n    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n    [intervalIds],\n  );\n\n  return useConst({\n    setInterval: (func: () => void, duration: number): number => {\n      const id = (setInterval(func, duration) as unknown) as number;\n\n      intervalIds[id] = 1;\n\n      return id;\n    },\n\n    clearInterval: (id: number): void => {\n      delete intervalIds[id];\n      clearInterval(id);\n    },\n  });\n};\n", "import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type UseSetTimeoutReturnType = {\n  setTimeout: (callback: () => void, duration: number) => number;\n  clearTimeout: (id: number) => void;\n};\n\n/**\n *  Returns a wrapper function for `setTimeout` which automatically handles disposal.\n */\nexport const useSetTimeout = (): UseSetTimeoutReturnType => {\n  const timeoutIds = useConst<Record<number, number>>({});\n\n  // Cleanup function.\n  React.useEffect(\n    () => () => {\n      for (const id of Object.keys(timeoutIds)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearTimeout(id as any);\n      }\n    },\n    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n    [timeoutIds],\n  );\n\n  // Return wrapper which will auto cleanup.\n  return useConst({\n    setTimeout: (func: () => void, duration: number): number => {\n      const id = (setTimeout(func, duration) as unknown) as number;\n\n      timeoutIds[id] = 1;\n\n      return id;\n    },\n\n    clearTimeout: (id: number): void => {\n      delete timeoutIds[id];\n      clearTimeout(id);\n    },\n  });\n};\n", "import { getDocument, Rectangle } from '@fluentui/utilities';\nimport * as React from 'react';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport type { Point } from '@fluentui/utilities';\n\nexport type Target = Element | string | MouseEvent | Point | Rectangle | null | React.RefObject<Element>;\n\n/**\n * Hook to calculate and cache the target element specified by the given target attribute,\n * as well as the target element's (or host element's) parent window\n * @param target- Target selector passed to the component as a property, describing the element that\n * the callout should target\n * @param hostElement- The callout's host element, used for determining the parent window.\n */\nexport function useTarget<TElement extends HTMLElement = HTMLElement>(\n  target: Target | undefined,\n  hostElement?: React.RefObject<TElement | null>,\n): Readonly<[React.RefObject<Element | MouseEvent | Point | Rectangle | null>, Window | undefined]> {\n  const previousTargetProp = React.useRef<\n    Element | string | MouseEvent | Point | Rectangle | React.RefObject<Element> | null | undefined\n  >();\n\n  const targetRef = React.useRef<Element | MouseEvent | Point | Rectangle | null>(null);\n  /**\n   * Stores an instance of Window, used to check\n   * for server side rendering and if focus was lost.\n   */\n  const targetWindow = useWindow();\n\n  // If the target element changed, find the new one. If we are tracking\n  // target with class name, always find element because we do not know if\n  // fabric has rendered a new element and disposed the old element.\n  if (!target || target !== previousTargetProp.current || typeof target === 'string') {\n    const currentElement = hostElement?.current;\n    if (target) {\n      if (typeof target === 'string') {\n        const currentDoc: Document = getDocument(currentElement)!;\n        targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;\n      } else if ('stopPropagation' in target) {\n        targetRef.current = target;\n      } else if ('getBoundingClientRect' in target) {\n        targetRef.current = target;\n      } else if ('current' in target) {\n        targetRef.current = target.current;\n      } else {\n        targetRef.current = target;\n      }\n    }\n    previousTargetProp.current = target;\n  }\n\n  return [targetRef, targetWindow] as const;\n}\n", "// Do not modify this file; it is generated as part of publish.\n// The checked in version is a placeholder only and will not be updated.\nimport { setVersion } from '@fluentui/set-version';\nsetVersion('@fluentui/react-window-provider', '2.2.1');", "import * as React from 'react';\n\n/**\n * Hook which synchronously executes a callback when the component is about to unmount.\n *\n * @param callback - Function to call during unmount.\n */\nexport const useUnmount = (callback: () => void) => {\n  const unmountRef = React.useRef(callback);\n  unmountRef.current = callback;\n  React.useEffect(\n    () => () => {\n      unmountRef.current?.();\n    },\n    [],\n  );\n};\n", "import * as React from 'react';\nimport {\n  warn,\n  warnControlledUsage,\n  warnConditionallyRequiredProps,\n  warnDeprecations,\n  warnMutuallyExclusive,\n} from '@fluentui/utilities';\nimport { usePrevious } from './usePrevious';\nimport { useConst } from './useConst';\nimport type { ISettingsMap, IWarnControlledUsageParams } from '@fluentui/utilities';\n\nexport interface IWarningOptions<P> {\n  /** Name of the component */\n  name: string;\n\n  /** Current component props */\n  props: P;\n\n  /** Generic messages */\n  other?: string[];\n\n  /** Warns when props are required if a condition is met */\n  conditionallyRequired?: {\n    /** Props required when the condition is met */\n    requiredProps: string[];\n    /** Name of the prop that the condition is based on */\n    conditionalPropName: string;\n    /** Whether the condition is met */\n    condition: boolean;\n  }[];\n\n  /**\n   * Warns when deprecated props are being used. Each key is a prop name and each value is\n   * either undefined or a replacement prop name.\n   */\n  deprecations?: ISettingsMap<P>;\n\n  /**\n   * Warns when two props which are mutually exclusive are both being used.\n   * The key is one prop name and the value is the other.\n   */\n  mutuallyExclusive?: ISettingsMap<P>;\n\n  /**\n   * Check for and warn on the following error conditions with a form component:\n   * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n   *    and the component is not read-only\n   * - Both the value and defaultValue props are provided\n   * - The component is attempting to switch between controlled and uncontrolled\n   *\n   * The messages mimic the warnings React gives for these error conditions on input elements.\n   * The warning will only be displayed once per component instance.\n   */\n  controlledUsage?: Pick<\n    IWarnControlledUsageParams<P>,\n    'valueProp' | 'defaultValueProp' | 'onChangeProp' | 'readOnlyProp'\n  >;\n}\n\nlet warningId = 0;\n\n/**\n * Only in development mode, display console warnings when certain conditions are met.\n * Note that all warnings except `controlledUsage` will only be shown on first render\n * (new `controlledUsage` warnings may be shown later due to prop changes).\n */\nexport function useWarnings<P>(options: IWarningOptions<P>) {\n  if (process.env.NODE_ENV !== 'production') {\n    const {\n      name,\n      props,\n      other = [],\n      conditionallyRequired,\n      deprecations,\n      mutuallyExclusive,\n      controlledUsage,\n    } = options;\n\n    /* eslint-disable react-hooks/rules-of-hooks -- build-time conditional */\n    const hasWarnedRef = React.useRef(false);\n    const componentId = useConst(() => `useWarnings_${warningId++}`);\n    const oldProps = usePrevious(props);\n    /* eslint-enable react-hooks/rules-of-hooks */\n\n    // Warn synchronously (not in useEffect) on first render to make debugging easier.\n    if (!hasWarnedRef.current) {\n      hasWarnedRef.current = true;\n\n      for (const warning of other) {\n        warn(warning);\n      }\n\n      if (conditionallyRequired) {\n        for (const req of conditionallyRequired) {\n          warnConditionallyRequiredProps(name, props, req.requiredProps, req.conditionalPropName, req.condition);\n        }\n      }\n\n      deprecations && warnDeprecations(name, props, deprecations);\n\n      mutuallyExclusive && warnMutuallyExclusive(name, props, mutuallyExclusive);\n    }\n\n    // Controlled usage warnings may be displayed on either first or subsequent renders due to\n    // prop changes. Note that it's safe to run this synchronously (not in useEffect) even in\n    // concurrent mode because `warnControlledUsage` internally tracks which warnings have been\n    // displayed for each component instance (so nothing will be displayed twice).\n    controlledUsage && warnControlledUsage({ ...controlledUsage, componentId, props, componentName: name, oldProps });\n  }\n}\n", "import { getGlobalClassNames } from '../../Styling';\nimport type { IFabricStyleProps, IFabricStyles } from './Fabric.types';\n\nconst inheritFont = { fontFamily: 'inherit' };\n\nconst GlobalClassNames = {\n  root: 'ms-Fabric',\n  bodyThemed: 'ms-Fabric-bodyThemed',\n};\n\nexport interface IFabricClassNames {\n  root: string;\n  bodyThemed: string;\n}\n\nexport const getStyles = (props: IFabricStyleProps): IFabricStyles => {\n  const { theme, className, applyTheme } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        color: theme.palette.neutralPrimary,\n        selectors: {\n          '& button': inheritFont,\n          '& input': inheritFont,\n          '& textarea': inheritFont,\n        },\n      },\n      // apply theme to only if applyTheme is true\n      applyTheme && {\n        color: theme.semanticColors.bodyText,\n        backgroundColor: theme.semanticColors.bodyBackground,\n      },\n      className,\n    ],\n    bodyThemed: [\n      {\n        backgroundColor: theme.semanticColors.bodyBackground,\n      },\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { FabricBase } from './Fabric.base';\nimport { getStyles } from './Fabric.styles';\nimport type { IFabricProps, IFabricStyleProps, IFabricStyles } from './Fabric.types';\n\n/**\n * @deprecated This component is deprecated as of `@fluentui/react` version 8. Use `ThemeProvider` instead.\n */\nexport const Fabric: React.FunctionComponent<IFabricProps> = styled<IFabricProps, IFabricStyleProps, IFabricStyles>(\n  FabricBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Fabric',\n  },\n);\n", "import { ILayerHost } from './LayerHost.types';\n\nconst _layersByHostId: { [hostId: string]: (() => void)[] } = {};\nconst _layerHostsById: { [hostId: string]: ILayerHost[] } = {};\n\nconst defaultHostId = 'fluent-default-layer-host';\nlet _defaultHostSelector: string | undefined = `#${defaultHostId}`;\n\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function registerLayer(hostId: string, callback: () => void) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(callback);\n\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (const layerHost of layerHosts) {\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function unregisterLayer(hostId: string, callback: () => void) {\n  const layers = _layersByHostId[hostId];\n\n  if (layers) {\n    const idx = layers.indexOf(callback);\n    if (idx >= 0) {\n      layers.splice(idx, 1);\n\n      if (layers.length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (const layerHost of layerHosts) {\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n\n/**\n * Gets the number of layers currently registered with a host id.\n * @param hostId Id of the layer host.\n * @returns The number of layers currently registered with the host.\n */\nexport function getLayerCount(hostId: string): number {\n  const layers = _layerHostsById[hostId];\n\n  return layers ? layers.length : 0;\n}\n\n/**\n * Gets the Layer Host instance associated with a hostId, if applicable.\n * @param hostId\n * @returns A component ref for the associated layer host.\n */\nexport function getLayerHost(hostId: string): ILayerHost | undefined {\n  const layerHosts = _layerHostsById[hostId];\n\n  return (layerHosts && layerHosts[0]) || undefined;\n}\n\n/**\n * Registers a Layer Host with an associated hostId.\n * @param hostId Id of the layer host\n * @param layerHost layer host instance\n */\nexport function registerLayerHost(hostId: string, layerHost: ILayerHost): void {\n  const layerHosts = _layerHostsById[hostId] || (_layerHostsById[hostId] = []);\n\n  // Insert this at the start of an array to avoid race conditions between mount and unmount.\n  // If a LayerHost is re-mounted, and mount of the new instance may occur before the unmount of the old one.\n  // Putting the new instance at the start of this array ensures that calls to `getLayerHost` will immediately\n  // get the new one even if the old one is around briefly.\n  layerHosts.unshift(layerHost);\n}\n\n/**\n * Unregisters a Layer Host from the associated hostId.\n * @param hostId Id of the layer host\n * @param layerHost layer host instance\n */\nexport function unregisterLayerHost(hostId: string, layerHost: ILayerHost): void {\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    const idx = layerHosts.indexOf(layerHost);\n\n    if (idx >= 0) {\n      layerHosts.splice(idx, 1);\n    }\n\n    if (layerHosts.length === 0) {\n      delete _layerHostsById[hostId];\n    }\n  }\n}\n\n/**\n * When no default layer host is provided, this function is executed to create the default host.\n */\nexport function createDefaultLayerHost(doc: Document): Node | null {\n  const host = doc.createElement('div');\n  host.setAttribute('id', defaultHostId);\n  (host as HTMLElement).style.cssText = 'position:fixed;z-index:1000000';\n\n  doc?.body.appendChild(host);\n\n  return host;\n}\n\n/**\n * This function can be optionally called to clean up the default layer host as needed.\n */\nexport function cleanupDefaultLayerHost(doc: Document) {\n  const host = doc.querySelector(`#${defaultHostId}`);\n\n  if (host) {\n    doc.removeChild(host);\n  }\n}\n\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\nexport function notifyHostChanged(id: string) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(callback => callback());\n  }\n}\n\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsy value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\nexport function setDefaultTarget(selector?: string) {\n  _defaultHostSelector = selector;\n}\n\n/**\n * Get the default target selector when determining a host\n */\nexport function getDefaultTarget(): string | undefined {\n  return _defaultHostSelector;\n}\n", "import * as React from 'react';\nimport type { RegisterPortalFn } from './types';\n\nconst PortalCompatContext = React.createContext<RegisterPortalFn>(\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  () => () => {},\n);\n\nexport const PortalCompatContextProvider = PortalCompatContext.Provider;\n\nexport function usePortalCompat() {\n  return React.useContext(PortalCompatContext);\n}\n", "// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore \"react-portal-compat-context\" uses v9 configs via path aliases\nimport { usePortalCompat } from '@fluentui/react-portal-compat-context';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Fabric } from '../../Fabric';\nimport {\n  classNamesFunction,\n  getDocument,\n  setPortalAttribute,\n  setVirtualParent,\n  FocusRectsProvider,\n  IFocusRectsContext,\n} from '../../Utilities';\nimport {\n  registerLayer,\n  getDefaultTarget,\n  unregisterLayer,\n  getLayerHost,\n  createDefaultLayerHost,\n} from './Layer.notification';\nimport { useIsomorphicLayoutEffect, useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nimport type { ILayerProps, ILayerStyleProps, ILayerStyles } from './Layer.types';\n\nconst getClassNames = classNamesFunction<ILayerStyleProps, ILayerStyles>();\n\nexport const LayerBase: React.FunctionComponent<ILayerProps> = React.forwardRef<HTMLDivElement, ILayerProps>(\n  (props, ref) => {\n    const registerPortalEl = usePortalCompat();\n\n    const rootRef = React.useRef<HTMLSpanElement>(null);\n    const mergedRef = useMergedRefs(rootRef, ref);\n    const layerRef = React.useRef<HTMLDivElement>();\n    const fabricRef = React.useRef<HTMLDivElement>(null);\n\n    // Tracks if the layer mount events need to be raised.\n    // Required to allow the DOM to render after the layer element is added.\n    const [needRaiseLayerMount, setNeedRaiseLayerMount] = React.useState(false);\n\n    const {\n      eventBubblingEnabled,\n      styles,\n      theme,\n      className,\n      children,\n      hostId,\n      onLayerDidMount = () => undefined,\n      // eslint-disable-next-line deprecation/deprecation\n      onLayerMounted = () => undefined,\n      onLayerWillUnmount,\n      insertFirst,\n    } = props;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isNotHost: !hostId,\n    });\n\n    // Returns the user provided hostId props element, the default target selector,\n    // or undefined if document doesn't exist.\n    const getHost = (doc: Document): Node | null => {\n      if (hostId) {\n        const layerHost = getLayerHost(hostId);\n\n        if (layerHost) {\n          return layerHost.rootRef.current ?? null;\n        }\n\n        return doc.getElementById(hostId) ?? null;\n      } else {\n        const defaultHostSelector = getDefaultTarget();\n\n        // Find the host.\n        let host: Node | null = defaultHostSelector ? (doc.querySelector(defaultHostSelector) as Node) : null;\n\n        // If no host is available, create a container for injecting layers in.\n        // Having a container scopes layout computation.\n        if (!host) {\n          host = createDefaultLayerHost(doc);\n        }\n\n        return host;\n      }\n    };\n\n    // Removes the current layer element's parentNode and runs onLayerWillUnmount prop if provided.\n    const removeLayerElement = (): void => {\n      onLayerWillUnmount?.();\n\n      const elem = layerRef.current;\n\n      // Clear ref before removing from the DOM\n      layerRef.current = undefined;\n\n      if (elem && elem.parentNode) {\n        elem.parentNode.removeChild(elem);\n      }\n    };\n\n    // If a doc or host exists, it will remove and update layer parentNodes.\n    const createLayerElement = () => {\n      const doc = getDocument(rootRef.current);\n\n      if (!doc) {\n        return;\n      }\n\n      const host = getHost(doc);\n\n      if (!host) {\n        return;\n      }\n\n      // Remove and re-create any previous existing layer elements.\n      removeLayerElement();\n\n      const el = (host.ownerDocument ?? doc).createElement('div');\n\n      el.className = classNames.root!;\n      setPortalAttribute(el);\n      setVirtualParent(el, rootRef.current!);\n\n      insertFirst ? host.insertBefore(el, host.firstChild) : host.appendChild(el);\n      layerRef.current = el;\n      setNeedRaiseLayerMount(true);\n    };\n\n    useIsomorphicLayoutEffect(() => {\n      createLayerElement();\n      // Check if the user provided a hostId prop and register the layer with the ID.\n      if (hostId) {\n        registerLayer(hostId, createLayerElement);\n      }\n\n      const unregisterPortalEl = layerRef.current ? registerPortalEl(layerRef.current) : undefined;\n\n      return () => {\n        if (unregisterPortalEl) {\n          unregisterPortalEl();\n        }\n\n        removeLayerElement();\n\n        if (hostId) {\n          unregisterLayer(hostId, createLayerElement);\n        }\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- should run if the hostId updates.\n    }, [hostId]);\n\n    React.useEffect(() => {\n      if (layerRef.current && needRaiseLayerMount) {\n        onLayerMounted?.();\n        onLayerDidMount?.();\n        setNeedRaiseLayerMount(false);\n      }\n    }, [needRaiseLayerMount, onLayerMounted, onLayerDidMount]);\n\n    useDebugWarnings(props);\n\n    const focusRectsContext = React.useMemo<IFocusRectsContext>(\n      () => ({\n        providerRef: fabricRef,\n      }),\n      [fabricRef],\n    );\n\n    return (\n      <span className=\"ms-layer\" ref={mergedRef}>\n        {layerRef.current &&\n          ReactDOM.createPortal(\n            <FocusRectsProvider value={focusRectsContext}>\n              {/* eslint-disable deprecation/deprecation */}\n              <Fabric\n                {...(!eventBubblingEnabled && getFilteredEvents())}\n                className={classNames.content}\n                ref={fabricRef}\n              >\n                {children}\n              </Fabric>\n              {/* eslint-enable deprecation/deprecation */}\n            </FocusRectsProvider>,\n            layerRef.current,\n          )}\n      </span>\n    );\n  },\n);\nLayerBase.displayName = 'LayerBase';\n\nlet filteredEventProps: { [key: string]: (ev: React.SyntheticEvent<HTMLElement, Event>) => void };\n\nconst onFilterEvent = (ev: React.SyntheticEvent<HTMLElement>): void => {\n  // We should just be able to check ev.bubble here and only stop events that are bubbling up. However, even though\n  // mouseenter and mouseleave do NOT bubble up, they are showing up as bubbling. Therefore we stop events based on\n  // event name rather than ev.bubble.\n  if (\n    ev.eventPhase === Event.BUBBLING_PHASE &&\n    ev.type !== 'mouseenter' &&\n    ev.type !== 'mouseleave' &&\n    ev.type !== 'touchstart' &&\n    ev.type !== 'touchend'\n  ) {\n    ev.stopPropagation();\n  }\n};\n\nfunction getFilteredEvents() {\n  if (!filteredEventProps) {\n    filteredEventProps = {} as any;\n    [\n      'onClick',\n      'onContextMenu',\n      'onDoubleClick',\n      'onDrag',\n      'onDragEnd',\n      'onDragEnter',\n      'onDragExit',\n      'onDragLeave',\n      'onDragOver',\n      'onDragStart',\n      'onDrop',\n      'onMouseDown',\n      'onMouseEnter',\n      'onMouseLeave',\n      'onMouseMove',\n      'onMouseOver',\n      'onMouseOut',\n      'onMouseUp',\n      'onTouchMove',\n      'onTouchStart',\n      'onTouchCancel',\n      'onTouchEnd',\n      'onKeyDown',\n      'onKeyPress',\n      'onKeyUp',\n      'onFocus',\n      'onBlur',\n      'onChange',\n      'onInput',\n      'onInvalid',\n      'onSubmit',\n    ].forEach(name => (filteredEventProps[name] = onFilterEvent));\n  }\n  return filteredEventProps;\n}\n\nfunction useDebugWarnings(props: ILayerProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Layer',\n      props,\n      deprecations: { onLayerMounted: 'onLayerDidMount' },\n    });\n  }\n}\n", "import { ZIndexes, getGlobalClassNames } from '../../Styling';\nimport type { ILayerStyleProps, ILayerStyles } from './Layer.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Layer',\n  rootNoHost: 'ms-Layer--fixed',\n  content: 'ms-Layer-content',\n};\n\nexport const getStyles = (props: ILayerStyleProps): ILayerStyles => {\n  const { className, isNotHost, theme } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      isNotHost && [\n        classNames.rootNoHost,\n        {\n          position: 'fixed',\n          zIndex: ZIndexes.Layer,\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          visibility: 'hidden',\n        },\n      ],\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        visibility: 'visible',\n      },\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { LayerBase } from './Layer.base';\nimport { getStyles } from './Layer.styles';\nimport type { ILayerProps, ILayerStyleProps, ILayerStyles } from './Layer.types';\n\nexport const Layer: React.FunctionComponent<ILayerProps> = styled<ILayerProps, ILayerStyleProps, ILayerStyles>(\n  LayerBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Layer',\n    fields: ['hostId', 'theme', 'styles'],\n  },\n);\n", "import * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nimport type { ILayerHost, ILayerHostProps } from './LayerHost.types';\n\nexport const LayerHost: React.FunctionComponent<ILayerHostProps> = props => {\n  const { className } = props;\n\n  const [layerHostId] = React.useState(() => getId());\n\n  const { id: hostId = layerHostId } = props;\n\n  const layerHostRef = React.useRef<ILayerHost>({\n    hostId,\n    rootRef: React.useRef<HTMLDivElement | null>(null),\n    notifyLayersChanged: () => {\n      // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    },\n  });\n\n  React.useImperativeHandle(props.componentRef, () => layerHostRef.current);\n\n  React.useEffect(() => {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useUnmount(() => {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n\n  return <div {...props} className={css('ms-LayerHost', className)} ref={layerHostRef.current.rootRef} />;\n};\n"],
  "mappings": "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",
  "names": ["React", "React", "React", "React", "React", "React", "isControlled", "React", "React", "React", "React", "_i", "React", "React", "React", "React", "React", "React", "React", "React", "React", "React", "React", "getClassNames", "_a", "_b", "GlobalClassNames", "getStyles", "getStyles", "React"]
}
