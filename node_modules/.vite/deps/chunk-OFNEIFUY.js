import {
  require_react_dom
} from "./chunk-WMIXMSGG.js";
import {
  Async,
  Customizer,
  FocusRectsContext,
  FocusRectsProvider,
  ZIndexes,
  __assign,
  __spreadArray,
  classNamesFunction,
  createTheme,
  css,
  divProperties,
  getDocument,
  getGlobalClassNames,
  getId,
  getNativeProps,
  getRTL,
  memoizeFunction,
  on,
  setPortalAttribute,
  setVersion,
  setVirtualParent,
  styled,
  useIsomorphicLayoutEffect,
  warn,
  warnConditionallyRequiredProps,
  warnControlledUsage,
  warnDeprecations,
  warnMutuallyExclusive
} from "./chunk-KWCDGRXS.js";
import {
  __toESM,
  require_react
} from "./chunk-PC5MGJGW.js";

// node_modules/@fluentui/react/lib/version.js
setVersion("@fluentui/react", "8.86.3");

// node_modules/@fluentui/react-window-provider/lib/WindowProvider.js
var React = __toESM(require_react());
var WindowContext = React.createContext({
  window: typeof window === "object" ? window : void 0
});
var useWindow = function() {
  return React.useContext(WindowContext).window;
};
var useDocument = function() {
  var _a;
  return (_a = React.useContext(WindowContext).window) === null || _a === void 0 ? void 0 : _a.document;
};
var WindowProvider = function(props) {
  return React.createElement(WindowContext.Provider, { value: props }, props.children);
};

// node_modules/@fluentui/react/lib/components/Fabric/Fabric.base.js
var React20 = __toESM(require_react());

// node_modules/@fluentui/react-hooks/lib/version.js
setVersion("@fluentui/react-hooks", "8.6.4");

// node_modules/@fluentui/react-hooks/lib/useAsync.js
var React2 = __toESM(require_react());
function useAsync() {
  var asyncRef = React2.useRef();
  if (!asyncRef.current) {
    asyncRef.current = new Async();
  }
  React2.useEffect(function() {
    return function() {
      var _a;
      (_a = asyncRef.current) === null || _a === void 0 ? void 0 : _a.dispose();
      asyncRef.current = void 0;
    };
  }, []);
  return asyncRef.current;
}

// node_modules/@fluentui/react-hooks/lib/useBoolean.js
var React4 = __toESM(require_react());

// node_modules/@fluentui/react-hooks/lib/useConst.js
var React3 = __toESM(require_react());
function useConst(initialValue) {
  var ref = React3.useRef();
  if (ref.current === void 0) {
    ref.current = {
      value: typeof initialValue === "function" ? initialValue() : initialValue
    };
  }
  return ref.current.value;
}

// node_modules/@fluentui/react-hooks/lib/useBoolean.js
function useBoolean(initialState) {
  var _a = React4.useState(initialState), value = _a[0], setValue = _a[1];
  var setTrue = useConst(function() {
    return function() {
      setValue(true);
    };
  });
  var setFalse = useConst(function() {
    return function() {
      setValue(false);
    };
  });
  var toggle = useConst(function() {
    return function() {
      setValue(function(currentValue) {
        return !currentValue;
      });
    };
  });
  return [value, { setTrue, setFalse, toggle }];
}

// node_modules/@fluentui/react-hooks/lib/useConstCallback.js
var React5 = __toESM(require_react());

// node_modules/@fluentui/react-hooks/lib/useControllableValue.js
var React6 = __toESM(require_react());
function useControllableValue(controlledValue, defaultUncontrolledValue, onChange) {
  var _a = React6.useState(defaultUncontrolledValue), value = _a[0], setValue = _a[1];
  var isControlled2 = useConst(controlledValue !== void 0);
  var currentValue = isControlled2 ? controlledValue : value;
  var valueRef = React6.useRef(currentValue);
  var onChangeRef = React6.useRef(onChange);
  React6.useEffect(function() {
    valueRef.current = currentValue;
    onChangeRef.current = onChange;
  });
  var setValueOrCallOnChange = useConst(function() {
    return function(update, ev) {
      var newValue = typeof update === "function" ? update(valueRef.current) : update;
      if (onChangeRef.current) {
        onChangeRef.current(ev, newValue);
      }
      if (!isControlled2) {
        setValue(newValue);
      }
    };
  });
  return [currentValue, setValueOrCallOnChange];
}

// node_modules/@fluentui/react-hooks/lib/useEventCallback.js
var React7 = __toESM(require_react());
function useEventCallback(fn) {
  var callbackRef = React7.useRef(function() {
    throw new Error("Cannot call an event handler while rendering");
  });
  useIsomorphicLayoutEffect(function() {
    callbackRef.current = fn;
  }, [fn]);
  return useConst(function() {
    return function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var callback = callbackRef.current;
      return callback.apply(void 0, args);
    };
  });
}

// node_modules/@fluentui/react-hooks/lib/useForceUpdate.js
var React8 = __toESM(require_react());

// node_modules/@fluentui/react-hooks/lib/useId.js
var React9 = __toESM(require_react());
function useId(prefix, providedId) {
  var ref = React9.useRef(providedId);
  if (!ref.current) {
    ref.current = getId(prefix);
  }
  return ref.current;
}

// node_modules/@fluentui/react-hooks/lib/useMergedRefs.js
var React10 = __toESM(require_react());
function useMergedRefs() {
  var refs = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    refs[_i] = arguments[_i];
  }
  var mergedCallback = React10.useCallback(function(value) {
    mergedCallback.current = value;
    for (var _i2 = 0, refs_1 = refs; _i2 < refs_1.length; _i2++) {
      var ref = refs_1[_i2];
      if (typeof ref === "function") {
        ref(value);
      } else if (ref) {
        ref.current = value;
      }
    }
  }, __spreadArray([], refs));
  return mergedCallback;
}

// node_modules/@fluentui/react-hooks/lib/useMount.js
var React11 = __toESM(require_react());

// node_modules/@fluentui/react-hooks/lib/useMountSync.js
var React12 = __toESM(require_react());

// node_modules/@fluentui/react-hooks/lib/useOnEvent.js
var React13 = __toESM(require_react());
function useOnEvent(element, eventName, callback, useCapture) {
  var callbackRef = React13.useRef(callback);
  callbackRef.current = callback;
  React13.useEffect(function() {
    var actualElement = element && "current" in element ? element.current : element;
    if (!actualElement) {
      return;
    }
    var dispose = on(actualElement, eventName, function(ev) {
      return callbackRef.current(ev);
    }, useCapture);
    return dispose;
  }, [element, eventName, useCapture]);
}

// node_modules/@fluentui/react-hooks/lib/usePrevious.js
var import_react = __toESM(require_react());
function usePrevious(value) {
  var ref = (0, import_react.useRef)();
  (0, import_react.useEffect)(function() {
    ref.current = value;
  });
  return ref.current;
}

// node_modules/@fluentui/react-hooks/lib/useRefEffect.js
var React14 = __toESM(require_react());
function useRefEffect(callback, initial) {
  if (initial === void 0) {
    initial = null;
  }
  var createRefCallback = function() {
    var refCallback = function(value) {
      if (data.ref.current !== value) {
        if (data.cleanup) {
          data.cleanup();
          data.cleanup = void 0;
        }
        data.ref.current = value;
        if (value !== null) {
          data.cleanup = data.callback(value);
        }
      }
    };
    refCallback.current = initial;
    return refCallback;
  };
  var data = React14.useRef({
    ref: createRefCallback(),
    callback
  }).current;
  data.callback = callback;
  return data.ref;
}

// node_modules/@fluentui/react-hooks/lib/useSetInterval.js
var React15 = __toESM(require_react());

// node_modules/@fluentui/react-hooks/lib/useSetTimeout.js
var React16 = __toESM(require_react());
var useSetTimeout = function() {
  var timeoutIds = useConst({});
  React16.useEffect(
    function() {
      return function() {
        for (var _i = 0, _a = Object.keys(timeoutIds); _i < _a.length; _i++) {
          var id = _a[_i];
          clearTimeout(id);
        }
      };
    },
    [timeoutIds]
  );
  return useConst({
    setTimeout: function(func, duration) {
      var id = setTimeout(func, duration);
      timeoutIds[id] = 1;
      return id;
    },
    clearTimeout: function(id) {
      delete timeoutIds[id];
      clearTimeout(id);
    }
  });
};

// node_modules/@fluentui/react-hooks/lib/useTarget.js
var React17 = __toESM(require_react());

// node_modules/@fluentui/react-window-provider/lib/version.js
setVersion("@fluentui/react-window-provider", "2.2.1");

// node_modules/@fluentui/react-hooks/lib/useTarget.js
function useTarget(target, hostElement) {
  var previousTargetProp = React17.useRef();
  var targetRef = React17.useRef(null);
  var targetWindow = useWindow();
  if (!target || target !== previousTargetProp.current || typeof target === "string") {
    var currentElement = hostElement === null || hostElement === void 0 ? void 0 : hostElement.current;
    if (target) {
      if (typeof target === "string") {
        var currentDoc = getDocument(currentElement);
        targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;
      } else if ("stopPropagation" in target) {
        targetRef.current = target;
      } else if ("getBoundingClientRect" in target) {
        targetRef.current = target;
      } else if ("current" in target) {
        targetRef.current = target.current;
      } else {
        targetRef.current = target;
      }
    }
    previousTargetProp.current = target;
  }
  return [targetRef, targetWindow];
}

// node_modules/@fluentui/react-hooks/lib/useUnmount.js
var React18 = __toESM(require_react());
var useUnmount = function(callback) {
  var unmountRef = React18.useRef(callback);
  unmountRef.current = callback;
  React18.useEffect(function() {
    return function() {
      var _a;
      (_a = unmountRef.current) === null || _a === void 0 ? void 0 : _a.call(unmountRef);
    };
  }, []);
};

// node_modules/@fluentui/react-hooks/lib/useWarnings.js
var React19 = __toESM(require_react());
var warningId = 0;
function useWarnings(options) {
  if (true) {
    var name_1 = options.name, props = options.props, _a = options.other, other = _a === void 0 ? [] : _a, conditionallyRequired = options.conditionallyRequired, deprecations = options.deprecations, mutuallyExclusive = options.mutuallyExclusive, controlledUsage = options.controlledUsage;
    var hasWarnedRef = React19.useRef(false);
    var componentId = useConst(function() {
      return "useWarnings_" + warningId++;
    });
    var oldProps = usePrevious(props);
    if (!hasWarnedRef.current) {
      hasWarnedRef.current = true;
      for (var _i = 0, other_1 = other; _i < other_1.length; _i++) {
        var warning = other_1[_i];
        warn(warning);
      }
      if (conditionallyRequired) {
        for (var _b = 0, conditionallyRequired_1 = conditionallyRequired; _b < conditionallyRequired_1.length; _b++) {
          var req = conditionallyRequired_1[_b];
          warnConditionallyRequiredProps(name_1, props, req.requiredProps, req.conditionalPropName, req.condition);
        }
      }
      deprecations && warnDeprecations(name_1, props, deprecations);
      mutuallyExclusive && warnMutuallyExclusive(name_1, props, mutuallyExclusive);
    }
    controlledUsage && warnControlledUsage(__assign(__assign({}, controlledUsage), { componentId, props, componentName: name_1, oldProps }));
  }
}

// node_modules/@fluentui/react/lib/components/Fabric/Fabric.base.js
var getClassNames = classNamesFunction();
var getFabricTheme = memoizeFunction(function(theme, isRTL) {
  return createTheme(__assign(__assign({}, theme), { rtl: isRTL }));
});
var getDir = function(_a) {
  var theme = _a.theme, dir = _a.dir;
  var contextDir = getRTL(theme) ? "rtl" : "ltr";
  var pageDir = getRTL() ? "rtl" : "ltr";
  var componentDir = dir ? dir : contextDir;
  return {
    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,
    needsTheme: componentDir !== contextDir
  };
};
var FabricBase = React20.forwardRef(function(props, ref) {
  var className = props.className, theme = props.theme, applyTheme = props.applyTheme, applyThemeToBody = props.applyThemeToBody, styles = props.styles;
  var classNames = getClassNames(styles, {
    theme,
    applyTheme,
    className
  });
  var rootElement = React20.useRef(null);
  useApplyThemeToBody(applyThemeToBody, classNames, rootElement);
  return React20.createElement(React20.Fragment, null, useRenderedContent(props, classNames, rootElement, ref));
});
FabricBase.displayName = "FabricBase";
function useRenderedContent(props, _a, rootElement, ref) {
  var root = _a.root;
  var _b = props.as, Root = _b === void 0 ? "div" : _b, dir = props.dir, theme = props.theme;
  var divProps = getNativeProps(props, divProperties, ["dir"]);
  var _c = getDir(props), rootDir = _c.rootDir, needsTheme = _c.needsTheme;
  var parentProviderRef = React20.useContext(FocusRectsContext).providerRef;
  var focusRectsContext = React20.useMemo(function() {
    return {
      providerRef: parentProviderRef !== null && parentProviderRef !== void 0 ? parentProviderRef : rootElement
    };
  }, [parentProviderRef, rootElement]);
  var renderedContent = React20.createElement(
    FocusRectsProvider,
    { value: focusRectsContext },
    React20.createElement(Root, __assign({ dir: rootDir }, divProps, { className: root, ref: useMergedRefs(rootElement, ref) }))
  );
  if (needsTheme) {
    renderedContent = React20.createElement(Customizer, { settings: { theme: getFabricTheme(theme, dir === "rtl") } }, renderedContent);
  }
  return renderedContent;
}
function useApplyThemeToBody(applyThemeToBody, _a, rootElement) {
  var bodyThemed = _a.bodyThemed;
  React20.useEffect(function() {
    if (applyThemeToBody) {
      var currentDoc_1 = getDocument(rootElement.current);
      if (currentDoc_1) {
        currentDoc_1.body.classList.add(bodyThemed);
        return function() {
          currentDoc_1.body.classList.remove(bodyThemed);
        };
      }
    }
  }, [bodyThemed, applyThemeToBody, rootElement]);
  return rootElement;
}

// node_modules/@fluentui/react/lib/components/Fabric/Fabric.styles.js
var inheritFont = { fontFamily: "inherit" };
var GlobalClassNames = {
  root: "ms-Fabric",
  bodyThemed: "ms-Fabric-bodyThemed"
};
var getStyles = function(props) {
  var theme = props.theme, className = props.className, applyTheme = props.applyTheme;
  var classNames = getGlobalClassNames(GlobalClassNames, theme);
  return {
    root: [
      classNames.root,
      theme.fonts.medium,
      {
        color: theme.palette.neutralPrimary,
        selectors: {
          "& button": inheritFont,
          "& input": inheritFont,
          "& textarea": inheritFont
        }
      },
      applyTheme && {
        color: theme.semanticColors.bodyText,
        backgroundColor: theme.semanticColors.bodyBackground
      },
      className
    ],
    bodyThemed: [
      {
        backgroundColor: theme.semanticColors.bodyBackground
      }
    ]
  };
};

// node_modules/@fluentui/react/lib/components/Fabric/Fabric.js
var Fabric = styled(FabricBase, getStyles, void 0, {
  scope: "Fabric"
});

// node_modules/@fluentui/react/lib/components/Layer/Layer.notification.js
var _layersByHostId = {};
var _layerHostsById = {};
var defaultHostId = "fluent-default-layer-host";
var _defaultHostSelector = "#" + defaultHostId;
function registerLayer(hostId, callback) {
  if (!_layersByHostId[hostId]) {
    _layersByHostId[hostId] = [];
  }
  _layersByHostId[hostId].push(callback);
  var layerHosts = _layerHostsById[hostId];
  if (layerHosts) {
    for (var _i = 0, layerHosts_1 = layerHosts; _i < layerHosts_1.length; _i++) {
      var layerHost = layerHosts_1[_i];
      layerHost.notifyLayersChanged();
    }
  }
}
function unregisterLayer(hostId, callback) {
  var layers = _layersByHostId[hostId];
  if (layers) {
    var idx = layers.indexOf(callback);
    if (idx >= 0) {
      layers.splice(idx, 1);
      if (layers.length === 0) {
        delete _layersByHostId[hostId];
      }
    }
  }
  var layerHosts = _layerHostsById[hostId];
  if (layerHosts) {
    for (var _i = 0, layerHosts_2 = layerHosts; _i < layerHosts_2.length; _i++) {
      var layerHost = layerHosts_2[_i];
      layerHost.notifyLayersChanged();
    }
  }
}
function getLayerHost(hostId) {
  var layerHosts = _layerHostsById[hostId];
  return layerHosts && layerHosts[0] || void 0;
}
function registerLayerHost(hostId, layerHost) {
  var layerHosts = _layerHostsById[hostId] || (_layerHostsById[hostId] = []);
  layerHosts.unshift(layerHost);
}
function unregisterLayerHost(hostId, layerHost) {
  var layerHosts = _layerHostsById[hostId];
  if (layerHosts) {
    var idx = layerHosts.indexOf(layerHost);
    if (idx >= 0) {
      layerHosts.splice(idx, 1);
    }
    if (layerHosts.length === 0) {
      delete _layerHostsById[hostId];
    }
  }
}
function createDefaultLayerHost(doc) {
  var host = doc.createElement("div");
  host.setAttribute("id", defaultHostId);
  host.style.cssText = "position:fixed;z-index:1000000";
  doc === null || doc === void 0 ? void 0 : doc.body.appendChild(host);
  return host;
}
function cleanupDefaultLayerHost(doc) {
  var host = doc.querySelector("#" + defaultHostId);
  if (host) {
    doc.removeChild(host);
  }
}
function notifyHostChanged(id) {
  if (_layersByHostId[id]) {
    _layersByHostId[id].forEach(function(callback) {
      return callback();
    });
  }
}
function setDefaultTarget(selector) {
  _defaultHostSelector = selector;
}
function getDefaultTarget() {
  return _defaultHostSelector;
}

// node_modules/@fluentui/react-portal-compat-context/lib/PortalCompatContext.js
var React21 = __toESM(require_react());
var PortalCompatContext = React21.createContext(
  function() {
    return function() {
    };
  }
);
var PortalCompatContextProvider = PortalCompatContext.Provider;
function usePortalCompat() {
  return React21.useContext(PortalCompatContext);
}

// node_modules/@fluentui/react/lib/components/Layer/Layer.base.js
var React22 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());
var getClassNames2 = classNamesFunction();
var LayerBase = React22.forwardRef(function(props, ref) {
  var registerPortalEl = usePortalCompat();
  var rootRef = React22.useRef(null);
  var mergedRef = useMergedRefs(rootRef, ref);
  var layerRef = React22.useRef();
  var fabricRef = React22.useRef(null);
  var _a = React22.useState(false), needRaiseLayerMount = _a[0], setNeedRaiseLayerMount = _a[1];
  var eventBubblingEnabled = props.eventBubblingEnabled, styles = props.styles, theme = props.theme, className = props.className, children = props.children, hostId = props.hostId, _b = props.onLayerDidMount, onLayerDidMount = _b === void 0 ? function() {
    return void 0;
  } : _b, _c = props.onLayerMounted, onLayerMounted = _c === void 0 ? function() {
    return void 0;
  } : _c, onLayerWillUnmount = props.onLayerWillUnmount, insertFirst = props.insertFirst;
  var classNames = getClassNames2(styles, {
    theme,
    className,
    isNotHost: !hostId
  });
  var getHost = function(doc) {
    var _a2, _b2;
    if (hostId) {
      var layerHost = getLayerHost(hostId);
      if (layerHost) {
        return (_a2 = layerHost.rootRef.current) !== null && _a2 !== void 0 ? _a2 : null;
      }
      return (_b2 = doc.getElementById(hostId)) !== null && _b2 !== void 0 ? _b2 : null;
    } else {
      var defaultHostSelector = getDefaultTarget();
      var host = defaultHostSelector ? doc.querySelector(defaultHostSelector) : null;
      if (!host) {
        host = createDefaultLayerHost(doc);
      }
      return host;
    }
  };
  var removeLayerElement = function() {
    onLayerWillUnmount === null || onLayerWillUnmount === void 0 ? void 0 : onLayerWillUnmount();
    var elem = layerRef.current;
    layerRef.current = void 0;
    if (elem && elem.parentNode) {
      elem.parentNode.removeChild(elem);
    }
  };
  var createLayerElement = function() {
    var _a2;
    var doc = getDocument(rootRef.current);
    if (!doc) {
      return;
    }
    var host = getHost(doc);
    if (!host) {
      return;
    }
    removeLayerElement();
    var el = ((_a2 = host.ownerDocument) !== null && _a2 !== void 0 ? _a2 : doc).createElement("div");
    el.className = classNames.root;
    setPortalAttribute(el);
    setVirtualParent(el, rootRef.current);
    insertFirst ? host.insertBefore(el, host.firstChild) : host.appendChild(el);
    layerRef.current = el;
    setNeedRaiseLayerMount(true);
  };
  useIsomorphicLayoutEffect(function() {
    createLayerElement();
    if (hostId) {
      registerLayer(hostId, createLayerElement);
    }
    var unregisterPortalEl = layerRef.current ? registerPortalEl(layerRef.current) : void 0;
    return function() {
      if (unregisterPortalEl) {
        unregisterPortalEl();
      }
      removeLayerElement();
      if (hostId) {
        unregisterLayer(hostId, createLayerElement);
      }
    };
  }, [hostId]);
  React22.useEffect(function() {
    if (layerRef.current && needRaiseLayerMount) {
      onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
      onLayerDidMount === null || onLayerDidMount === void 0 ? void 0 : onLayerDidMount();
      setNeedRaiseLayerMount(false);
    }
  }, [needRaiseLayerMount, onLayerMounted, onLayerDidMount]);
  useDebugWarnings(props);
  var focusRectsContext = React22.useMemo(function() {
    return {
      providerRef: fabricRef
    };
  }, [fabricRef]);
  return React22.createElement("span", { className: "ms-layer", ref: mergedRef }, layerRef.current && ReactDOM.createPortal(React22.createElement(
    FocusRectsProvider,
    { value: focusRectsContext },
    React22.createElement(Fabric, __assign({}, !eventBubblingEnabled && getFilteredEvents(), { className: classNames.content, ref: fabricRef }), children)
  ), layerRef.current));
});
LayerBase.displayName = "LayerBase";
var filteredEventProps;
var onFilterEvent = function(ev) {
  if (ev.eventPhase === Event.BUBBLING_PHASE && ev.type !== "mouseenter" && ev.type !== "mouseleave" && ev.type !== "touchstart" && ev.type !== "touchend") {
    ev.stopPropagation();
  }
};
function getFilteredEvents() {
  if (!filteredEventProps) {
    filteredEventProps = {};
    [
      "onClick",
      "onContextMenu",
      "onDoubleClick",
      "onDrag",
      "onDragEnd",
      "onDragEnter",
      "onDragExit",
      "onDragLeave",
      "onDragOver",
      "onDragStart",
      "onDrop",
      "onMouseDown",
      "onMouseEnter",
      "onMouseLeave",
      "onMouseMove",
      "onMouseOver",
      "onMouseOut",
      "onMouseUp",
      "onTouchMove",
      "onTouchStart",
      "onTouchCancel",
      "onTouchEnd",
      "onKeyDown",
      "onKeyPress",
      "onKeyUp",
      "onFocus",
      "onBlur",
      "onChange",
      "onInput",
      "onInvalid",
      "onSubmit"
    ].forEach(function(name) {
      return filteredEventProps[name] = onFilterEvent;
    });
  }
  return filteredEventProps;
}
function useDebugWarnings(props) {
  if (true) {
    useWarnings({
      name: "Layer",
      props,
      deprecations: { onLayerMounted: "onLayerDidMount" }
    });
  }
}

// node_modules/@fluentui/react/lib/components/Layer/Layer.styles.js
var GlobalClassNames2 = {
  root: "ms-Layer",
  rootNoHost: "ms-Layer--fixed",
  content: "ms-Layer-content"
};
var getStyles2 = function(props) {
  var className = props.className, isNotHost = props.isNotHost, theme = props.theme;
  var classNames = getGlobalClassNames(GlobalClassNames2, theme);
  return {
    root: [
      classNames.root,
      theme.fonts.medium,
      isNotHost && [
        classNames.rootNoHost,
        {
          position: "fixed",
          zIndex: ZIndexes.Layer,
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          visibility: "hidden"
        }
      ],
      className
    ],
    content: [
      classNames.content,
      {
        visibility: "visible"
      }
    ]
  };
};

// node_modules/@fluentui/react/lib/components/Layer/Layer.js
var Layer = styled(LayerBase, getStyles2, void 0, {
  scope: "Layer",
  fields: ["hostId", "theme", "styles"]
});

// node_modules/@fluentui/react/lib/components/Layer/LayerHost.js
var React23 = __toESM(require_react());
var LayerHost = function(props) {
  var className = props.className;
  var layerHostId = React23.useState(function() {
    return getId();
  })[0];
  var _a = props.id, hostId = _a === void 0 ? layerHostId : _a;
  var layerHostRef = React23.useRef({
    hostId,
    rootRef: React23.useRef(null),
    notifyLayersChanged: function() {
    }
  });
  React23.useImperativeHandle(props.componentRef, function() {
    return layerHostRef.current;
  });
  React23.useEffect(function() {
    registerLayerHost(hostId, layerHostRef.current);
    notifyHostChanged(hostId);
  }, []);
  useUnmount(function() {
    unregisterLayerHost(hostId, layerHostRef.current);
    notifyHostChanged(hostId);
  });
  return React23.createElement("div", __assign({}, props, { className: css("ms-LayerHost", className), ref: layerHostRef.current.rootRef }));
};

export {
  useAsync,
  useConst,
  useBoolean,
  useControllableValue,
  useEventCallback,
  useId,
  useMergedRefs,
  useOnEvent,
  usePrevious,
  useRefEffect,
  useSetTimeout,
  WindowContext,
  useWindow,
  useDocument,
  WindowProvider,
  useTarget,
  useUnmount,
  useWarnings,
  FabricBase,
  Fabric,
  createDefaultLayerHost,
  cleanupDefaultLayerHost,
  setDefaultTarget,
  LayerBase,
  Layer,
  LayerHost
};
//# sourceMappingURL=chunk-OFNEIFUY.js.map
